
LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000412c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080041ec  080041ec  000141ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800422c  0800422c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800422c  0800422c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800422c  0800422c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800422c  0800422c  0001422c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08004234  08004234  00014234  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800423c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000294  2000000c  08004248  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a0  08004248  000202a0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f308  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000025d5  00000000  00000000  0002f37f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b58  00000000  00000000  00031958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008cc  00000000  00000000  000324b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00011f7f  00000000  00000000  00032d7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010680  00000000  00000000  00044cfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00067776  00000000  00000000  0005537b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000027bc  00000000  00000000  000bcaf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  000bf2b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080041d4 	.word	0x080041d4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080041d4 	.word	0x080041d4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <_ZN6ButtonC1EP12GPIO_TypeDefhh>:
#include <Button.h>

Button::Button(GPIO_TypeDef *port, uint8_t pin, uint8_t debounceTime) {
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
 8000226:	60f8      	str	r0, [r7, #12]
 8000228:	60b9      	str	r1, [r7, #8]
 800022a:	0019      	movs	r1, r3
 800022c:	1dfb      	adds	r3, r7, #7
 800022e:	701a      	strb	r2, [r3, #0]
 8000230:	1dbb      	adds	r3, r7, #6
 8000232:	1c0a      	adds	r2, r1, #0
 8000234:	701a      	strb	r2, [r3, #0]
 8000236:	68fb      	ldr	r3, [r7, #12]
 8000238:	2200      	movs	r2, #0
 800023a:	711a      	strb	r2, [r3, #4]
 800023c:	68fb      	ldr	r3, [r7, #12]
 800023e:	2200      	movs	r2, #0
 8000240:	715a      	strb	r2, [r3, #5]
 8000242:	68fb      	ldr	r3, [r7, #12]
 8000244:	3308      	adds	r3, #8
 8000246:	0018      	movs	r0, r3
 8000248:	2300      	movs	r3, #0
 800024a:	2200      	movs	r2, #0
 800024c:	2100      	movs	r1, #0
 800024e:	f000 fcdd 	bl	8000c0c <_ZN6CTimerC1Embb>
	this->port = port;
 8000252:	68fb      	ldr	r3, [r7, #12]
 8000254:	68ba      	ldr	r2, [r7, #8]
 8000256:	601a      	str	r2, [r3, #0]
	this->pin = pin;
 8000258:	68fb      	ldr	r3, [r7, #12]
 800025a:	1dfa      	adds	r2, r7, #7
 800025c:	7812      	ldrb	r2, [r2, #0]
 800025e:	711a      	strb	r2, [r3, #4]
	this->prevSt = 0;
 8000260:	68fb      	ldr	r3, [r7, #12]
 8000262:	2200      	movs	r2, #0
 8000264:	715a      	strb	r2, [r3, #5]
	this->debounceTim.SetDefault(debounceTime);
 8000266:	68fb      	ldr	r3, [r7, #12]
 8000268:	3308      	adds	r3, #8
 800026a:	0018      	movs	r0, r3
 800026c:	1dbb      	adds	r3, r7, #6
 800026e:	781b      	ldrb	r3, [r3, #0]
 8000270:	2200      	movs	r2, #0
 8000272:	0019      	movs	r1, r3
 8000274:	f000 fd06 	bl	8000c84 <_ZN6CTimer10SetDefaultEmb>
	this->debounceTim.Off();
 8000278:	68fb      	ldr	r3, [r7, #12]
 800027a:	3308      	adds	r3, #8
 800027c:	0018      	movs	r0, r3
 800027e:	f000 fd31 	bl	8000ce4 <_ZN6CTimer3OffEv>
}
 8000282:	68fb      	ldr	r3, [r7, #12]
 8000284:	0018      	movs	r0, r3
 8000286:	46bd      	mov	sp, r7
 8000288:	b004      	add	sp, #16
 800028a:	bd80      	pop	{r7, pc}

0800028c <HAL_UART_TxCpltCallback>:
/* ������� ���������� �� ��������� �������� �� i2c */
void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c) {
	i2cLcdState = 0;
}
/* ������� ���������� �� ��������� �������� �� uart */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 800028c:	b580      	push	{r7, lr}
 800028e:	b082      	sub	sp, #8
 8000290:	af00      	add	r7, sp, #0
 8000292:	6078      	str	r0, [r7, #4]

}
 8000294:	46c0      	nop			; (mov r8, r8)
 8000296:	46bd      	mov	sp, r7
 8000298:	b002      	add	sp, #8
 800029a:	bd80      	pop	{r7, pc}

0800029c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b082      	sub	sp, #8
 80002a0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002a2:	f000 fd67 	bl	8000d74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002a6:	f000 f811 	bl	80002cc <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002aa:	f000 f999 	bl	80005e0 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 80002ae:	f000 f971 	bl	8000594 <_ZL11MX_DMA_Initv>
  MX_I2C1_Init();
 80002b2:	f000 f881 	bl	80003b8 <_ZL12MX_I2C1_Initv>
  MX_USART2_UART_Init();
 80002b6:	f000 f939 	bl	800052c <_ZL19MX_USART2_UART_Initv>
  MX_RTC_Init();
 80002ba:	f000 f8c9 	bl	8000450 <_ZL11MX_RTC_Initv>
  /* USER CODE BEGIN 2 */
	I2CSettings i2cSettings { &hi2c1, 0x4E };
 80002be:	003b      	movs	r3, r7
 80002c0:	4a01      	ldr	r2, [pc, #4]	; (80002c8 <main+0x2c>)
 80002c2:	ca03      	ldmia	r2!, {r0, r1}
 80002c4:	c303      	stmia	r3!, {r0, r1}
	*/
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002c6:	e7fe      	b.n	80002c6 <main+0x2a>
 80002c8:	080041ec 	.word	0x080041ec

080002cc <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002cc:	b590      	push	{r4, r7, lr}
 80002ce:	b095      	sub	sp, #84	; 0x54
 80002d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002d2:	2420      	movs	r4, #32
 80002d4:	193b      	adds	r3, r7, r4
 80002d6:	0018      	movs	r0, r3
 80002d8:	2330      	movs	r3, #48	; 0x30
 80002da:	001a      	movs	r2, r3
 80002dc:	2100      	movs	r1, #0
 80002de:	f003 ff4d 	bl	800417c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002e2:	2310      	movs	r3, #16
 80002e4:	18fb      	adds	r3, r7, r3
 80002e6:	0018      	movs	r0, r3
 80002e8:	2310      	movs	r3, #16
 80002ea:	001a      	movs	r2, r3
 80002ec:	2100      	movs	r1, #0
 80002ee:	f003 ff45 	bl	800417c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002f2:	003b      	movs	r3, r7
 80002f4:	0018      	movs	r0, r3
 80002f6:	2310      	movs	r3, #16
 80002f8:	001a      	movs	r2, r3
 80002fa:	2100      	movs	r1, #0
 80002fc:	f003 ff3e 	bl	800417c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000300:	0021      	movs	r1, r4
 8000302:	187b      	adds	r3, r7, r1
 8000304:	220a      	movs	r2, #10
 8000306:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000308:	187b      	adds	r3, r7, r1
 800030a:	2201      	movs	r2, #1
 800030c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800030e:	187b      	adds	r3, r7, r1
 8000310:	2210      	movs	r2, #16
 8000312:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000314:	187b      	adds	r3, r7, r1
 8000316:	2201      	movs	r2, #1
 8000318:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800031a:	187b      	adds	r3, r7, r1
 800031c:	2202      	movs	r2, #2
 800031e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000320:	187b      	adds	r3, r7, r1
 8000322:	2200      	movs	r2, #0
 8000324:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000326:	187b      	adds	r3, r7, r1
 8000328:	22a0      	movs	r2, #160	; 0xa0
 800032a:	0392      	lsls	r2, r2, #14
 800032c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800032e:	187b      	adds	r3, r7, r1
 8000330:	2200      	movs	r2, #0
 8000332:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000334:	187b      	adds	r3, r7, r1
 8000336:	0018      	movs	r0, r3
 8000338:	f002 f894 	bl	8002464 <HAL_RCC_OscConfig>
 800033c:	0003      	movs	r3, r0
 800033e:	1e5a      	subs	r2, r3, #1
 8000340:	4193      	sbcs	r3, r2
 8000342:	b2db      	uxtb	r3, r3
 8000344:	2b00      	cmp	r3, #0
 8000346:	d001      	beq.n	800034c <_Z18SystemClock_Configv+0x80>
  {
    Error_Handler();
 8000348:	f000 f9f0 	bl	800072c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800034c:	2110      	movs	r1, #16
 800034e:	187b      	adds	r3, r7, r1
 8000350:	2207      	movs	r2, #7
 8000352:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000354:	187b      	adds	r3, r7, r1
 8000356:	2202      	movs	r2, #2
 8000358:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800035a:	187b      	adds	r3, r7, r1
 800035c:	2200      	movs	r2, #0
 800035e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000360:	187b      	adds	r3, r7, r1
 8000362:	2200      	movs	r2, #0
 8000364:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000366:	187b      	adds	r3, r7, r1
 8000368:	2101      	movs	r1, #1
 800036a:	0018      	movs	r0, r3
 800036c:	f002 fb94 	bl	8002a98 <HAL_RCC_ClockConfig>
 8000370:	0003      	movs	r3, r0
 8000372:	1e5a      	subs	r2, r3, #1
 8000374:	4193      	sbcs	r3, r2
 8000376:	b2db      	uxtb	r3, r3
 8000378:	2b00      	cmp	r3, #0
 800037a:	d001      	beq.n	8000380 <_Z18SystemClock_Configv+0xb4>
  {
    Error_Handler();
 800037c:	f000 f9d6 	bl	800072c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC;
 8000380:	003b      	movs	r3, r7
 8000382:	4a0c      	ldr	r2, [pc, #48]	; (80003b4 <_Z18SystemClock_Configv+0xe8>)
 8000384:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000386:	003b      	movs	r3, r7
 8000388:	2200      	movs	r2, #0
 800038a:	60da      	str	r2, [r3, #12]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800038c:	003b      	movs	r3, r7
 800038e:	2280      	movs	r2, #128	; 0x80
 8000390:	0092      	lsls	r2, r2, #2
 8000392:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000394:	003b      	movs	r3, r7
 8000396:	0018      	movs	r0, r3
 8000398:	f002 fcc2 	bl	8002d20 <HAL_RCCEx_PeriphCLKConfig>
 800039c:	0003      	movs	r3, r0
 800039e:	1e5a      	subs	r2, r3, #1
 80003a0:	4193      	sbcs	r3, r2
 80003a2:	b2db      	uxtb	r3, r3
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d001      	beq.n	80003ac <_Z18SystemClock_Configv+0xe0>
  {
    Error_Handler();
 80003a8:	f000 f9c0 	bl	800072c <Error_Handler>
  }
}
 80003ac:	46c0      	nop			; (mov r8, r8)
 80003ae:	46bd      	mov	sp, r7
 80003b0:	b015      	add	sp, #84	; 0x54
 80003b2:	bd90      	pop	{r4, r7, pc}
 80003b4:	00010020 	.word	0x00010020

080003b8 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003bc:	4b21      	ldr	r3, [pc, #132]	; (8000444 <_ZL12MX_I2C1_Initv+0x8c>)
 80003be:	4a22      	ldr	r2, [pc, #136]	; (8000448 <_ZL12MX_I2C1_Initv+0x90>)
 80003c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80003c2:	4b20      	ldr	r3, [pc, #128]	; (8000444 <_ZL12MX_I2C1_Initv+0x8c>)
 80003c4:	4a21      	ldr	r2, [pc, #132]	; (800044c <_ZL12MX_I2C1_Initv+0x94>)
 80003c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80003c8:	4b1e      	ldr	r3, [pc, #120]	; (8000444 <_ZL12MX_I2C1_Initv+0x8c>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003ce:	4b1d      	ldr	r3, [pc, #116]	; (8000444 <_ZL12MX_I2C1_Initv+0x8c>)
 80003d0:	2201      	movs	r2, #1
 80003d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003d4:	4b1b      	ldr	r3, [pc, #108]	; (8000444 <_ZL12MX_I2C1_Initv+0x8c>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80003da:	4b1a      	ldr	r3, [pc, #104]	; (8000444 <_ZL12MX_I2C1_Initv+0x8c>)
 80003dc:	2200      	movs	r2, #0
 80003de:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80003e0:	4b18      	ldr	r3, [pc, #96]	; (8000444 <_ZL12MX_I2C1_Initv+0x8c>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003e6:	4b17      	ldr	r3, [pc, #92]	; (8000444 <_ZL12MX_I2C1_Initv+0x8c>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003ec:	4b15      	ldr	r3, [pc, #84]	; (8000444 <_ZL12MX_I2C1_Initv+0x8c>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003f2:	4b14      	ldr	r3, [pc, #80]	; (8000444 <_ZL12MX_I2C1_Initv+0x8c>)
 80003f4:	0018      	movs	r0, r3
 80003f6:	f001 f90b 	bl	8001610 <HAL_I2C_Init>
 80003fa:	0003      	movs	r3, r0
 80003fc:	1e5a      	subs	r2, r3, #1
 80003fe:	4193      	sbcs	r3, r2
 8000400:	b2db      	uxtb	r3, r3
 8000402:	2b00      	cmp	r3, #0
 8000404:	d001      	beq.n	800040a <_ZL12MX_I2C1_Initv+0x52>
  {
    Error_Handler();
 8000406:	f000 f991 	bl	800072c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800040a:	4b0e      	ldr	r3, [pc, #56]	; (8000444 <_ZL12MX_I2C1_Initv+0x8c>)
 800040c:	2100      	movs	r1, #0
 800040e:	0018      	movs	r0, r3
 8000410:	f001 ff90 	bl	8002334 <HAL_I2CEx_ConfigAnalogFilter>
 8000414:	0003      	movs	r3, r0
 8000416:	1e5a      	subs	r2, r3, #1
 8000418:	4193      	sbcs	r3, r2
 800041a:	b2db      	uxtb	r3, r3
 800041c:	2b00      	cmp	r3, #0
 800041e:	d001      	beq.n	8000424 <_ZL12MX_I2C1_Initv+0x6c>
  {
    Error_Handler();
 8000420:	f000 f984 	bl	800072c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000424:	4b07      	ldr	r3, [pc, #28]	; (8000444 <_ZL12MX_I2C1_Initv+0x8c>)
 8000426:	2100      	movs	r1, #0
 8000428:	0018      	movs	r0, r3
 800042a:	f001 ffcf 	bl	80023cc <HAL_I2CEx_ConfigDigitalFilter>
 800042e:	0003      	movs	r3, r0
 8000430:	1e5a      	subs	r2, r3, #1
 8000432:	4193      	sbcs	r3, r2
 8000434:	b2db      	uxtb	r3, r3
 8000436:	2b00      	cmp	r3, #0
 8000438:	d001      	beq.n	800043e <_ZL12MX_I2C1_Initv+0x86>
  {
    Error_Handler();
 800043a:	f000 f977 	bl	800072c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800043e:	46c0      	nop			; (mov r8, r8)
 8000440:	46bd      	mov	sp, r7
 8000442:	bd80      	pop	{r7, pc}
 8000444:	20000028 	.word	0x20000028
 8000448:	40005400 	.word	0x40005400
 800044c:	2000090e 	.word	0x2000090e

08000450 <_ZL11MX_RTC_Initv>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b086      	sub	sp, #24
 8000454:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000456:	1d3b      	adds	r3, r7, #4
 8000458:	0018      	movs	r0, r3
 800045a:	2314      	movs	r3, #20
 800045c:	001a      	movs	r2, r3
 800045e:	2100      	movs	r1, #0
 8000460:	f003 fe8c 	bl	800417c <memset>
  RTC_DateTypeDef sDate = {0};
 8000464:	003b      	movs	r3, r7
 8000466:	2200      	movs	r2, #0
 8000468:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800046a:	4b2e      	ldr	r3, [pc, #184]	; (8000524 <_ZL11MX_RTC_Initv+0xd4>)
 800046c:	4a2e      	ldr	r2, [pc, #184]	; (8000528 <_ZL11MX_RTC_Initv+0xd8>)
 800046e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000470:	4b2c      	ldr	r3, [pc, #176]	; (8000524 <_ZL11MX_RTC_Initv+0xd4>)
 8000472:	2200      	movs	r2, #0
 8000474:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000476:	4b2b      	ldr	r3, [pc, #172]	; (8000524 <_ZL11MX_RTC_Initv+0xd4>)
 8000478:	227f      	movs	r2, #127	; 0x7f
 800047a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 311;
 800047c:	4b29      	ldr	r3, [pc, #164]	; (8000524 <_ZL11MX_RTC_Initv+0xd4>)
 800047e:	2238      	movs	r2, #56	; 0x38
 8000480:	32ff      	adds	r2, #255	; 0xff
 8000482:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000484:	4b27      	ldr	r3, [pc, #156]	; (8000524 <_ZL11MX_RTC_Initv+0xd4>)
 8000486:	2200      	movs	r2, #0
 8000488:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800048a:	4b26      	ldr	r3, [pc, #152]	; (8000524 <_ZL11MX_RTC_Initv+0xd4>)
 800048c:	2200      	movs	r2, #0
 800048e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000490:	4b24      	ldr	r3, [pc, #144]	; (8000524 <_ZL11MX_RTC_Initv+0xd4>)
 8000492:	2200      	movs	r2, #0
 8000494:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000496:	4b23      	ldr	r3, [pc, #140]	; (8000524 <_ZL11MX_RTC_Initv+0xd4>)
 8000498:	0018      	movs	r0, r3
 800049a:	f002 fd0f 	bl	8002ebc <HAL_RTC_Init>
 800049e:	0003      	movs	r3, r0
 80004a0:	1e5a      	subs	r2, r3, #1
 80004a2:	4193      	sbcs	r3, r2
 80004a4:	b2db      	uxtb	r3, r3
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d001      	beq.n	80004ae <_ZL11MX_RTC_Initv+0x5e>
  {
    Error_Handler();
 80004aa:	f000 f93f 	bl	800072c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x16;
 80004ae:	1d3b      	adds	r3, r7, #4
 80004b0:	2216      	movs	r2, #22
 80004b2:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x10;
 80004b4:	1d3b      	adds	r3, r7, #4
 80004b6:	2210      	movs	r2, #16
 80004b8:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 80004ba:	1d3b      	adds	r3, r7, #4
 80004bc:	2200      	movs	r2, #0
 80004be:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80004c0:	1d3b      	adds	r3, r7, #4
 80004c2:	2200      	movs	r2, #0
 80004c4:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80004c6:	1d3b      	adds	r3, r7, #4
 80004c8:	2200      	movs	r2, #0
 80004ca:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80004cc:	1d39      	adds	r1, r7, #4
 80004ce:	4b15      	ldr	r3, [pc, #84]	; (8000524 <_ZL11MX_RTC_Initv+0xd4>)
 80004d0:	2201      	movs	r2, #1
 80004d2:	0018      	movs	r0, r3
 80004d4:	f002 fd8a 	bl	8002fec <HAL_RTC_SetTime>
 80004d8:	0003      	movs	r3, r0
 80004da:	1e5a      	subs	r2, r3, #1
 80004dc:	4193      	sbcs	r3, r2
 80004de:	b2db      	uxtb	r3, r3
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d001      	beq.n	80004e8 <_ZL11MX_RTC_Initv+0x98>
  {
    Error_Handler();
 80004e4:	f000 f922 	bl	800072c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_THURSDAY;
 80004e8:	003b      	movs	r3, r7
 80004ea:	2204      	movs	r2, #4
 80004ec:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_MARCH;
 80004ee:	003b      	movs	r3, r7
 80004f0:	2203      	movs	r2, #3
 80004f2:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x30;
 80004f4:	003b      	movs	r3, r7
 80004f6:	2230      	movs	r2, #48	; 0x30
 80004f8:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x23;
 80004fa:	003b      	movs	r3, r7
 80004fc:	2223      	movs	r2, #35	; 0x23
 80004fe:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000500:	0039      	movs	r1, r7
 8000502:	4b08      	ldr	r3, [pc, #32]	; (8000524 <_ZL11MX_RTC_Initv+0xd4>)
 8000504:	2201      	movs	r2, #1
 8000506:	0018      	movs	r0, r3
 8000508:	f002 fe16 	bl	8003138 <HAL_RTC_SetDate>
 800050c:	0003      	movs	r3, r0
 800050e:	1e5a      	subs	r2, r3, #1
 8000510:	4193      	sbcs	r3, r2
 8000512:	b2db      	uxtb	r3, r3
 8000514:	2b00      	cmp	r3, #0
 8000516:	d001      	beq.n	800051c <_ZL11MX_RTC_Initv+0xcc>
  {
    Error_Handler();
 8000518:	f000 f908 	bl	800072c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800051c:	46c0      	nop			; (mov r8, r8)
 800051e:	46bd      	mov	sp, r7
 8000520:	b006      	add	sp, #24
 8000522:	bd80      	pop	{r7, pc}
 8000524:	20000104 	.word	0x20000104
 8000528:	40002800 	.word	0x40002800

0800052c <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000530:	4b16      	ldr	r3, [pc, #88]	; (800058c <_ZL19MX_USART2_UART_Initv+0x60>)
 8000532:	4a17      	ldr	r2, [pc, #92]	; (8000590 <_ZL19MX_USART2_UART_Initv+0x64>)
 8000534:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000536:	4b15      	ldr	r3, [pc, #84]	; (800058c <_ZL19MX_USART2_UART_Initv+0x60>)
 8000538:	2296      	movs	r2, #150	; 0x96
 800053a:	0212      	lsls	r2, r2, #8
 800053c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800053e:	4b13      	ldr	r3, [pc, #76]	; (800058c <_ZL19MX_USART2_UART_Initv+0x60>)
 8000540:	2200      	movs	r2, #0
 8000542:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000544:	4b11      	ldr	r3, [pc, #68]	; (800058c <_ZL19MX_USART2_UART_Initv+0x60>)
 8000546:	2200      	movs	r2, #0
 8000548:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800054a:	4b10      	ldr	r3, [pc, #64]	; (800058c <_ZL19MX_USART2_UART_Initv+0x60>)
 800054c:	2200      	movs	r2, #0
 800054e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000550:	4b0e      	ldr	r3, [pc, #56]	; (800058c <_ZL19MX_USART2_UART_Initv+0x60>)
 8000552:	220c      	movs	r2, #12
 8000554:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000556:	4b0d      	ldr	r3, [pc, #52]	; (800058c <_ZL19MX_USART2_UART_Initv+0x60>)
 8000558:	2200      	movs	r2, #0
 800055a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800055c:	4b0b      	ldr	r3, [pc, #44]	; (800058c <_ZL19MX_USART2_UART_Initv+0x60>)
 800055e:	2200      	movs	r2, #0
 8000560:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000562:	4b0a      	ldr	r3, [pc, #40]	; (800058c <_ZL19MX_USART2_UART_Initv+0x60>)
 8000564:	2200      	movs	r2, #0
 8000566:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000568:	4b08      	ldr	r3, [pc, #32]	; (800058c <_ZL19MX_USART2_UART_Initv+0x60>)
 800056a:	2200      	movs	r2, #0
 800056c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800056e:	4b07      	ldr	r3, [pc, #28]	; (800058c <_ZL19MX_USART2_UART_Initv+0x60>)
 8000570:	0018      	movs	r0, r3
 8000572:	f002 ff27 	bl	80033c4 <HAL_UART_Init>
 8000576:	0003      	movs	r3, r0
 8000578:	1e5a      	subs	r2, r3, #1
 800057a:	4193      	sbcs	r3, r2
 800057c:	b2db      	uxtb	r3, r3
 800057e:	2b00      	cmp	r3, #0
 8000580:	d001      	beq.n	8000586 <_ZL19MX_USART2_UART_Initv+0x5a>
  {
    Error_Handler();
 8000582:	f000 f8d3 	bl	800072c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000586:	46c0      	nop			; (mov r8, r8)
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	20000124 	.word	0x20000124
 8000590:	40004400 	.word	0x40004400

08000594 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800059a:	4b10      	ldr	r3, [pc, #64]	; (80005dc <_ZL11MX_DMA_Initv+0x48>)
 800059c:	695a      	ldr	r2, [r3, #20]
 800059e:	4b0f      	ldr	r3, [pc, #60]	; (80005dc <_ZL11MX_DMA_Initv+0x48>)
 80005a0:	2101      	movs	r1, #1
 80005a2:	430a      	orrs	r2, r1
 80005a4:	615a      	str	r2, [r3, #20]
 80005a6:	4b0d      	ldr	r3, [pc, #52]	; (80005dc <_ZL11MX_DMA_Initv+0x48>)
 80005a8:	695b      	ldr	r3, [r3, #20]
 80005aa:	2201      	movs	r2, #1
 80005ac:	4013      	ands	r3, r2
 80005ae:	607b      	str	r3, [r7, #4]
 80005b0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80005b2:	2200      	movs	r2, #0
 80005b4:	2100      	movs	r1, #0
 80005b6:	200a      	movs	r0, #10
 80005b8:	f000 fcda 	bl	8000f70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80005bc:	200a      	movs	r0, #10
 80005be:	f000 fcec 	bl	8000f9a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 80005c2:	2200      	movs	r2, #0
 80005c4:	2100      	movs	r1, #0
 80005c6:	200b      	movs	r0, #11
 80005c8:	f000 fcd2 	bl	8000f70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 80005cc:	200b      	movs	r0, #11
 80005ce:	f000 fce4 	bl	8000f9a <HAL_NVIC_EnableIRQ>

}
 80005d2:	46c0      	nop			; (mov r8, r8)
 80005d4:	46bd      	mov	sp, r7
 80005d6:	b002      	add	sp, #8
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	46c0      	nop			; (mov r8, r8)
 80005dc:	40021000 	.word	0x40021000

080005e0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005e0:	b590      	push	{r4, r7, lr}
 80005e2:	b089      	sub	sp, #36	; 0x24
 80005e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e6:	240c      	movs	r4, #12
 80005e8:	193b      	adds	r3, r7, r4
 80005ea:	0018      	movs	r0, r3
 80005ec:	2314      	movs	r3, #20
 80005ee:	001a      	movs	r2, r3
 80005f0:	2100      	movs	r1, #0
 80005f2:	f003 fdc3 	bl	800417c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f6:	4b49      	ldr	r3, [pc, #292]	; (800071c <_ZL12MX_GPIO_Initv+0x13c>)
 80005f8:	695a      	ldr	r2, [r3, #20]
 80005fa:	4b48      	ldr	r3, [pc, #288]	; (800071c <_ZL12MX_GPIO_Initv+0x13c>)
 80005fc:	2180      	movs	r1, #128	; 0x80
 80005fe:	0289      	lsls	r1, r1, #10
 8000600:	430a      	orrs	r2, r1
 8000602:	615a      	str	r2, [r3, #20]
 8000604:	4b45      	ldr	r3, [pc, #276]	; (800071c <_ZL12MX_GPIO_Initv+0x13c>)
 8000606:	695a      	ldr	r2, [r3, #20]
 8000608:	2380      	movs	r3, #128	; 0x80
 800060a:	029b      	lsls	r3, r3, #10
 800060c:	4013      	ands	r3, r2
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000612:	4b42      	ldr	r3, [pc, #264]	; (800071c <_ZL12MX_GPIO_Initv+0x13c>)
 8000614:	695a      	ldr	r2, [r3, #20]
 8000616:	4b41      	ldr	r3, [pc, #260]	; (800071c <_ZL12MX_GPIO_Initv+0x13c>)
 8000618:	2180      	movs	r1, #128	; 0x80
 800061a:	02c9      	lsls	r1, r1, #11
 800061c:	430a      	orrs	r2, r1
 800061e:	615a      	str	r2, [r3, #20]
 8000620:	4b3e      	ldr	r3, [pc, #248]	; (800071c <_ZL12MX_GPIO_Initv+0x13c>)
 8000622:	695a      	ldr	r2, [r3, #20]
 8000624:	2380      	movs	r3, #128	; 0x80
 8000626:	02db      	lsls	r3, r3, #11
 8000628:	4013      	ands	r3, r2
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800062e:	4b3b      	ldr	r3, [pc, #236]	; (800071c <_ZL12MX_GPIO_Initv+0x13c>)
 8000630:	695a      	ldr	r2, [r3, #20]
 8000632:	4b3a      	ldr	r3, [pc, #232]	; (800071c <_ZL12MX_GPIO_Initv+0x13c>)
 8000634:	2180      	movs	r1, #128	; 0x80
 8000636:	0309      	lsls	r1, r1, #12
 8000638:	430a      	orrs	r2, r1
 800063a:	615a      	str	r2, [r3, #20]
 800063c:	4b37      	ldr	r3, [pc, #220]	; (800071c <_ZL12MX_GPIO_Initv+0x13c>)
 800063e:	695a      	ldr	r2, [r3, #20]
 8000640:	2380      	movs	r3, #128	; 0x80
 8000642:	031b      	lsls	r3, r3, #12
 8000644:	4013      	ands	r3, r2
 8000646:	603b      	str	r3, [r7, #0]
 8000648:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800064a:	23f0      	movs	r3, #240	; 0xf0
 800064c:	021b      	lsls	r3, r3, #8
 800064e:	4834      	ldr	r0, [pc, #208]	; (8000720 <_ZL12MX_GPIO_Initv+0x140>)
 8000650:	2200      	movs	r2, #0
 8000652:	0019      	movs	r1, r3
 8000654:	f000 ffbe 	bl	80015d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000658:	23f0      	movs	r3, #240	; 0xf0
 800065a:	009b      	lsls	r3, r3, #2
 800065c:	4831      	ldr	r0, [pc, #196]	; (8000724 <_ZL12MX_GPIO_Initv+0x144>)
 800065e:	2200      	movs	r2, #0
 8000660:	0019      	movs	r1, r3
 8000662:	f000 ffb7 	bl	80015d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8000666:	23d8      	movs	r3, #216	; 0xd8
 8000668:	0159      	lsls	r1, r3, #5
 800066a:	2390      	movs	r3, #144	; 0x90
 800066c:	05db      	lsls	r3, r3, #23
 800066e:	2200      	movs	r2, #0
 8000670:	0018      	movs	r0, r3
 8000672:	f000 ffaf 	bl	80015d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA4 PA5 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_10;
 8000676:	193b      	adds	r3, r7, r4
 8000678:	4a2b      	ldr	r2, [pc, #172]	; (8000728 <_ZL12MX_GPIO_Initv+0x148>)
 800067a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800067c:	193b      	adds	r3, r7, r4
 800067e:	2200      	movs	r2, #0
 8000680:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000682:	193b      	adds	r3, r7, r4
 8000684:	2202      	movs	r2, #2
 8000686:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000688:	193a      	adds	r2, r7, r4
 800068a:	2390      	movs	r3, #144	; 0x90
 800068c:	05db      	lsls	r3, r3, #23
 800068e:	0011      	movs	r1, r2
 8000690:	0018      	movs	r0, r3
 8000692:	f000 fe2f 	bl	80012f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000696:	0021      	movs	r1, r4
 8000698:	187b      	adds	r3, r7, r1
 800069a:	22f0      	movs	r2, #240	; 0xf0
 800069c:	0212      	lsls	r2, r2, #8
 800069e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a0:	000c      	movs	r4, r1
 80006a2:	193b      	adds	r3, r7, r4
 80006a4:	2201      	movs	r2, #1
 80006a6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a8:	193b      	adds	r3, r7, r4
 80006aa:	2200      	movs	r2, #0
 80006ac:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ae:	193b      	adds	r3, r7, r4
 80006b0:	2200      	movs	r2, #0
 80006b2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006b4:	193b      	adds	r3, r7, r4
 80006b6:	4a1a      	ldr	r2, [pc, #104]	; (8000720 <_ZL12MX_GPIO_Initv+0x140>)
 80006b8:	0019      	movs	r1, r3
 80006ba:	0010      	movs	r0, r2
 80006bc:	f000 fe1a 	bl	80012f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80006c0:	0021      	movs	r1, r4
 80006c2:	187b      	adds	r3, r7, r1
 80006c4:	22f0      	movs	r2, #240	; 0xf0
 80006c6:	0092      	lsls	r2, r2, #2
 80006c8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ca:	000c      	movs	r4, r1
 80006cc:	193b      	adds	r3, r7, r4
 80006ce:	2201      	movs	r2, #1
 80006d0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d2:	193b      	adds	r3, r7, r4
 80006d4:	2200      	movs	r2, #0
 80006d6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d8:	193b      	adds	r3, r7, r4
 80006da:	2200      	movs	r2, #0
 80006dc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006de:	193b      	adds	r3, r7, r4
 80006e0:	4a10      	ldr	r2, [pc, #64]	; (8000724 <_ZL12MX_GPIO_Initv+0x144>)
 80006e2:	0019      	movs	r1, r3
 80006e4:	0010      	movs	r0, r2
 80006e6:	f000 fe05 	bl	80012f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_12;
 80006ea:	0021      	movs	r1, r4
 80006ec:	187b      	adds	r3, r7, r1
 80006ee:	22d8      	movs	r2, #216	; 0xd8
 80006f0:	0152      	lsls	r2, r2, #5
 80006f2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f4:	187b      	adds	r3, r7, r1
 80006f6:	2201      	movs	r2, #1
 80006f8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fa:	187b      	adds	r3, r7, r1
 80006fc:	2200      	movs	r2, #0
 80006fe:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000700:	187b      	adds	r3, r7, r1
 8000702:	2200      	movs	r2, #0
 8000704:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000706:	187a      	adds	r2, r7, r1
 8000708:	2390      	movs	r3, #144	; 0x90
 800070a:	05db      	lsls	r3, r3, #23
 800070c:	0011      	movs	r1, r2
 800070e:	0018      	movs	r0, r3
 8000710:	f000 fdf0 	bl	80012f4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000714:	46c0      	nop			; (mov r8, r8)
 8000716:	46bd      	mov	sp, r7
 8000718:	b009      	add	sp, #36	; 0x24
 800071a:	bd90      	pop	{r4, r7, pc}
 800071c:	40021000 	.word	0x40021000
 8000720:	48000400 	.word	0x48000400
 8000724:	48000800 	.word	0x48000800
 8000728:	00000431 	.word	0x00000431

0800072c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000730:	b672      	cpsid	i
}
 8000732:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000734:	e7fe      	b.n	8000734 <Error_Handler+0x8>

08000736 <_ZN6ButtonD1Ev>:
#define INC_BUTTON_H_

#include <main.h>
#include <timer.h>

class Button {
 8000736:	b580      	push	{r7, lr}
 8000738:	b082      	sub	sp, #8
 800073a:	af00      	add	r7, sp, #0
 800073c:	6078      	str	r0, [r7, #4]
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	3308      	adds	r3, #8
 8000742:	0018      	movs	r0, r3
 8000744:	f000 fa8e 	bl	8000c64 <_ZN6CTimerD1Ev>
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	0018      	movs	r0, r3
 800074c:	46bd      	mov	sp, r7
 800074e:	b002      	add	sp, #8
 8000750:	bd80      	pop	{r7, pc}
	...

08000754 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
 800075c:	6039      	str	r1, [r7, #0]
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	2b01      	cmp	r3, #1
 8000762:	d11f      	bne.n	80007a4 <_Z41__static_initialization_and_destruction_0ii+0x50>
 8000764:	683b      	ldr	r3, [r7, #0]
 8000766:	4a1d      	ldr	r2, [pc, #116]	; (80007dc <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8000768:	4293      	cmp	r3, r2
 800076a:	d11b      	bne.n	80007a4 <_Z41__static_initialization_and_destruction_0ii+0x50>
Button downButton(GPIOA, 10, 5);
 800076c:	2390      	movs	r3, #144	; 0x90
 800076e:	05d9      	lsls	r1, r3, #23
 8000770:	481b      	ldr	r0, [pc, #108]	; (80007e0 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8000772:	2305      	movs	r3, #5
 8000774:	220a      	movs	r2, #10
 8000776:	f7ff fd53 	bl	8000220 <_ZN6ButtonC1EP12GPIO_TypeDefhh>
Button upButton(GPIOA, 4, 5);
 800077a:	2390      	movs	r3, #144	; 0x90
 800077c:	05d9      	lsls	r1, r3, #23
 800077e:	4819      	ldr	r0, [pc, #100]	; (80007e4 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8000780:	2305      	movs	r3, #5
 8000782:	2204      	movs	r2, #4
 8000784:	f7ff fd4c 	bl	8000220 <_ZN6ButtonC1EP12GPIO_TypeDefhh>
Button enterButton(GPIOA, 5, 5);
 8000788:	2390      	movs	r3, #144	; 0x90
 800078a:	05d9      	lsls	r1, r3, #23
 800078c:	4816      	ldr	r0, [pc, #88]	; (80007e8 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 800078e:	2305      	movs	r3, #5
 8000790:	2205      	movs	r2, #5
 8000792:	f7ff fd45 	bl	8000220 <_ZN6ButtonC1EP12GPIO_TypeDefhh>
Button backButton(GPIOA, 0, 5);
 8000796:	2390      	movs	r3, #144	; 0x90
 8000798:	05d9      	lsls	r1, r3, #23
 800079a:	4814      	ldr	r0, [pc, #80]	; (80007ec <_Z41__static_initialization_and_destruction_0ii+0x98>)
 800079c:	2305      	movs	r3, #5
 800079e:	2200      	movs	r2, #0
 80007a0:	f7ff fd3e 	bl	8000220 <_ZN6ButtonC1EP12GPIO_TypeDefhh>
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d113      	bne.n	80007d2 <_Z41__static_initialization_and_destruction_0ii+0x7e>
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	4a0b      	ldr	r2, [pc, #44]	; (80007dc <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80007ae:	4293      	cmp	r3, r2
 80007b0:	d10f      	bne.n	80007d2 <_Z41__static_initialization_and_destruction_0ii+0x7e>
 80007b2:	4b0e      	ldr	r3, [pc, #56]	; (80007ec <_Z41__static_initialization_and_destruction_0ii+0x98>)
 80007b4:	0018      	movs	r0, r3
 80007b6:	f7ff ffbe 	bl	8000736 <_ZN6ButtonD1Ev>
Button enterButton(GPIOA, 5, 5);
 80007ba:	4b0b      	ldr	r3, [pc, #44]	; (80007e8 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 80007bc:	0018      	movs	r0, r3
 80007be:	f7ff ffba 	bl	8000736 <_ZN6ButtonD1Ev>
Button upButton(GPIOA, 4, 5);
 80007c2:	4b08      	ldr	r3, [pc, #32]	; (80007e4 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 80007c4:	0018      	movs	r0, r3
 80007c6:	f7ff ffb6 	bl	8000736 <_ZN6ButtonD1Ev>
Button downButton(GPIOA, 10, 5);
 80007ca:	4b05      	ldr	r3, [pc, #20]	; (80007e0 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80007cc:	0018      	movs	r0, r3
 80007ce:	f7ff ffb2 	bl	8000736 <_ZN6ButtonD1Ev>
}
 80007d2:	46c0      	nop			; (mov r8, r8)
 80007d4:	46bd      	mov	sp, r7
 80007d6:	b002      	add	sp, #8
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	46c0      	nop			; (mov r8, r8)
 80007dc:	0000ffff 	.word	0x0000ffff
 80007e0:	20000234 	.word	0x20000234
 80007e4:	2000024c 	.word	0x2000024c
 80007e8:	20000264 	.word	0x20000264
 80007ec:	2000027c 	.word	0x2000027c

080007f0 <_GLOBAL__sub_I_hi2c1>:
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
 80007f4:	4b03      	ldr	r3, [pc, #12]	; (8000804 <_GLOBAL__sub_I_hi2c1+0x14>)
 80007f6:	0019      	movs	r1, r3
 80007f8:	2001      	movs	r0, #1
 80007fa:	f7ff ffab 	bl	8000754 <_Z41__static_initialization_and_destruction_0ii>
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	46c0      	nop			; (mov r8, r8)
 8000804:	0000ffff 	.word	0x0000ffff

08000808 <_GLOBAL__sub_D_hi2c1>:
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
 800080c:	4b03      	ldr	r3, [pc, #12]	; (800081c <_GLOBAL__sub_D_hi2c1+0x14>)
 800080e:	0019      	movs	r1, r3
 8000810:	2000      	movs	r0, #0
 8000812:	f7ff ff9f 	bl	8000754 <_Z41__static_initialization_and_destruction_0ii>
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	46c0      	nop			; (mov r8, r8)
 800081c:	0000ffff 	.word	0x0000ffff

08000820 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000826:	4b0f      	ldr	r3, [pc, #60]	; (8000864 <HAL_MspInit+0x44>)
 8000828:	699a      	ldr	r2, [r3, #24]
 800082a:	4b0e      	ldr	r3, [pc, #56]	; (8000864 <HAL_MspInit+0x44>)
 800082c:	2101      	movs	r1, #1
 800082e:	430a      	orrs	r2, r1
 8000830:	619a      	str	r2, [r3, #24]
 8000832:	4b0c      	ldr	r3, [pc, #48]	; (8000864 <HAL_MspInit+0x44>)
 8000834:	699b      	ldr	r3, [r3, #24]
 8000836:	2201      	movs	r2, #1
 8000838:	4013      	ands	r3, r2
 800083a:	607b      	str	r3, [r7, #4]
 800083c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800083e:	4b09      	ldr	r3, [pc, #36]	; (8000864 <HAL_MspInit+0x44>)
 8000840:	69da      	ldr	r2, [r3, #28]
 8000842:	4b08      	ldr	r3, [pc, #32]	; (8000864 <HAL_MspInit+0x44>)
 8000844:	2180      	movs	r1, #128	; 0x80
 8000846:	0549      	lsls	r1, r1, #21
 8000848:	430a      	orrs	r2, r1
 800084a:	61da      	str	r2, [r3, #28]
 800084c:	4b05      	ldr	r3, [pc, #20]	; (8000864 <HAL_MspInit+0x44>)
 800084e:	69da      	ldr	r2, [r3, #28]
 8000850:	2380      	movs	r3, #128	; 0x80
 8000852:	055b      	lsls	r3, r3, #21
 8000854:	4013      	ands	r3, r2
 8000856:	603b      	str	r3, [r7, #0]
 8000858:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800085a:	46c0      	nop			; (mov r8, r8)
 800085c:	46bd      	mov	sp, r7
 800085e:	b002      	add	sp, #8
 8000860:	bd80      	pop	{r7, pc}
 8000862:	46c0      	nop			; (mov r8, r8)
 8000864:	40021000 	.word	0x40021000

08000868 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000868:	b590      	push	{r4, r7, lr}
 800086a:	b08b      	sub	sp, #44	; 0x2c
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000870:	2414      	movs	r4, #20
 8000872:	193b      	adds	r3, r7, r4
 8000874:	0018      	movs	r0, r3
 8000876:	2314      	movs	r3, #20
 8000878:	001a      	movs	r2, r3
 800087a:	2100      	movs	r1, #0
 800087c:	f003 fc7e 	bl	800417c <memset>
  if(hi2c->Instance==I2C1)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a46      	ldr	r2, [pc, #280]	; (80009a0 <HAL_I2C_MspInit+0x138>)
 8000886:	4293      	cmp	r3, r2
 8000888:	d000      	beq.n	800088c <HAL_I2C_MspInit+0x24>
 800088a:	e085      	b.n	8000998 <HAL_I2C_MspInit+0x130>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800088c:	4b45      	ldr	r3, [pc, #276]	; (80009a4 <HAL_I2C_MspInit+0x13c>)
 800088e:	695a      	ldr	r2, [r3, #20]
 8000890:	4b44      	ldr	r3, [pc, #272]	; (80009a4 <HAL_I2C_MspInit+0x13c>)
 8000892:	2180      	movs	r1, #128	; 0x80
 8000894:	02c9      	lsls	r1, r1, #11
 8000896:	430a      	orrs	r2, r1
 8000898:	615a      	str	r2, [r3, #20]
 800089a:	4b42      	ldr	r3, [pc, #264]	; (80009a4 <HAL_I2C_MspInit+0x13c>)
 800089c:	695a      	ldr	r2, [r3, #20]
 800089e:	2380      	movs	r3, #128	; 0x80
 80008a0:	02db      	lsls	r3, r3, #11
 80008a2:	4013      	ands	r3, r2
 80008a4:	613b      	str	r3, [r7, #16]
 80008a6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80008a8:	0021      	movs	r1, r4
 80008aa:	187b      	adds	r3, r7, r1
 80008ac:	22c0      	movs	r2, #192	; 0xc0
 80008ae:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008b0:	187b      	adds	r3, r7, r1
 80008b2:	2212      	movs	r2, #18
 80008b4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	187b      	adds	r3, r7, r1
 80008b8:	2200      	movs	r2, #0
 80008ba:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008bc:	187b      	adds	r3, r7, r1
 80008be:	2203      	movs	r2, #3
 80008c0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80008c2:	187b      	adds	r3, r7, r1
 80008c4:	2201      	movs	r2, #1
 80008c6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008c8:	187b      	adds	r3, r7, r1
 80008ca:	4a37      	ldr	r2, [pc, #220]	; (80009a8 <HAL_I2C_MspInit+0x140>)
 80008cc:	0019      	movs	r1, r3
 80008ce:	0010      	movs	r0, r2
 80008d0:	f000 fd10 	bl	80012f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008d4:	4b33      	ldr	r3, [pc, #204]	; (80009a4 <HAL_I2C_MspInit+0x13c>)
 80008d6:	69da      	ldr	r2, [r3, #28]
 80008d8:	4b32      	ldr	r3, [pc, #200]	; (80009a4 <HAL_I2C_MspInit+0x13c>)
 80008da:	2180      	movs	r1, #128	; 0x80
 80008dc:	0389      	lsls	r1, r1, #14
 80008de:	430a      	orrs	r2, r1
 80008e0:	61da      	str	r2, [r3, #28]
 80008e2:	4b30      	ldr	r3, [pc, #192]	; (80009a4 <HAL_I2C_MspInit+0x13c>)
 80008e4:	69da      	ldr	r2, [r3, #28]
 80008e6:	2380      	movs	r3, #128	; 0x80
 80008e8:	039b      	lsls	r3, r3, #14
 80008ea:	4013      	ands	r3, r2
 80008ec:	60fb      	str	r3, [r7, #12]
 80008ee:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 80008f0:	4b2e      	ldr	r3, [pc, #184]	; (80009ac <HAL_I2C_MspInit+0x144>)
 80008f2:	4a2f      	ldr	r2, [pc, #188]	; (80009b0 <HAL_I2C_MspInit+0x148>)
 80008f4:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008f6:	4b2d      	ldr	r3, [pc, #180]	; (80009ac <HAL_I2C_MspInit+0x144>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008fc:	4b2b      	ldr	r3, [pc, #172]	; (80009ac <HAL_I2C_MspInit+0x144>)
 80008fe:	2200      	movs	r2, #0
 8000900:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000902:	4b2a      	ldr	r3, [pc, #168]	; (80009ac <HAL_I2C_MspInit+0x144>)
 8000904:	2280      	movs	r2, #128	; 0x80
 8000906:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000908:	4b28      	ldr	r3, [pc, #160]	; (80009ac <HAL_I2C_MspInit+0x144>)
 800090a:	2200      	movs	r2, #0
 800090c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800090e:	4b27      	ldr	r3, [pc, #156]	; (80009ac <HAL_I2C_MspInit+0x144>)
 8000910:	2200      	movs	r2, #0
 8000912:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000914:	4b25      	ldr	r3, [pc, #148]	; (80009ac <HAL_I2C_MspInit+0x144>)
 8000916:	2200      	movs	r2, #0
 8000918:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800091a:	4b24      	ldr	r3, [pc, #144]	; (80009ac <HAL_I2C_MspInit+0x144>)
 800091c:	2200      	movs	r2, #0
 800091e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000920:	4b22      	ldr	r3, [pc, #136]	; (80009ac <HAL_I2C_MspInit+0x144>)
 8000922:	0018      	movs	r0, r3
 8000924:	f000 fb56 	bl	8000fd4 <HAL_DMA_Init>
 8000928:	1e03      	subs	r3, r0, #0
 800092a:	d001      	beq.n	8000930 <HAL_I2C_MspInit+0xc8>
    {
      Error_Handler();
 800092c:	f7ff fefe 	bl	800072c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	4a1e      	ldr	r2, [pc, #120]	; (80009ac <HAL_I2C_MspInit+0x144>)
 8000934:	63da      	str	r2, [r3, #60]	; 0x3c
 8000936:	4b1d      	ldr	r3, [pc, #116]	; (80009ac <HAL_I2C_MspInit+0x144>)
 8000938:	687a      	ldr	r2, [r7, #4]
 800093a:	625a      	str	r2, [r3, #36]	; 0x24

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 800093c:	4b1d      	ldr	r3, [pc, #116]	; (80009b4 <HAL_I2C_MspInit+0x14c>)
 800093e:	4a1e      	ldr	r2, [pc, #120]	; (80009b8 <HAL_I2C_MspInit+0x150>)
 8000940:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000942:	4b1c      	ldr	r3, [pc, #112]	; (80009b4 <HAL_I2C_MspInit+0x14c>)
 8000944:	2210      	movs	r2, #16
 8000946:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000948:	4b1a      	ldr	r3, [pc, #104]	; (80009b4 <HAL_I2C_MspInit+0x14c>)
 800094a:	2200      	movs	r2, #0
 800094c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800094e:	4b19      	ldr	r3, [pc, #100]	; (80009b4 <HAL_I2C_MspInit+0x14c>)
 8000950:	2280      	movs	r2, #128	; 0x80
 8000952:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000954:	4b17      	ldr	r3, [pc, #92]	; (80009b4 <HAL_I2C_MspInit+0x14c>)
 8000956:	2200      	movs	r2, #0
 8000958:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800095a:	4b16      	ldr	r3, [pc, #88]	; (80009b4 <HAL_I2C_MspInit+0x14c>)
 800095c:	2200      	movs	r2, #0
 800095e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000960:	4b14      	ldr	r3, [pc, #80]	; (80009b4 <HAL_I2C_MspInit+0x14c>)
 8000962:	2200      	movs	r2, #0
 8000964:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000966:	4b13      	ldr	r3, [pc, #76]	; (80009b4 <HAL_I2C_MspInit+0x14c>)
 8000968:	2200      	movs	r2, #0
 800096a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800096c:	4b11      	ldr	r3, [pc, #68]	; (80009b4 <HAL_I2C_MspInit+0x14c>)
 800096e:	0018      	movs	r0, r3
 8000970:	f000 fb30 	bl	8000fd4 <HAL_DMA_Init>
 8000974:	1e03      	subs	r3, r0, #0
 8000976:	d001      	beq.n	800097c <HAL_I2C_MspInit+0x114>
    {
      Error_Handler();
 8000978:	f7ff fed8 	bl	800072c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	4a0d      	ldr	r2, [pc, #52]	; (80009b4 <HAL_I2C_MspInit+0x14c>)
 8000980:	639a      	str	r2, [r3, #56]	; 0x38
 8000982:	4b0c      	ldr	r3, [pc, #48]	; (80009b4 <HAL_I2C_MspInit+0x14c>)
 8000984:	687a      	ldr	r2, [r7, #4]
 8000986:	625a      	str	r2, [r3, #36]	; 0x24

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8000988:	2200      	movs	r2, #0
 800098a:	2100      	movs	r1, #0
 800098c:	2017      	movs	r0, #23
 800098e:	f000 faef 	bl	8000f70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8000992:	2017      	movs	r0, #23
 8000994:	f000 fb01 	bl	8000f9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000998:	46c0      	nop			; (mov r8, r8)
 800099a:	46bd      	mov	sp, r7
 800099c:	b00b      	add	sp, #44	; 0x2c
 800099e:	bd90      	pop	{r4, r7, pc}
 80009a0:	40005400 	.word	0x40005400
 80009a4:	40021000 	.word	0x40021000
 80009a8:	48000400 	.word	0x48000400
 80009ac:	2000007c 	.word	0x2000007c
 80009b0:	40020030 	.word	0x40020030
 80009b4:	200000c0 	.word	0x200000c0
 80009b8:	4002001c 	.word	0x4002001c

080009bc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a06      	ldr	r2, [pc, #24]	; (80009e4 <HAL_RTC_MspInit+0x28>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d106      	bne.n	80009dc <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80009ce:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <HAL_RTC_MspInit+0x2c>)
 80009d0:	6a1a      	ldr	r2, [r3, #32]
 80009d2:	4b05      	ldr	r3, [pc, #20]	; (80009e8 <HAL_RTC_MspInit+0x2c>)
 80009d4:	2180      	movs	r1, #128	; 0x80
 80009d6:	0209      	lsls	r1, r1, #8
 80009d8:	430a      	orrs	r2, r1
 80009da:	621a      	str	r2, [r3, #32]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80009dc:	46c0      	nop			; (mov r8, r8)
 80009de:	46bd      	mov	sp, r7
 80009e0:	b002      	add	sp, #8
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	40002800 	.word	0x40002800
 80009e8:	40021000 	.word	0x40021000

080009ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009ec:	b590      	push	{r4, r7, lr}
 80009ee:	b08b      	sub	sp, #44	; 0x2c
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f4:	2414      	movs	r4, #20
 80009f6:	193b      	adds	r3, r7, r4
 80009f8:	0018      	movs	r0, r3
 80009fa:	2314      	movs	r3, #20
 80009fc:	001a      	movs	r2, r3
 80009fe:	2100      	movs	r1, #0
 8000a00:	f003 fbbc 	bl	800417c <memset>
  if(huart->Instance==USART2)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a47      	ldr	r2, [pc, #284]	; (8000b28 <HAL_UART_MspInit+0x13c>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d000      	beq.n	8000a10 <HAL_UART_MspInit+0x24>
 8000a0e:	e086      	b.n	8000b1e <HAL_UART_MspInit+0x132>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a10:	4b46      	ldr	r3, [pc, #280]	; (8000b2c <HAL_UART_MspInit+0x140>)
 8000a12:	69da      	ldr	r2, [r3, #28]
 8000a14:	4b45      	ldr	r3, [pc, #276]	; (8000b2c <HAL_UART_MspInit+0x140>)
 8000a16:	2180      	movs	r1, #128	; 0x80
 8000a18:	0289      	lsls	r1, r1, #10
 8000a1a:	430a      	orrs	r2, r1
 8000a1c:	61da      	str	r2, [r3, #28]
 8000a1e:	4b43      	ldr	r3, [pc, #268]	; (8000b2c <HAL_UART_MspInit+0x140>)
 8000a20:	69da      	ldr	r2, [r3, #28]
 8000a22:	2380      	movs	r3, #128	; 0x80
 8000a24:	029b      	lsls	r3, r3, #10
 8000a26:	4013      	ands	r3, r2
 8000a28:	613b      	str	r3, [r7, #16]
 8000a2a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2c:	4b3f      	ldr	r3, [pc, #252]	; (8000b2c <HAL_UART_MspInit+0x140>)
 8000a2e:	695a      	ldr	r2, [r3, #20]
 8000a30:	4b3e      	ldr	r3, [pc, #248]	; (8000b2c <HAL_UART_MspInit+0x140>)
 8000a32:	2180      	movs	r1, #128	; 0x80
 8000a34:	0289      	lsls	r1, r1, #10
 8000a36:	430a      	orrs	r2, r1
 8000a38:	615a      	str	r2, [r3, #20]
 8000a3a:	4b3c      	ldr	r3, [pc, #240]	; (8000b2c <HAL_UART_MspInit+0x140>)
 8000a3c:	695a      	ldr	r2, [r3, #20]
 8000a3e:	2380      	movs	r3, #128	; 0x80
 8000a40:	029b      	lsls	r3, r3, #10
 8000a42:	4013      	ands	r3, r2
 8000a44:	60fb      	str	r3, [r7, #12]
 8000a46:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a48:	0021      	movs	r1, r4
 8000a4a:	187b      	adds	r3, r7, r1
 8000a4c:	220c      	movs	r2, #12
 8000a4e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a50:	187b      	adds	r3, r7, r1
 8000a52:	2202      	movs	r2, #2
 8000a54:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a56:	187b      	adds	r3, r7, r1
 8000a58:	2200      	movs	r2, #0
 8000a5a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a5c:	187b      	adds	r3, r7, r1
 8000a5e:	2203      	movs	r2, #3
 8000a60:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000a62:	187b      	adds	r3, r7, r1
 8000a64:	2201      	movs	r2, #1
 8000a66:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a68:	187a      	adds	r2, r7, r1
 8000a6a:	2390      	movs	r3, #144	; 0x90
 8000a6c:	05db      	lsls	r3, r3, #23
 8000a6e:	0011      	movs	r1, r2
 8000a70:	0018      	movs	r0, r3
 8000a72:	f000 fc3f 	bl	80012f4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel5;
 8000a76:	4b2e      	ldr	r3, [pc, #184]	; (8000b30 <HAL_UART_MspInit+0x144>)
 8000a78:	4a2e      	ldr	r2, [pc, #184]	; (8000b34 <HAL_UART_MspInit+0x148>)
 8000a7a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a7c:	4b2c      	ldr	r3, [pc, #176]	; (8000b30 <HAL_UART_MspInit+0x144>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a82:	4b2b      	ldr	r3, [pc, #172]	; (8000b30 <HAL_UART_MspInit+0x144>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a88:	4b29      	ldr	r3, [pc, #164]	; (8000b30 <HAL_UART_MspInit+0x144>)
 8000a8a:	2280      	movs	r2, #128	; 0x80
 8000a8c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a8e:	4b28      	ldr	r3, [pc, #160]	; (8000b30 <HAL_UART_MspInit+0x144>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a94:	4b26      	ldr	r3, [pc, #152]	; (8000b30 <HAL_UART_MspInit+0x144>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000a9a:	4b25      	ldr	r3, [pc, #148]	; (8000b30 <HAL_UART_MspInit+0x144>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000aa0:	4b23      	ldr	r3, [pc, #140]	; (8000b30 <HAL_UART_MspInit+0x144>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000aa6:	4b22      	ldr	r3, [pc, #136]	; (8000b30 <HAL_UART_MspInit+0x144>)
 8000aa8:	0018      	movs	r0, r3
 8000aaa:	f000 fa93 	bl	8000fd4 <HAL_DMA_Init>
 8000aae:	1e03      	subs	r3, r0, #0
 8000ab0:	d001      	beq.n	8000ab6 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8000ab2:	f7ff fe3b 	bl	800072c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	4a1d      	ldr	r2, [pc, #116]	; (8000b30 <HAL_UART_MspInit+0x144>)
 8000aba:	675a      	str	r2, [r3, #116]	; 0x74
 8000abc:	4b1c      	ldr	r3, [pc, #112]	; (8000b30 <HAL_UART_MspInit+0x144>)
 8000abe:	687a      	ldr	r2, [r7, #4]
 8000ac0:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel4;
 8000ac2:	4b1d      	ldr	r3, [pc, #116]	; (8000b38 <HAL_UART_MspInit+0x14c>)
 8000ac4:	4a1d      	ldr	r2, [pc, #116]	; (8000b3c <HAL_UART_MspInit+0x150>)
 8000ac6:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ac8:	4b1b      	ldr	r3, [pc, #108]	; (8000b38 <HAL_UART_MspInit+0x14c>)
 8000aca:	2210      	movs	r2, #16
 8000acc:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ace:	4b1a      	ldr	r3, [pc, #104]	; (8000b38 <HAL_UART_MspInit+0x14c>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ad4:	4b18      	ldr	r3, [pc, #96]	; (8000b38 <HAL_UART_MspInit+0x14c>)
 8000ad6:	2280      	movs	r2, #128	; 0x80
 8000ad8:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ada:	4b17      	ldr	r3, [pc, #92]	; (8000b38 <HAL_UART_MspInit+0x14c>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ae0:	4b15      	ldr	r3, [pc, #84]	; (8000b38 <HAL_UART_MspInit+0x14c>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000ae6:	4b14      	ldr	r3, [pc, #80]	; (8000b38 <HAL_UART_MspInit+0x14c>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000aec:	4b12      	ldr	r3, [pc, #72]	; (8000b38 <HAL_UART_MspInit+0x14c>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000af2:	4b11      	ldr	r3, [pc, #68]	; (8000b38 <HAL_UART_MspInit+0x14c>)
 8000af4:	0018      	movs	r0, r3
 8000af6:	f000 fa6d 	bl	8000fd4 <HAL_DMA_Init>
 8000afa:	1e03      	subs	r3, r0, #0
 8000afc:	d001      	beq.n	8000b02 <HAL_UART_MspInit+0x116>
    {
      Error_Handler();
 8000afe:	f7ff fe15 	bl	800072c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	4a0c      	ldr	r2, [pc, #48]	; (8000b38 <HAL_UART_MspInit+0x14c>)
 8000b06:	671a      	str	r2, [r3, #112]	; 0x70
 8000b08:	4b0b      	ldr	r3, [pc, #44]	; (8000b38 <HAL_UART_MspInit+0x14c>)
 8000b0a:	687a      	ldr	r2, [r7, #4]
 8000b0c:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000b0e:	2200      	movs	r2, #0
 8000b10:	2100      	movs	r1, #0
 8000b12:	201c      	movs	r0, #28
 8000b14:	f000 fa2c 	bl	8000f70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b18:	201c      	movs	r0, #28
 8000b1a:	f000 fa3e 	bl	8000f9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b1e:	46c0      	nop			; (mov r8, r8)
 8000b20:	46bd      	mov	sp, r7
 8000b22:	b00b      	add	sp, #44	; 0x2c
 8000b24:	bd90      	pop	{r4, r7, pc}
 8000b26:	46c0      	nop			; (mov r8, r8)
 8000b28:	40004400 	.word	0x40004400
 8000b2c:	40021000 	.word	0x40021000
 8000b30:	200001ac 	.word	0x200001ac
 8000b34:	40020058 	.word	0x40020058
 8000b38:	200001f0 	.word	0x200001f0
 8000b3c:	40020044 	.word	0x40020044

08000b40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b44:	e7fe      	b.n	8000b44 <NMI_Handler+0x4>

08000b46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b46:	b580      	push	{r7, lr}
 8000b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b4a:	e7fe      	b.n	8000b4a <HardFault_Handler+0x4>

08000b4c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b50:	46c0      	nop			; (mov r8, r8)
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}

08000b56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b56:	b580      	push	{r7, lr}
 8000b58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b5a:	46c0      	nop			; (mov r8, r8)
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}

08000b60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b64:	f000 f8d0 	bl	8000d08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b68:	46c0      	nop			; (mov r8, r8)
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
	...

08000b70 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8000b74:	4b05      	ldr	r3, [pc, #20]	; (8000b8c <DMA1_Channel2_3_IRQHandler+0x1c>)
 8000b76:	0018      	movs	r0, r3
 8000b78:	f000 faf1 	bl	800115e <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8000b7c:	4b04      	ldr	r3, [pc, #16]	; (8000b90 <DMA1_Channel2_3_IRQHandler+0x20>)
 8000b7e:	0018      	movs	r0, r3
 8000b80:	f000 faed 	bl	800115e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000b84:	46c0      	nop			; (mov r8, r8)
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	46c0      	nop			; (mov r8, r8)
 8000b8c:	200000c0 	.word	0x200000c0
 8000b90:	2000007c 	.word	0x2000007c

08000b94 <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000b98:	4b05      	ldr	r3, [pc, #20]	; (8000bb0 <DMA1_Channel4_5_IRQHandler+0x1c>)
 8000b9a:	0018      	movs	r0, r3
 8000b9c:	f000 fadf 	bl	800115e <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000ba0:	4b04      	ldr	r3, [pc, #16]	; (8000bb4 <DMA1_Channel4_5_IRQHandler+0x20>)
 8000ba2:	0018      	movs	r0, r3
 8000ba4:	f000 fadb 	bl	800115e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 8000ba8:	46c0      	nop			; (mov r8, r8)
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	46c0      	nop			; (mov r8, r8)
 8000bb0:	200001f0 	.word	0x200001f0
 8000bb4:	200001ac 	.word	0x200001ac

08000bb8 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 global interrupt.
  */
void I2C1_IRQHandler(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8000bbc:	4b09      	ldr	r3, [pc, #36]	; (8000be4 <I2C1_IRQHandler+0x2c>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	699a      	ldr	r2, [r3, #24]
 8000bc2:	23e0      	movs	r3, #224	; 0xe0
 8000bc4:	00db      	lsls	r3, r3, #3
 8000bc6:	4013      	ands	r3, r2
 8000bc8:	d004      	beq.n	8000bd4 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8000bca:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <I2C1_IRQHandler+0x2c>)
 8000bcc:	0018      	movs	r0, r3
 8000bce:	f000 fdcf 	bl	8001770 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8000bd2:	e003      	b.n	8000bdc <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8000bd4:	4b03      	ldr	r3, [pc, #12]	; (8000be4 <I2C1_IRQHandler+0x2c>)
 8000bd6:	0018      	movs	r0, r3
 8000bd8:	f000 fdb0 	bl	800173c <HAL_I2C_EV_IRQHandler>
}
 8000bdc:	46c0      	nop			; (mov r8, r8)
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	46c0      	nop			; (mov r8, r8)
 8000be4:	20000028 	.word	0x20000028

08000be8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000bec:	4b03      	ldr	r3, [pc, #12]	; (8000bfc <USART2_IRQHandler+0x14>)
 8000bee:	0018      	movs	r0, r3
 8000bf0:	f002 fc3c 	bl	800346c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000bf4:	46c0      	nop			; (mov r8, r8)
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	46c0      	nop			; (mov r8, r8)
 8000bfc:	20000124 	.word	0x20000124

08000c00 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000c04:	46c0      	nop			; (mov r8, r8)
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
	...

08000c0c <_ZN6CTimerC1Embb>:

unsigned long CTimer::m_wCountTimer = 0;			// счетчик

unsigned long CTimer::m_wCountTick_RealmSec = 0;	// счетчик прерываний таймера

CTimer::CTimer (unsigned long lDefaultTime, bool bONEvent, bool bON)
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	60f8      	str	r0, [r7, #12]
 8000c14:	60b9      	str	r1, [r7, #8]
 8000c16:	0019      	movs	r1, r3
 8000c18:	1dfb      	adds	r3, r7, #7
 8000c1a:	701a      	strb	r2, [r3, #0]
 8000c1c:	1dbb      	adds	r3, r7, #6
 8000c1e:	1c0a      	adds	r2, r1, #0
 8000c20:	701a      	strb	r2, [r3, #0]
{
	SetDefault (lDefaultTime, bONEvent);
 8000c22:	1dfb      	adds	r3, r7, #7
 8000c24:	781a      	ldrb	r2, [r3, #0]
 8000c26:	68b9      	ldr	r1, [r7, #8]
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	0018      	movs	r0, r3
 8000c2c:	f000 f82a 	bl	8000c84 <_ZN6CTimer10SetDefaultEmb>
	Tm.On = bON;
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	1dba      	adds	r2, r7, #6
 8000c34:	7812      	ldrb	r2, [r2, #0]
 8000c36:	2101      	movs	r1, #1
 8000c38:	0010      	movs	r0, r2
 8000c3a:	4008      	ands	r0, r1
 8000c3c:	7b1a      	ldrb	r2, [r3, #12]
 8000c3e:	2101      	movs	r1, #1
 8000c40:	438a      	bics	r2, r1
 8000c42:	1c11      	adds	r1, r2, #0
 8000c44:	1c02      	adds	r2, r0, #0
 8000c46:	430a      	orrs	r2, r1
 8000c48:	731a      	strb	r2, [r3, #12]

	m_wCountTimer++;
 8000c4a:	4b05      	ldr	r3, [pc, #20]	; (8000c60 <_ZN6CTimerC1Embb+0x54>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	1c5a      	adds	r2, r3, #1
 8000c50:	4b03      	ldr	r3, [pc, #12]	; (8000c60 <_ZN6CTimerC1Embb+0x54>)
 8000c52:	601a      	str	r2, [r3, #0]
}
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	0018      	movs	r0, r3
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	b004      	add	sp, #16
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	46c0      	nop			; (mov r8, r8)
 8000c60:	20000294 	.word	0x20000294

08000c64 <_ZN6CTimerD1Ev>:

CTimer::~CTimer ()
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
{
	m_wCountTimer--;
 8000c6c:	4b04      	ldr	r3, [pc, #16]	; (8000c80 <_ZN6CTimerD1Ev+0x1c>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	1e5a      	subs	r2, r3, #1
 8000c72:	4b03      	ldr	r3, [pc, #12]	; (8000c80 <_ZN6CTimerD1Ev+0x1c>)
 8000c74:	601a      	str	r2, [r3, #0]
}
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	0018      	movs	r0, r3
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	b002      	add	sp, #8
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	20000294 	.word	0x20000294

08000c84 <_ZN6CTimer10SetDefaultEmb>:
{
    return ((unsigned long) m_wCountTick);
}

void CTimer::SetDefault (unsigned long lDefaultTime, bool bONEvent)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	60f8      	str	r0, [r7, #12]
 8000c8c:	60b9      	str	r1, [r7, #8]
 8000c8e:	1dfb      	adds	r3, r7, #7
 8000c90:	701a      	strb	r2, [r3, #0]
	Tm.mSec = 1;
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	7b1a      	ldrb	r2, [r3, #12]
 8000c96:	2104      	movs	r1, #4
 8000c98:	430a      	orrs	r2, r1
 8000c9a:	731a      	strb	r2, [r3, #12]
	//m_pCountTick_RealT = &m_wCountTick_RealmSec;
	m_wCountTick = m_wDefaultCountTick = lDefaultTime;
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	68ba      	ldr	r2, [r7, #8]
 8000ca0:	605a      	str	r2, [r3, #4]
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	685a      	ldr	r2, [r3, #4]
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	601a      	str	r2, [r3, #0]
	m_wCountTick_start = m_wCountTick_RealmSec;				// значение таймера РС в момент запуска
 8000caa:	4b0d      	ldr	r3, [pc, #52]	; (8000ce0 <_ZN6CTimer10SetDefaultEmb+0x5c>)
 8000cac:	681a      	ldr	r2, [r3, #0]
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	609a      	str	r2, [r3, #8]
//m_wCountTick_Real++;
	Tm.On = TIMER_ON;
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	7b1a      	ldrb	r2, [r3, #12]
 8000cb6:	2101      	movs	r1, #1
 8000cb8:	430a      	orrs	r2, r1
 8000cba:	731a      	strb	r2, [r3, #12]
	Tm.Fl = bONEvent;
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	1dfa      	adds	r2, r7, #7
 8000cc0:	7812      	ldrb	r2, [r2, #0]
 8000cc2:	2101      	movs	r1, #1
 8000cc4:	400a      	ands	r2, r1
 8000cc6:	1890      	adds	r0, r2, r2
 8000cc8:	7b1a      	ldrb	r2, [r3, #12]
 8000cca:	2102      	movs	r1, #2
 8000ccc:	438a      	bics	r2, r1
 8000cce:	1c11      	adds	r1, r2, #0
 8000cd0:	1c02      	adds	r2, r0, #0
 8000cd2:	430a      	orrs	r2, r1
 8000cd4:	731a      	strb	r2, [r3, #12]
}
 8000cd6:	46c0      	nop			; (mov r8, r8)
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	b004      	add	sp, #16
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	46c0      	nop			; (mov r8, r8)
 8000ce0:	20000298 	.word	0x20000298

08000ce4 <_ZN6CTimer3OffEv>:
	Tm.On = TIMER_ON;
	Tm.Fl = TIMEREVENT_OFF;
}

void CTimer::Off (void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
	Tm.On = TIMER_OFF;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	7b1a      	ldrb	r2, [r3, #12]
 8000cf0:	2101      	movs	r1, #1
 8000cf2:	438a      	bics	r2, r1
 8000cf4:	731a      	strb	r2, [r3, #12]
	Tm.Fl = TIMEREVENT_OFF;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	7b1a      	ldrb	r2, [r3, #12]
 8000cfa:	2102      	movs	r1, #2
 8000cfc:	438a      	bics	r2, r1
 8000cfe:	731a      	strb	r2, [r3, #12]
}
 8000d00:	46c0      	nop			; (mov r8, r8)
 8000d02:	46bd      	mov	sp, r7
 8000d04:	b002      	add	sp, #8
 8000d06:	bd80      	pop	{r7, pc}

08000d08 <HAL_IncTick>:
//	if tim6
	CTimer::m_wCountTick_RealmSec++;
}
*/
void HAL_IncTick(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
	CTimer::m_wCountTick_RealmSec++;
 8000d0c:	4b03      	ldr	r3, [pc, #12]	; (8000d1c <HAL_IncTick+0x14>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	1c5a      	adds	r2, r3, #1
 8000d12:	4b02      	ldr	r3, [pc, #8]	; (8000d1c <HAL_IncTick+0x14>)
 8000d14:	601a      	str	r2, [r3, #0]
}
 8000d16:	46c0      	nop			; (mov r8, r8)
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	20000298 	.word	0x20000298

08000d20 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d20:	480d      	ldr	r0, [pc, #52]	; (8000d58 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d22:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d24:	f7ff ff6c 	bl	8000c00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d28:	480c      	ldr	r0, [pc, #48]	; (8000d5c <LoopForever+0x6>)
  ldr r1, =_edata
 8000d2a:	490d      	ldr	r1, [pc, #52]	; (8000d60 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d2c:	4a0d      	ldr	r2, [pc, #52]	; (8000d64 <LoopForever+0xe>)
  movs r3, #0
 8000d2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d30:	e002      	b.n	8000d38 <LoopCopyDataInit>

08000d32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d36:	3304      	adds	r3, #4

08000d38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d3c:	d3f9      	bcc.n	8000d32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d3e:	4a0a      	ldr	r2, [pc, #40]	; (8000d68 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d40:	4c0a      	ldr	r4, [pc, #40]	; (8000d6c <LoopForever+0x16>)
  movs r3, #0
 8000d42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d44:	e001      	b.n	8000d4a <LoopFillZerobss>

08000d46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d48:	3204      	adds	r2, #4

08000d4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d4c:	d3fb      	bcc.n	8000d46 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d4e:	f003 fa1d 	bl	800418c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d52:	f7ff faa3 	bl	800029c <main>

08000d56 <LoopForever>:

LoopForever:
    b LoopForever
 8000d56:	e7fe      	b.n	8000d56 <LoopForever>
  ldr   r0, =_estack
 8000d58:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000d5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d60:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d64:	0800423c 	.word	0x0800423c
  ldr r2, =_sbss
 8000d68:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d6c:	200002a0 	.word	0x200002a0

08000d70 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d70:	e7fe      	b.n	8000d70 <ADC1_IRQHandler>
	...

08000d74 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d78:	4b07      	ldr	r3, [pc, #28]	; (8000d98 <HAL_Init+0x24>)
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <HAL_Init+0x24>)
 8000d7e:	2110      	movs	r1, #16
 8000d80:	430a      	orrs	r2, r1
 8000d82:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000d84:	2000      	movs	r0, #0
 8000d86:	f000 f809 	bl	8000d9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d8a:	f7ff fd49 	bl	8000820 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d8e:	2300      	movs	r3, #0
}
 8000d90:	0018      	movs	r0, r3
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	46c0      	nop			; (mov r8, r8)
 8000d98:	40022000 	.word	0x40022000

08000d9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d9c:	b590      	push	{r4, r7, lr}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000da4:	4b14      	ldr	r3, [pc, #80]	; (8000df8 <HAL_InitTick+0x5c>)
 8000da6:	681c      	ldr	r4, [r3, #0]
 8000da8:	4b14      	ldr	r3, [pc, #80]	; (8000dfc <HAL_InitTick+0x60>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	0019      	movs	r1, r3
 8000dae:	23fa      	movs	r3, #250	; 0xfa
 8000db0:	0098      	lsls	r0, r3, #2
 8000db2:	f7ff f9a9 	bl	8000108 <__udivsi3>
 8000db6:	0003      	movs	r3, r0
 8000db8:	0019      	movs	r1, r3
 8000dba:	0020      	movs	r0, r4
 8000dbc:	f7ff f9a4 	bl	8000108 <__udivsi3>
 8000dc0:	0003      	movs	r3, r0
 8000dc2:	0018      	movs	r0, r3
 8000dc4:	f000 f8f9 	bl	8000fba <HAL_SYSTICK_Config>
 8000dc8:	1e03      	subs	r3, r0, #0
 8000dca:	d001      	beq.n	8000dd0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	e00f      	b.n	8000df0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2b03      	cmp	r3, #3
 8000dd4:	d80b      	bhi.n	8000dee <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dd6:	6879      	ldr	r1, [r7, #4]
 8000dd8:	2301      	movs	r3, #1
 8000dda:	425b      	negs	r3, r3
 8000ddc:	2200      	movs	r2, #0
 8000dde:	0018      	movs	r0, r3
 8000de0:	f000 f8c6 	bl	8000f70 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000de4:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <HAL_InitTick+0x64>)
 8000de6:	687a      	ldr	r2, [r7, #4]
 8000de8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000dea:	2300      	movs	r3, #0
 8000dec:	e000      	b.n	8000df0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000dee:	2301      	movs	r3, #1
}
 8000df0:	0018      	movs	r0, r3
 8000df2:	46bd      	mov	sp, r7
 8000df4:	b003      	add	sp, #12
 8000df6:	bd90      	pop	{r4, r7, pc}
 8000df8:	20000000 	.word	0x20000000
 8000dfc:	20000008 	.word	0x20000008
 8000e00:	20000004 	.word	0x20000004

08000e04 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  return uwTick;
 8000e08:	4b02      	ldr	r3, [pc, #8]	; (8000e14 <HAL_GetTick+0x10>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
}
 8000e0c:	0018      	movs	r0, r3
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	46c0      	nop			; (mov r8, r8)
 8000e14:	2000029c 	.word	0x2000029c

08000e18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	0002      	movs	r2, r0
 8000e20:	1dfb      	adds	r3, r7, #7
 8000e22:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e24:	1dfb      	adds	r3, r7, #7
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	2b7f      	cmp	r3, #127	; 0x7f
 8000e2a:	d809      	bhi.n	8000e40 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e2c:	1dfb      	adds	r3, r7, #7
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	001a      	movs	r2, r3
 8000e32:	231f      	movs	r3, #31
 8000e34:	401a      	ands	r2, r3
 8000e36:	4b04      	ldr	r3, [pc, #16]	; (8000e48 <__NVIC_EnableIRQ+0x30>)
 8000e38:	2101      	movs	r1, #1
 8000e3a:	4091      	lsls	r1, r2
 8000e3c:	000a      	movs	r2, r1
 8000e3e:	601a      	str	r2, [r3, #0]
  }
}
 8000e40:	46c0      	nop			; (mov r8, r8)
 8000e42:	46bd      	mov	sp, r7
 8000e44:	b002      	add	sp, #8
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	e000e100 	.word	0xe000e100

08000e4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e4c:	b590      	push	{r4, r7, lr}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	0002      	movs	r2, r0
 8000e54:	6039      	str	r1, [r7, #0]
 8000e56:	1dfb      	adds	r3, r7, #7
 8000e58:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e5a:	1dfb      	adds	r3, r7, #7
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	2b7f      	cmp	r3, #127	; 0x7f
 8000e60:	d828      	bhi.n	8000eb4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e62:	4a2f      	ldr	r2, [pc, #188]	; (8000f20 <__NVIC_SetPriority+0xd4>)
 8000e64:	1dfb      	adds	r3, r7, #7
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	b25b      	sxtb	r3, r3
 8000e6a:	089b      	lsrs	r3, r3, #2
 8000e6c:	33c0      	adds	r3, #192	; 0xc0
 8000e6e:	009b      	lsls	r3, r3, #2
 8000e70:	589b      	ldr	r3, [r3, r2]
 8000e72:	1dfa      	adds	r2, r7, #7
 8000e74:	7812      	ldrb	r2, [r2, #0]
 8000e76:	0011      	movs	r1, r2
 8000e78:	2203      	movs	r2, #3
 8000e7a:	400a      	ands	r2, r1
 8000e7c:	00d2      	lsls	r2, r2, #3
 8000e7e:	21ff      	movs	r1, #255	; 0xff
 8000e80:	4091      	lsls	r1, r2
 8000e82:	000a      	movs	r2, r1
 8000e84:	43d2      	mvns	r2, r2
 8000e86:	401a      	ands	r2, r3
 8000e88:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	019b      	lsls	r3, r3, #6
 8000e8e:	22ff      	movs	r2, #255	; 0xff
 8000e90:	401a      	ands	r2, r3
 8000e92:	1dfb      	adds	r3, r7, #7
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	0018      	movs	r0, r3
 8000e98:	2303      	movs	r3, #3
 8000e9a:	4003      	ands	r3, r0
 8000e9c:	00db      	lsls	r3, r3, #3
 8000e9e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ea0:	481f      	ldr	r0, [pc, #124]	; (8000f20 <__NVIC_SetPriority+0xd4>)
 8000ea2:	1dfb      	adds	r3, r7, #7
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	b25b      	sxtb	r3, r3
 8000ea8:	089b      	lsrs	r3, r3, #2
 8000eaa:	430a      	orrs	r2, r1
 8000eac:	33c0      	adds	r3, #192	; 0xc0
 8000eae:	009b      	lsls	r3, r3, #2
 8000eb0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000eb2:	e031      	b.n	8000f18 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000eb4:	4a1b      	ldr	r2, [pc, #108]	; (8000f24 <__NVIC_SetPriority+0xd8>)
 8000eb6:	1dfb      	adds	r3, r7, #7
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	0019      	movs	r1, r3
 8000ebc:	230f      	movs	r3, #15
 8000ebe:	400b      	ands	r3, r1
 8000ec0:	3b08      	subs	r3, #8
 8000ec2:	089b      	lsrs	r3, r3, #2
 8000ec4:	3306      	adds	r3, #6
 8000ec6:	009b      	lsls	r3, r3, #2
 8000ec8:	18d3      	adds	r3, r2, r3
 8000eca:	3304      	adds	r3, #4
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	1dfa      	adds	r2, r7, #7
 8000ed0:	7812      	ldrb	r2, [r2, #0]
 8000ed2:	0011      	movs	r1, r2
 8000ed4:	2203      	movs	r2, #3
 8000ed6:	400a      	ands	r2, r1
 8000ed8:	00d2      	lsls	r2, r2, #3
 8000eda:	21ff      	movs	r1, #255	; 0xff
 8000edc:	4091      	lsls	r1, r2
 8000ede:	000a      	movs	r2, r1
 8000ee0:	43d2      	mvns	r2, r2
 8000ee2:	401a      	ands	r2, r3
 8000ee4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	019b      	lsls	r3, r3, #6
 8000eea:	22ff      	movs	r2, #255	; 0xff
 8000eec:	401a      	ands	r2, r3
 8000eee:	1dfb      	adds	r3, r7, #7
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	0018      	movs	r0, r3
 8000ef4:	2303      	movs	r3, #3
 8000ef6:	4003      	ands	r3, r0
 8000ef8:	00db      	lsls	r3, r3, #3
 8000efa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000efc:	4809      	ldr	r0, [pc, #36]	; (8000f24 <__NVIC_SetPriority+0xd8>)
 8000efe:	1dfb      	adds	r3, r7, #7
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	001c      	movs	r4, r3
 8000f04:	230f      	movs	r3, #15
 8000f06:	4023      	ands	r3, r4
 8000f08:	3b08      	subs	r3, #8
 8000f0a:	089b      	lsrs	r3, r3, #2
 8000f0c:	430a      	orrs	r2, r1
 8000f0e:	3306      	adds	r3, #6
 8000f10:	009b      	lsls	r3, r3, #2
 8000f12:	18c3      	adds	r3, r0, r3
 8000f14:	3304      	adds	r3, #4
 8000f16:	601a      	str	r2, [r3, #0]
}
 8000f18:	46c0      	nop			; (mov r8, r8)
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	b003      	add	sp, #12
 8000f1e:	bd90      	pop	{r4, r7, pc}
 8000f20:	e000e100 	.word	0xe000e100
 8000f24:	e000ed00 	.word	0xe000ed00

08000f28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	1e5a      	subs	r2, r3, #1
 8000f34:	2380      	movs	r3, #128	; 0x80
 8000f36:	045b      	lsls	r3, r3, #17
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	d301      	bcc.n	8000f40 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	e010      	b.n	8000f62 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f40:	4b0a      	ldr	r3, [pc, #40]	; (8000f6c <SysTick_Config+0x44>)
 8000f42:	687a      	ldr	r2, [r7, #4]
 8000f44:	3a01      	subs	r2, #1
 8000f46:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f48:	2301      	movs	r3, #1
 8000f4a:	425b      	negs	r3, r3
 8000f4c:	2103      	movs	r1, #3
 8000f4e:	0018      	movs	r0, r3
 8000f50:	f7ff ff7c 	bl	8000e4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f54:	4b05      	ldr	r3, [pc, #20]	; (8000f6c <SysTick_Config+0x44>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f5a:	4b04      	ldr	r3, [pc, #16]	; (8000f6c <SysTick_Config+0x44>)
 8000f5c:	2207      	movs	r2, #7
 8000f5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f60:	2300      	movs	r3, #0
}
 8000f62:	0018      	movs	r0, r3
 8000f64:	46bd      	mov	sp, r7
 8000f66:	b002      	add	sp, #8
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	46c0      	nop			; (mov r8, r8)
 8000f6c:	e000e010 	.word	0xe000e010

08000f70 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	60b9      	str	r1, [r7, #8]
 8000f78:	607a      	str	r2, [r7, #4]
 8000f7a:	210f      	movs	r1, #15
 8000f7c:	187b      	adds	r3, r7, r1
 8000f7e:	1c02      	adds	r2, r0, #0
 8000f80:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000f82:	68ba      	ldr	r2, [r7, #8]
 8000f84:	187b      	adds	r3, r7, r1
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	b25b      	sxtb	r3, r3
 8000f8a:	0011      	movs	r1, r2
 8000f8c:	0018      	movs	r0, r3
 8000f8e:	f7ff ff5d 	bl	8000e4c <__NVIC_SetPriority>
}
 8000f92:	46c0      	nop			; (mov r8, r8)
 8000f94:	46bd      	mov	sp, r7
 8000f96:	b004      	add	sp, #16
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b082      	sub	sp, #8
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	0002      	movs	r2, r0
 8000fa2:	1dfb      	adds	r3, r7, #7
 8000fa4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fa6:	1dfb      	adds	r3, r7, #7
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	b25b      	sxtb	r3, r3
 8000fac:	0018      	movs	r0, r3
 8000fae:	f7ff ff33 	bl	8000e18 <__NVIC_EnableIRQ>
}
 8000fb2:	46c0      	nop			; (mov r8, r8)
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	b002      	add	sp, #8
 8000fb8:	bd80      	pop	{r7, pc}

08000fba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b082      	sub	sp, #8
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	0018      	movs	r0, r3
 8000fc6:	f7ff ffaf 	bl	8000f28 <SysTick_Config>
 8000fca:	0003      	movs	r3, r0
}
 8000fcc:	0018      	movs	r0, r3
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	b002      	add	sp, #8
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d101      	bne.n	8000fea <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e036      	b.n	8001058 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2221      	movs	r2, #33	; 0x21
 8000fee:	2102      	movs	r1, #2
 8000ff0:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	4a18      	ldr	r2, [pc, #96]	; (8001060 <HAL_DMA_Init+0x8c>)
 8000ffe:	4013      	ands	r3, r2
 8001000:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800100a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001016:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	695b      	ldr	r3, [r3, #20]
 800101c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001022:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	69db      	ldr	r3, [r3, #28]
 8001028:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800102a:	68fa      	ldr	r2, [r7, #12]
 800102c:	4313      	orrs	r3, r2
 800102e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	68fa      	ldr	r2, [r7, #12]
 8001036:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	0018      	movs	r0, r3
 800103c:	f000 f93e 	bl	80012bc <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2200      	movs	r2, #0
 8001044:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2221      	movs	r2, #33	; 0x21
 800104a:	2101      	movs	r1, #1
 800104c:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2220      	movs	r2, #32
 8001052:	2100      	movs	r1, #0
 8001054:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001056:	2300      	movs	r3, #0
}
 8001058:	0018      	movs	r0, r3
 800105a:	46bd      	mov	sp, r7
 800105c:	b004      	add	sp, #16
 800105e:	bd80      	pop	{r7, pc}
 8001060:	ffffc00f 	.word	0xffffc00f

08001064 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2221      	movs	r2, #33	; 0x21
 8001070:	5c9b      	ldrb	r3, [r3, r2]
 8001072:	b2db      	uxtb	r3, r3
 8001074:	2b02      	cmp	r3, #2
 8001076:	d008      	beq.n	800108a <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2204      	movs	r2, #4
 800107c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2220      	movs	r2, #32
 8001082:	2100      	movs	r1, #0
 8001084:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e020      	b.n	80010cc <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	210e      	movs	r1, #14
 8001096:	438a      	bics	r2, r1
 8001098:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	2101      	movs	r1, #1
 80010a6:	438a      	bics	r2, r1
 80010a8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010b2:	2101      	movs	r1, #1
 80010b4:	4091      	lsls	r1, r2
 80010b6:	000a      	movs	r2, r1
 80010b8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2221      	movs	r2, #33	; 0x21
 80010be:	2101      	movs	r1, #1
 80010c0:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2220      	movs	r2, #32
 80010c6:	2100      	movs	r1, #0
 80010c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80010ca:	2300      	movs	r3, #0
}
 80010cc:	0018      	movs	r0, r3
 80010ce:	46bd      	mov	sp, r7
 80010d0:	b002      	add	sp, #8
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010dc:	210f      	movs	r1, #15
 80010de:	187b      	adds	r3, r7, r1
 80010e0:	2200      	movs	r2, #0
 80010e2:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2221      	movs	r2, #33	; 0x21
 80010e8:	5c9b      	ldrb	r3, [r3, r2]
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	2b02      	cmp	r3, #2
 80010ee:	d006      	beq.n	80010fe <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2204      	movs	r2, #4
 80010f4:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 80010f6:	187b      	adds	r3, r7, r1
 80010f8:	2201      	movs	r2, #1
 80010fa:	701a      	strb	r2, [r3, #0]
 80010fc:	e028      	b.n	8001150 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	210e      	movs	r1, #14
 800110a:	438a      	bics	r2, r1
 800110c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	2101      	movs	r1, #1
 800111a:	438a      	bics	r2, r1
 800111c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001126:	2101      	movs	r1, #1
 8001128:	4091      	lsls	r1, r2
 800112a:	000a      	movs	r2, r1
 800112c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2221      	movs	r2, #33	; 0x21
 8001132:	2101      	movs	r1, #1
 8001134:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2220      	movs	r2, #32
 800113a:	2100      	movs	r1, #0
 800113c:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001142:	2b00      	cmp	r3, #0
 8001144:	d004      	beq.n	8001150 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800114a:	687a      	ldr	r2, [r7, #4]
 800114c:	0010      	movs	r0, r2
 800114e:	4798      	blx	r3
    }
  }
  return status;
 8001150:	230f      	movs	r3, #15
 8001152:	18fb      	adds	r3, r7, r3
 8001154:	781b      	ldrb	r3, [r3, #0]
}
 8001156:	0018      	movs	r0, r3
 8001158:	46bd      	mov	sp, r7
 800115a:	b004      	add	sp, #16
 800115c:	bd80      	pop	{r7, pc}

0800115e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800115e:	b580      	push	{r7, lr}
 8001160:	b084      	sub	sp, #16
 8001162:	af00      	add	r7, sp, #0
 8001164:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117a:	2204      	movs	r2, #4
 800117c:	409a      	lsls	r2, r3
 800117e:	0013      	movs	r3, r2
 8001180:	68fa      	ldr	r2, [r7, #12]
 8001182:	4013      	ands	r3, r2
 8001184:	d024      	beq.n	80011d0 <HAL_DMA_IRQHandler+0x72>
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	2204      	movs	r2, #4
 800118a:	4013      	ands	r3, r2
 800118c:	d020      	beq.n	80011d0 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	2220      	movs	r2, #32
 8001196:	4013      	ands	r3, r2
 8001198:	d107      	bne.n	80011aa <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	2104      	movs	r1, #4
 80011a6:	438a      	bics	r2, r1
 80011a8:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011b2:	2104      	movs	r1, #4
 80011b4:	4091      	lsls	r1, r2
 80011b6:	000a      	movs	r2, r1
 80011b8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d100      	bne.n	80011c4 <HAL_DMA_IRQHandler+0x66>
 80011c2:	e06a      	b.n	800129a <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011c8:	687a      	ldr	r2, [r7, #4]
 80011ca:	0010      	movs	r0, r2
 80011cc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80011ce:	e064      	b.n	800129a <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d4:	2202      	movs	r2, #2
 80011d6:	409a      	lsls	r2, r3
 80011d8:	0013      	movs	r3, r2
 80011da:	68fa      	ldr	r2, [r7, #12]
 80011dc:	4013      	ands	r3, r2
 80011de:	d02b      	beq.n	8001238 <HAL_DMA_IRQHandler+0xda>
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	2202      	movs	r2, #2
 80011e4:	4013      	ands	r3, r2
 80011e6:	d027      	beq.n	8001238 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	2220      	movs	r2, #32
 80011f0:	4013      	ands	r3, r2
 80011f2:	d10b      	bne.n	800120c <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	210a      	movs	r1, #10
 8001200:	438a      	bics	r2, r1
 8001202:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2221      	movs	r2, #33	; 0x21
 8001208:	2101      	movs	r1, #1
 800120a:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001214:	2102      	movs	r1, #2
 8001216:	4091      	lsls	r1, r2
 8001218:	000a      	movs	r2, r1
 800121a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2220      	movs	r2, #32
 8001220:	2100      	movs	r1, #0
 8001222:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001228:	2b00      	cmp	r3, #0
 800122a:	d036      	beq.n	800129a <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001230:	687a      	ldr	r2, [r7, #4]
 8001232:	0010      	movs	r0, r2
 8001234:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001236:	e030      	b.n	800129a <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123c:	2208      	movs	r2, #8
 800123e:	409a      	lsls	r2, r3
 8001240:	0013      	movs	r3, r2
 8001242:	68fa      	ldr	r2, [r7, #12]
 8001244:	4013      	ands	r3, r2
 8001246:	d028      	beq.n	800129a <HAL_DMA_IRQHandler+0x13c>
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	2208      	movs	r2, #8
 800124c:	4013      	ands	r3, r2
 800124e:	d024      	beq.n	800129a <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	210e      	movs	r1, #14
 800125c:	438a      	bics	r2, r1
 800125e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001268:	2101      	movs	r1, #1
 800126a:	4091      	lsls	r1, r2
 800126c:	000a      	movs	r2, r1
 800126e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2201      	movs	r2, #1
 8001274:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2221      	movs	r2, #33	; 0x21
 800127a:	2101      	movs	r1, #1
 800127c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2220      	movs	r2, #32
 8001282:	2100      	movs	r1, #0
 8001284:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	2b00      	cmp	r3, #0
 800128c:	d005      	beq.n	800129a <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	687a      	ldr	r2, [r7, #4]
 8001294:	0010      	movs	r0, r2
 8001296:	4798      	blx	r3
    }
  }
}
 8001298:	e7ff      	b.n	800129a <HAL_DMA_IRQHandler+0x13c>
 800129a:	46c0      	nop			; (mov r8, r8)
 800129c:	46bd      	mov	sp, r7
 800129e:	b004      	add	sp, #16
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80012a2:	b580      	push	{r7, lr}
 80012a4:	b082      	sub	sp, #8
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2221      	movs	r2, #33	; 0x21
 80012ae:	5c9b      	ldrb	r3, [r3, r2]
 80012b0:	b2db      	uxtb	r3, r3
}
 80012b2:	0018      	movs	r0, r3
 80012b4:	46bd      	mov	sp, r7
 80012b6:	b002      	add	sp, #8
 80012b8:	bd80      	pop	{r7, pc}
	...

080012bc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a08      	ldr	r2, [pc, #32]	; (80012ec <DMA_CalcBaseAndBitshift+0x30>)
 80012ca:	4694      	mov	ip, r2
 80012cc:	4463      	add	r3, ip
 80012ce:	2114      	movs	r1, #20
 80012d0:	0018      	movs	r0, r3
 80012d2:	f7fe ff19 	bl	8000108 <__udivsi3>
 80012d6:	0003      	movs	r3, r0
 80012d8:	009a      	lsls	r2, r3, #2
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a03      	ldr	r2, [pc, #12]	; (80012f0 <DMA_CalcBaseAndBitshift+0x34>)
 80012e2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80012e4:	46c0      	nop			; (mov r8, r8)
 80012e6:	46bd      	mov	sp, r7
 80012e8:	b002      	add	sp, #8
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	bffdfff8 	.word	0xbffdfff8
 80012f0:	40020000 	.word	0x40020000

080012f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b086      	sub	sp, #24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012fe:	2300      	movs	r3, #0
 8001300:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001302:	e14f      	b.n	80015a4 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	2101      	movs	r1, #1
 800130a:	697a      	ldr	r2, [r7, #20]
 800130c:	4091      	lsls	r1, r2
 800130e:	000a      	movs	r2, r1
 8001310:	4013      	ands	r3, r2
 8001312:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d100      	bne.n	800131c <HAL_GPIO_Init+0x28>
 800131a:	e140      	b.n	800159e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	2203      	movs	r2, #3
 8001322:	4013      	ands	r3, r2
 8001324:	2b01      	cmp	r3, #1
 8001326:	d005      	beq.n	8001334 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	2203      	movs	r2, #3
 800132e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001330:	2b02      	cmp	r3, #2
 8001332:	d130      	bne.n	8001396 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	2203      	movs	r2, #3
 8001340:	409a      	lsls	r2, r3
 8001342:	0013      	movs	r3, r2
 8001344:	43da      	mvns	r2, r3
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	4013      	ands	r3, r2
 800134a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	68da      	ldr	r2, [r3, #12]
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	409a      	lsls	r2, r3
 8001356:	0013      	movs	r3, r2
 8001358:	693a      	ldr	r2, [r7, #16]
 800135a:	4313      	orrs	r3, r2
 800135c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	693a      	ldr	r2, [r7, #16]
 8001362:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800136a:	2201      	movs	r2, #1
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	409a      	lsls	r2, r3
 8001370:	0013      	movs	r3, r2
 8001372:	43da      	mvns	r2, r3
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	4013      	ands	r3, r2
 8001378:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	091b      	lsrs	r3, r3, #4
 8001380:	2201      	movs	r2, #1
 8001382:	401a      	ands	r2, r3
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	409a      	lsls	r2, r3
 8001388:	0013      	movs	r3, r2
 800138a:	693a      	ldr	r2, [r7, #16]
 800138c:	4313      	orrs	r3, r2
 800138e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	2203      	movs	r2, #3
 800139c:	4013      	ands	r3, r2
 800139e:	2b03      	cmp	r3, #3
 80013a0:	d017      	beq.n	80013d2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	68db      	ldr	r3, [r3, #12]
 80013a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	005b      	lsls	r3, r3, #1
 80013ac:	2203      	movs	r2, #3
 80013ae:	409a      	lsls	r2, r3
 80013b0:	0013      	movs	r3, r2
 80013b2:	43da      	mvns	r2, r3
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	4013      	ands	r3, r2
 80013b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	689a      	ldr	r2, [r3, #8]
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	409a      	lsls	r2, r3
 80013c4:	0013      	movs	r3, r2
 80013c6:	693a      	ldr	r2, [r7, #16]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	693a      	ldr	r2, [r7, #16]
 80013d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	2203      	movs	r2, #3
 80013d8:	4013      	ands	r3, r2
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d123      	bne.n	8001426 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	08da      	lsrs	r2, r3, #3
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	3208      	adds	r2, #8
 80013e6:	0092      	lsls	r2, r2, #2
 80013e8:	58d3      	ldr	r3, [r2, r3]
 80013ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	2207      	movs	r2, #7
 80013f0:	4013      	ands	r3, r2
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	220f      	movs	r2, #15
 80013f6:	409a      	lsls	r2, r3
 80013f8:	0013      	movs	r3, r2
 80013fa:	43da      	mvns	r2, r3
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	4013      	ands	r3, r2
 8001400:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	691a      	ldr	r2, [r3, #16]
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	2107      	movs	r1, #7
 800140a:	400b      	ands	r3, r1
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	409a      	lsls	r2, r3
 8001410:	0013      	movs	r3, r2
 8001412:	693a      	ldr	r2, [r7, #16]
 8001414:	4313      	orrs	r3, r2
 8001416:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	08da      	lsrs	r2, r3, #3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	3208      	adds	r2, #8
 8001420:	0092      	lsls	r2, r2, #2
 8001422:	6939      	ldr	r1, [r7, #16]
 8001424:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	2203      	movs	r2, #3
 8001432:	409a      	lsls	r2, r3
 8001434:	0013      	movs	r3, r2
 8001436:	43da      	mvns	r2, r3
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	4013      	ands	r3, r2
 800143c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	2203      	movs	r2, #3
 8001444:	401a      	ands	r2, r3
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	409a      	lsls	r2, r3
 800144c:	0013      	movs	r3, r2
 800144e:	693a      	ldr	r2, [r7, #16]
 8001450:	4313      	orrs	r3, r2
 8001452:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	693a      	ldr	r2, [r7, #16]
 8001458:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	685a      	ldr	r2, [r3, #4]
 800145e:	23c0      	movs	r3, #192	; 0xc0
 8001460:	029b      	lsls	r3, r3, #10
 8001462:	4013      	ands	r3, r2
 8001464:	d100      	bne.n	8001468 <HAL_GPIO_Init+0x174>
 8001466:	e09a      	b.n	800159e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001468:	4b54      	ldr	r3, [pc, #336]	; (80015bc <HAL_GPIO_Init+0x2c8>)
 800146a:	699a      	ldr	r2, [r3, #24]
 800146c:	4b53      	ldr	r3, [pc, #332]	; (80015bc <HAL_GPIO_Init+0x2c8>)
 800146e:	2101      	movs	r1, #1
 8001470:	430a      	orrs	r2, r1
 8001472:	619a      	str	r2, [r3, #24]
 8001474:	4b51      	ldr	r3, [pc, #324]	; (80015bc <HAL_GPIO_Init+0x2c8>)
 8001476:	699b      	ldr	r3, [r3, #24]
 8001478:	2201      	movs	r2, #1
 800147a:	4013      	ands	r3, r2
 800147c:	60bb      	str	r3, [r7, #8]
 800147e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001480:	4a4f      	ldr	r2, [pc, #316]	; (80015c0 <HAL_GPIO_Init+0x2cc>)
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	089b      	lsrs	r3, r3, #2
 8001486:	3302      	adds	r3, #2
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	589b      	ldr	r3, [r3, r2]
 800148c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	2203      	movs	r2, #3
 8001492:	4013      	ands	r3, r2
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	220f      	movs	r2, #15
 8001498:	409a      	lsls	r2, r3
 800149a:	0013      	movs	r3, r2
 800149c:	43da      	mvns	r2, r3
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	4013      	ands	r3, r2
 80014a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80014a4:	687a      	ldr	r2, [r7, #4]
 80014a6:	2390      	movs	r3, #144	; 0x90
 80014a8:	05db      	lsls	r3, r3, #23
 80014aa:	429a      	cmp	r2, r3
 80014ac:	d013      	beq.n	80014d6 <HAL_GPIO_Init+0x1e2>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4a44      	ldr	r2, [pc, #272]	; (80015c4 <HAL_GPIO_Init+0x2d0>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d00d      	beq.n	80014d2 <HAL_GPIO_Init+0x1de>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4a43      	ldr	r2, [pc, #268]	; (80015c8 <HAL_GPIO_Init+0x2d4>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d007      	beq.n	80014ce <HAL_GPIO_Init+0x1da>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4a42      	ldr	r2, [pc, #264]	; (80015cc <HAL_GPIO_Init+0x2d8>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d101      	bne.n	80014ca <HAL_GPIO_Init+0x1d6>
 80014c6:	2303      	movs	r3, #3
 80014c8:	e006      	b.n	80014d8 <HAL_GPIO_Init+0x1e4>
 80014ca:	2305      	movs	r3, #5
 80014cc:	e004      	b.n	80014d8 <HAL_GPIO_Init+0x1e4>
 80014ce:	2302      	movs	r3, #2
 80014d0:	e002      	b.n	80014d8 <HAL_GPIO_Init+0x1e4>
 80014d2:	2301      	movs	r3, #1
 80014d4:	e000      	b.n	80014d8 <HAL_GPIO_Init+0x1e4>
 80014d6:	2300      	movs	r3, #0
 80014d8:	697a      	ldr	r2, [r7, #20]
 80014da:	2103      	movs	r1, #3
 80014dc:	400a      	ands	r2, r1
 80014de:	0092      	lsls	r2, r2, #2
 80014e0:	4093      	lsls	r3, r2
 80014e2:	693a      	ldr	r2, [r7, #16]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80014e8:	4935      	ldr	r1, [pc, #212]	; (80015c0 <HAL_GPIO_Init+0x2cc>)
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	089b      	lsrs	r3, r3, #2
 80014ee:	3302      	adds	r3, #2
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	693a      	ldr	r2, [r7, #16]
 80014f4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014f6:	4b36      	ldr	r3, [pc, #216]	; (80015d0 <HAL_GPIO_Init+0x2dc>)
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	43da      	mvns	r2, r3
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	4013      	ands	r3, r2
 8001504:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	685a      	ldr	r2, [r3, #4]
 800150a:	2380      	movs	r3, #128	; 0x80
 800150c:	035b      	lsls	r3, r3, #13
 800150e:	4013      	ands	r3, r2
 8001510:	d003      	beq.n	800151a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001512:	693a      	ldr	r2, [r7, #16]
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	4313      	orrs	r3, r2
 8001518:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800151a:	4b2d      	ldr	r3, [pc, #180]	; (80015d0 <HAL_GPIO_Init+0x2dc>)
 800151c:	693a      	ldr	r2, [r7, #16]
 800151e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001520:	4b2b      	ldr	r3, [pc, #172]	; (80015d0 <HAL_GPIO_Init+0x2dc>)
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	43da      	mvns	r2, r3
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	4013      	ands	r3, r2
 800152e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	685a      	ldr	r2, [r3, #4]
 8001534:	2380      	movs	r3, #128	; 0x80
 8001536:	039b      	lsls	r3, r3, #14
 8001538:	4013      	ands	r3, r2
 800153a:	d003      	beq.n	8001544 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 800153c:	693a      	ldr	r2, [r7, #16]
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	4313      	orrs	r3, r2
 8001542:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001544:	4b22      	ldr	r3, [pc, #136]	; (80015d0 <HAL_GPIO_Init+0x2dc>)
 8001546:	693a      	ldr	r2, [r7, #16]
 8001548:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800154a:	4b21      	ldr	r3, [pc, #132]	; (80015d0 <HAL_GPIO_Init+0x2dc>)
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	43da      	mvns	r2, r3
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	4013      	ands	r3, r2
 8001558:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	685a      	ldr	r2, [r3, #4]
 800155e:	2380      	movs	r3, #128	; 0x80
 8001560:	029b      	lsls	r3, r3, #10
 8001562:	4013      	ands	r3, r2
 8001564:	d003      	beq.n	800156e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001566:	693a      	ldr	r2, [r7, #16]
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	4313      	orrs	r3, r2
 800156c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800156e:	4b18      	ldr	r3, [pc, #96]	; (80015d0 <HAL_GPIO_Init+0x2dc>)
 8001570:	693a      	ldr	r2, [r7, #16]
 8001572:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001574:	4b16      	ldr	r3, [pc, #88]	; (80015d0 <HAL_GPIO_Init+0x2dc>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	43da      	mvns	r2, r3
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	4013      	ands	r3, r2
 8001582:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	685a      	ldr	r2, [r3, #4]
 8001588:	2380      	movs	r3, #128	; 0x80
 800158a:	025b      	lsls	r3, r3, #9
 800158c:	4013      	ands	r3, r2
 800158e:	d003      	beq.n	8001598 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001590:	693a      	ldr	r2, [r7, #16]
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	4313      	orrs	r3, r2
 8001596:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001598:	4b0d      	ldr	r3, [pc, #52]	; (80015d0 <HAL_GPIO_Init+0x2dc>)
 800159a:	693a      	ldr	r2, [r7, #16]
 800159c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	3301      	adds	r3, #1
 80015a2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	40da      	lsrs	r2, r3
 80015ac:	1e13      	subs	r3, r2, #0
 80015ae:	d000      	beq.n	80015b2 <HAL_GPIO_Init+0x2be>
 80015b0:	e6a8      	b.n	8001304 <HAL_GPIO_Init+0x10>
  } 
}
 80015b2:	46c0      	nop			; (mov r8, r8)
 80015b4:	46c0      	nop			; (mov r8, r8)
 80015b6:	46bd      	mov	sp, r7
 80015b8:	b006      	add	sp, #24
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	40021000 	.word	0x40021000
 80015c0:	40010000 	.word	0x40010000
 80015c4:	48000400 	.word	0x48000400
 80015c8:	48000800 	.word	0x48000800
 80015cc:	48000c00 	.word	0x48000c00
 80015d0:	40010400 	.word	0x40010400

080015d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	0008      	movs	r0, r1
 80015de:	0011      	movs	r1, r2
 80015e0:	1cbb      	adds	r3, r7, #2
 80015e2:	1c02      	adds	r2, r0, #0
 80015e4:	801a      	strh	r2, [r3, #0]
 80015e6:	1c7b      	adds	r3, r7, #1
 80015e8:	1c0a      	adds	r2, r1, #0
 80015ea:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015ec:	1c7b      	adds	r3, r7, #1
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d004      	beq.n	80015fe <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015f4:	1cbb      	adds	r3, r7, #2
 80015f6:	881a      	ldrh	r2, [r3, #0]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80015fc:	e003      	b.n	8001606 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015fe:	1cbb      	adds	r3, r7, #2
 8001600:	881a      	ldrh	r2, [r3, #0]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001606:	46c0      	nop			; (mov r8, r8)
 8001608:	46bd      	mov	sp, r7
 800160a:	b002      	add	sp, #8
 800160c:	bd80      	pop	{r7, pc}
	...

08001610 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d101      	bne.n	8001622 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e082      	b.n	8001728 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2241      	movs	r2, #65	; 0x41
 8001626:	5c9b      	ldrb	r3, [r3, r2]
 8001628:	b2db      	uxtb	r3, r3
 800162a:	2b00      	cmp	r3, #0
 800162c:	d107      	bne.n	800163e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2240      	movs	r2, #64	; 0x40
 8001632:	2100      	movs	r1, #0
 8001634:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	0018      	movs	r0, r3
 800163a:	f7ff f915 	bl	8000868 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2241      	movs	r2, #65	; 0x41
 8001642:	2124      	movs	r1, #36	; 0x24
 8001644:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2101      	movs	r1, #1
 8001652:	438a      	bics	r2, r1
 8001654:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	685a      	ldr	r2, [r3, #4]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4934      	ldr	r1, [pc, #208]	; (8001730 <HAL_I2C_Init+0x120>)
 8001660:	400a      	ands	r2, r1
 8001662:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	689a      	ldr	r2, [r3, #8]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4931      	ldr	r1, [pc, #196]	; (8001734 <HAL_I2C_Init+0x124>)
 8001670:	400a      	ands	r2, r1
 8001672:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	2b01      	cmp	r3, #1
 800167a:	d108      	bne.n	800168e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	689a      	ldr	r2, [r3, #8]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	2180      	movs	r1, #128	; 0x80
 8001686:	0209      	lsls	r1, r1, #8
 8001688:	430a      	orrs	r2, r1
 800168a:	609a      	str	r2, [r3, #8]
 800168c:	e007      	b.n	800169e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	689a      	ldr	r2, [r3, #8]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	2184      	movs	r1, #132	; 0x84
 8001698:	0209      	lsls	r1, r1, #8
 800169a:	430a      	orrs	r2, r1
 800169c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	68db      	ldr	r3, [r3, #12]
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d104      	bne.n	80016b0 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	2280      	movs	r2, #128	; 0x80
 80016ac:	0112      	lsls	r2, r2, #4
 80016ae:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	685a      	ldr	r2, [r3, #4]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	491f      	ldr	r1, [pc, #124]	; (8001738 <HAL_I2C_Init+0x128>)
 80016bc:	430a      	orrs	r2, r1
 80016be:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	68da      	ldr	r2, [r3, #12]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	491a      	ldr	r1, [pc, #104]	; (8001734 <HAL_I2C_Init+0x124>)
 80016cc:	400a      	ands	r2, r1
 80016ce:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	691a      	ldr	r2, [r3, #16]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	695b      	ldr	r3, [r3, #20]
 80016d8:	431a      	orrs	r2, r3
 80016da:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	699b      	ldr	r3, [r3, #24]
 80016e0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	430a      	orrs	r2, r1
 80016e8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	69d9      	ldr	r1, [r3, #28]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6a1a      	ldr	r2, [r3, #32]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	430a      	orrs	r2, r1
 80016f8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2101      	movs	r1, #1
 8001706:	430a      	orrs	r2, r1
 8001708:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2200      	movs	r2, #0
 800170e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2241      	movs	r2, #65	; 0x41
 8001714:	2120      	movs	r1, #32
 8001716:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2200      	movs	r2, #0
 800171c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2242      	movs	r2, #66	; 0x42
 8001722:	2100      	movs	r1, #0
 8001724:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001726:	2300      	movs	r3, #0
}
 8001728:	0018      	movs	r0, r3
 800172a:	46bd      	mov	sp, r7
 800172c:	b002      	add	sp, #8
 800172e:	bd80      	pop	{r7, pc}
 8001730:	f0ffffff 	.word	0xf0ffffff
 8001734:	ffff7fff 	.word	0xffff7fff
 8001738:	02008000 	.word	0x02008000

0800173c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	699b      	ldr	r3, [r3, #24]
 800174a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001758:	2b00      	cmp	r3, #0
 800175a:	d005      	beq.n	8001768 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001760:	68ba      	ldr	r2, [r7, #8]
 8001762:	68f9      	ldr	r1, [r7, #12]
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	4798      	blx	r3
  }
}
 8001768:	46c0      	nop			; (mov r8, r8)
 800176a:	46bd      	mov	sp, r7
 800176c:	b004      	add	sp, #16
 800176e:	bd80      	pop	{r7, pc}

08001770 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b086      	sub	sp, #24
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	699b      	ldr	r3, [r3, #24]
 800177e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001788:	697a      	ldr	r2, [r7, #20]
 800178a:	2380      	movs	r3, #128	; 0x80
 800178c:	005b      	lsls	r3, r3, #1
 800178e:	4013      	ands	r3, r2
 8001790:	d00e      	beq.n	80017b0 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	2280      	movs	r2, #128	; 0x80
 8001796:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001798:	d00a      	beq.n	80017b0 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800179e:	2201      	movs	r2, #1
 80017a0:	431a      	orrs	r2, r3
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	2280      	movs	r2, #128	; 0x80
 80017ac:	0052      	lsls	r2, r2, #1
 80017ae:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80017b0:	697a      	ldr	r2, [r7, #20]
 80017b2:	2380      	movs	r3, #128	; 0x80
 80017b4:	00db      	lsls	r3, r3, #3
 80017b6:	4013      	ands	r3, r2
 80017b8:	d00e      	beq.n	80017d8 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	2280      	movs	r2, #128	; 0x80
 80017be:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80017c0:	d00a      	beq.n	80017d8 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017c6:	2208      	movs	r2, #8
 80017c8:	431a      	orrs	r2, r3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	2280      	movs	r2, #128	; 0x80
 80017d4:	00d2      	lsls	r2, r2, #3
 80017d6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80017d8:	697a      	ldr	r2, [r7, #20]
 80017da:	2380      	movs	r3, #128	; 0x80
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	4013      	ands	r3, r2
 80017e0:	d00e      	beq.n	8001800 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	2280      	movs	r2, #128	; 0x80
 80017e6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80017e8:	d00a      	beq.n	8001800 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ee:	2202      	movs	r2, #2
 80017f0:	431a      	orrs	r2, r3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	2280      	movs	r2, #128	; 0x80
 80017fc:	0092      	lsls	r2, r2, #2
 80017fe:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001804:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	220b      	movs	r2, #11
 800180a:	4013      	ands	r3, r2
 800180c:	d005      	beq.n	800181a <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 800180e:	68fa      	ldr	r2, [r7, #12]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	0011      	movs	r1, r2
 8001814:	0018      	movs	r0, r3
 8001816:	f000 fbbd 	bl	8001f94 <I2C_ITError>
  }
}
 800181a:	46c0      	nop			; (mov r8, r8)
 800181c:	46bd      	mov	sp, r7
 800181e:	b006      	add	sp, #24
 8001820:	bd80      	pop	{r7, pc}

08001822 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001822:	b580      	push	{r7, lr}
 8001824:	b082      	sub	sp, #8
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800182a:	46c0      	nop			; (mov r8, r8)
 800182c:	46bd      	mov	sp, r7
 800182e:	b002      	add	sp, #8
 8001830:	bd80      	pop	{r7, pc}

08001832 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001832:	b580      	push	{r7, lr}
 8001834:	b082      	sub	sp, #8
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800183a:	46c0      	nop			; (mov r8, r8)
 800183c:	46bd      	mov	sp, r7
 800183e:	b002      	add	sp, #8
 8001840:	bd80      	pop	{r7, pc}

08001842 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001842:	b580      	push	{r7, lr}
 8001844:	b082      	sub	sp, #8
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
 800184a:	0008      	movs	r0, r1
 800184c:	0011      	movs	r1, r2
 800184e:	1cfb      	adds	r3, r7, #3
 8001850:	1c02      	adds	r2, r0, #0
 8001852:	701a      	strb	r2, [r3, #0]
 8001854:	003b      	movs	r3, r7
 8001856:	1c0a      	adds	r2, r1, #0
 8001858:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800185a:	46c0      	nop			; (mov r8, r8)
 800185c:	46bd      	mov	sp, r7
 800185e:	b002      	add	sp, #8
 8001860:	bd80      	pop	{r7, pc}

08001862 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001862:	b580      	push	{r7, lr}
 8001864:	b082      	sub	sp, #8
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800186a:	46c0      	nop			; (mov r8, r8)
 800186c:	46bd      	mov	sp, r7
 800186e:	b002      	add	sp, #8
 8001870:	bd80      	pop	{r7, pc}

08001872 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001872:	b580      	push	{r7, lr}
 8001874:	b082      	sub	sp, #8
 8001876:	af00      	add	r7, sp, #0
 8001878:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800187a:	46c0      	nop			; (mov r8, r8)
 800187c:	46bd      	mov	sp, r7
 800187e:	b002      	add	sp, #8
 8001880:	bd80      	pop	{r7, pc}

08001882 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001882:	b580      	push	{r7, lr}
 8001884:	b082      	sub	sp, #8
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800188a:	46c0      	nop			; (mov r8, r8)
 800188c:	46bd      	mov	sp, r7
 800188e:	b002      	add	sp, #8
 8001890:	bd80      	pop	{r7, pc}
	...

08001894 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b086      	sub	sp, #24
 8001898:	af00      	add	r7, sp, #0
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	60b9      	str	r1, [r7, #8]
 800189e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a4:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	2240      	movs	r2, #64	; 0x40
 80018ae:	5c9b      	ldrb	r3, [r3, r2]
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d101      	bne.n	80018b8 <I2C_Slave_ISR_IT+0x24>
 80018b4:	2302      	movs	r3, #2
 80018b6:	e0e6      	b.n	8001a86 <I2C_Slave_ISR_IT+0x1f2>
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	2240      	movs	r2, #64	; 0x40
 80018bc:	2101      	movs	r1, #1
 80018be:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	2220      	movs	r2, #32
 80018c4:	4013      	ands	r3, r2
 80018c6:	d009      	beq.n	80018dc <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2220      	movs	r2, #32
 80018cc:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80018ce:	d005      	beq.n	80018dc <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80018d0:	693a      	ldr	r2, [r7, #16]
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	0011      	movs	r1, r2
 80018d6:	0018      	movs	r0, r3
 80018d8:	f000 f9e4 	bl	8001ca4 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	2210      	movs	r2, #16
 80018e0:	4013      	ands	r3, r2
 80018e2:	d052      	beq.n	800198a <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2210      	movs	r2, #16
 80018e8:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80018ea:	d04e      	beq.n	800198a <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018f0:	b29b      	uxth	r3, r3
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d12d      	bne.n	8001952 <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	2241      	movs	r2, #65	; 0x41
 80018fa:	5c9b      	ldrb	r3, [r3, r2]
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	2b28      	cmp	r3, #40	; 0x28
 8001900:	d10b      	bne.n	800191a <I2C_Slave_ISR_IT+0x86>
 8001902:	697a      	ldr	r2, [r7, #20]
 8001904:	2380      	movs	r3, #128	; 0x80
 8001906:	049b      	lsls	r3, r3, #18
 8001908:	429a      	cmp	r2, r3
 800190a:	d106      	bne.n	800191a <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800190c:	693a      	ldr	r2, [r7, #16]
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	0011      	movs	r1, r2
 8001912:	0018      	movs	r0, r3
 8001914:	f000 fae6 	bl	8001ee4 <I2C_ITListenCplt>
 8001918:	e036      	b.n	8001988 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	2241      	movs	r2, #65	; 0x41
 800191e:	5c9b      	ldrb	r3, [r3, r2]
 8001920:	b2db      	uxtb	r3, r3
 8001922:	2b29      	cmp	r3, #41	; 0x29
 8001924:	d110      	bne.n	8001948 <I2C_Slave_ISR_IT+0xb4>
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	4a59      	ldr	r2, [pc, #356]	; (8001a90 <I2C_Slave_ISR_IT+0x1fc>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d00c      	beq.n	8001948 <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	2210      	movs	r2, #16
 8001934:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	0018      	movs	r0, r3
 800193a:	f000 fc56 	bl	80021ea <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	0018      	movs	r0, r3
 8001942:	f000 f94b 	bl	8001bdc <I2C_ITSlaveSeqCplt>
 8001946:	e01f      	b.n	8001988 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2210      	movs	r2, #16
 800194e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8001950:	e091      	b.n	8001a76 <I2C_Slave_ISR_IT+0x1e2>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	2210      	movs	r2, #16
 8001958:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800195e:	2204      	movs	r2, #4
 8001960:	431a      	orrs	r2, r3
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d005      	beq.n	8001978 <I2C_Slave_ISR_IT+0xe4>
 800196c:	697a      	ldr	r2, [r7, #20]
 800196e:	2380      	movs	r3, #128	; 0x80
 8001970:	045b      	lsls	r3, r3, #17
 8001972:	429a      	cmp	r2, r3
 8001974:	d000      	beq.n	8001978 <I2C_Slave_ISR_IT+0xe4>
 8001976:	e07e      	b.n	8001a76 <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	0011      	movs	r1, r2
 8001980:	0018      	movs	r0, r3
 8001982:	f000 fb07 	bl	8001f94 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001986:	e076      	b.n	8001a76 <I2C_Slave_ISR_IT+0x1e2>
 8001988:	e075      	b.n	8001a76 <I2C_Slave_ISR_IT+0x1e2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	2204      	movs	r2, #4
 800198e:	4013      	ands	r3, r2
 8001990:	d02f      	beq.n	80019f2 <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2204      	movs	r2, #4
 8001996:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001998:	d02b      	beq.n	80019f2 <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800199e:	b29b      	uxth	r3, r3
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d018      	beq.n	80019d6 <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ae:	b2d2      	uxtb	r2, r2
 80019b0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b6:	1c5a      	adds	r2, r3, #1
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019c0:	3b01      	subs	r3, #1
 80019c2:	b29a      	uxth	r2, r3
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019cc:	b29b      	uxth	r3, r3
 80019ce:	3b01      	subs	r3, #1
 80019d0:	b29a      	uxth	r2, r3
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019da:	b29b      	uxth	r3, r3
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d14c      	bne.n	8001a7a <I2C_Slave_ISR_IT+0x1e6>
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	4a2b      	ldr	r2, [pc, #172]	; (8001a90 <I2C_Slave_ISR_IT+0x1fc>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d048      	beq.n	8001a7a <I2C_Slave_ISR_IT+0x1e6>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	0018      	movs	r0, r3
 80019ec:	f000 f8f6 	bl	8001bdc <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80019f0:	e043      	b.n	8001a7a <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	2208      	movs	r2, #8
 80019f6:	4013      	ands	r3, r2
 80019f8:	d00a      	beq.n	8001a10 <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2208      	movs	r2, #8
 80019fe:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001a00:	d006      	beq.n	8001a10 <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8001a02:	693a      	ldr	r2, [r7, #16]
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	0011      	movs	r1, r2
 8001a08:	0018      	movs	r0, r3
 8001a0a:	f000 f843 	bl	8001a94 <I2C_ITAddrCplt>
 8001a0e:	e035      	b.n	8001a7c <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	2202      	movs	r2, #2
 8001a14:	4013      	ands	r3, r2
 8001a16:	d031      	beq.n	8001a7c <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2202      	movs	r2, #2
 8001a1c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001a1e:	d02d      	beq.n	8001a7c <I2C_Slave_ISR_IT+0x1e8>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d018      	beq.n	8001a5c <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2e:	781a      	ldrb	r2, [r3, #0]
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a3a:	1c5a      	adds	r2, r3, #1
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a44:	b29b      	uxth	r3, r3
 8001a46:	3b01      	subs	r3, #1
 8001a48:	b29a      	uxth	r2, r3
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a52:	3b01      	subs	r3, #1
 8001a54:	b29a      	uxth	r2, r3
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	851a      	strh	r2, [r3, #40]	; 0x28
 8001a5a:	e00f      	b.n	8001a7c <I2C_Slave_ISR_IT+0x1e8>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8001a5c:	697a      	ldr	r2, [r7, #20]
 8001a5e:	2380      	movs	r3, #128	; 0x80
 8001a60:	045b      	lsls	r3, r3, #17
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d002      	beq.n	8001a6c <I2C_Slave_ISR_IT+0x1d8>
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d107      	bne.n	8001a7c <I2C_Slave_ISR_IT+0x1e8>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	0018      	movs	r0, r3
 8001a70:	f000 f8b4 	bl	8001bdc <I2C_ITSlaveSeqCplt>
 8001a74:	e002      	b.n	8001a7c <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 8001a76:	46c0      	nop			; (mov r8, r8)
 8001a78:	e000      	b.n	8001a7c <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 8001a7a:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	2240      	movs	r2, #64	; 0x40
 8001a80:	2100      	movs	r1, #0
 8001a82:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001a84:	2300      	movs	r3, #0
}
 8001a86:	0018      	movs	r0, r3
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	b006      	add	sp, #24
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	46c0      	nop			; (mov r8, r8)
 8001a90:	ffff0000 	.word	0xffff0000

08001a94 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001a94:	b5b0      	push	{r4, r5, r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2241      	movs	r2, #65	; 0x41
 8001aa2:	5c9b      	ldrb	r3, [r3, r2]
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	001a      	movs	r2, r3
 8001aa8:	2328      	movs	r3, #40	; 0x28
 8001aaa:	4013      	ands	r3, r2
 8001aac:	2b28      	cmp	r3, #40	; 0x28
 8001aae:	d000      	beq.n	8001ab2 <I2C_ITAddrCplt+0x1e>
 8001ab0:	e088      	b.n	8001bc4 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	699b      	ldr	r3, [r3, #24]
 8001ab8:	0c1b      	lsrs	r3, r3, #16
 8001aba:	b2da      	uxtb	r2, r3
 8001abc:	250f      	movs	r5, #15
 8001abe:	197b      	adds	r3, r7, r5
 8001ac0:	2101      	movs	r1, #1
 8001ac2:	400a      	ands	r2, r1
 8001ac4:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	699b      	ldr	r3, [r3, #24]
 8001acc:	0c1b      	lsrs	r3, r3, #16
 8001ace:	b29a      	uxth	r2, r3
 8001ad0:	200c      	movs	r0, #12
 8001ad2:	183b      	adds	r3, r7, r0
 8001ad4:	21fe      	movs	r1, #254	; 0xfe
 8001ad6:	400a      	ands	r2, r1
 8001ad8:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	b29a      	uxth	r2, r3
 8001ae2:	240a      	movs	r4, #10
 8001ae4:	193b      	adds	r3, r7, r4
 8001ae6:	0592      	lsls	r2, r2, #22
 8001ae8:	0d92      	lsrs	r2, r2, #22
 8001aea:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	68db      	ldr	r3, [r3, #12]
 8001af2:	b29a      	uxth	r2, r3
 8001af4:	2308      	movs	r3, #8
 8001af6:	18fb      	adds	r3, r7, r3
 8001af8:	21fe      	movs	r1, #254	; 0xfe
 8001afa:	400a      	ands	r2, r1
 8001afc:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	68db      	ldr	r3, [r3, #12]
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d148      	bne.n	8001b98 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8001b06:	0021      	movs	r1, r4
 8001b08:	187b      	adds	r3, r7, r1
 8001b0a:	881b      	ldrh	r3, [r3, #0]
 8001b0c:	09db      	lsrs	r3, r3, #7
 8001b0e:	b29a      	uxth	r2, r3
 8001b10:	183b      	adds	r3, r7, r0
 8001b12:	881b      	ldrh	r3, [r3, #0]
 8001b14:	4053      	eors	r3, r2
 8001b16:	b29b      	uxth	r3, r3
 8001b18:	001a      	movs	r2, r3
 8001b1a:	2306      	movs	r3, #6
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	d120      	bne.n	8001b62 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8001b20:	183b      	adds	r3, r7, r0
 8001b22:	187a      	adds	r2, r7, r1
 8001b24:	8812      	ldrh	r2, [r2, #0]
 8001b26:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b2c:	1c5a      	adds	r2, r3, #1
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d14c      	bne.n	8001bd4 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2208      	movs	r2, #8
 8001b46:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2240      	movs	r2, #64	; 0x40
 8001b4c:	2100      	movs	r1, #0
 8001b4e:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001b50:	183b      	adds	r3, r7, r0
 8001b52:	881a      	ldrh	r2, [r3, #0]
 8001b54:	197b      	adds	r3, r7, r5
 8001b56:	7819      	ldrb	r1, [r3, #0]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	0018      	movs	r0, r3
 8001b5c:	f7ff fe71 	bl	8001842 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8001b60:	e038      	b.n	8001bd4 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8001b62:	240c      	movs	r4, #12
 8001b64:	193b      	adds	r3, r7, r4
 8001b66:	2208      	movs	r2, #8
 8001b68:	18ba      	adds	r2, r7, r2
 8001b6a:	8812      	ldrh	r2, [r2, #0]
 8001b6c:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001b6e:	2380      	movs	r3, #128	; 0x80
 8001b70:	021a      	lsls	r2, r3, #8
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	0011      	movs	r1, r2
 8001b76:	0018      	movs	r0, r3
 8001b78:	f000 fb78 	bl	800226c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2240      	movs	r2, #64	; 0x40
 8001b80:	2100      	movs	r1, #0
 8001b82:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001b84:	193b      	adds	r3, r7, r4
 8001b86:	881a      	ldrh	r2, [r3, #0]
 8001b88:	230f      	movs	r3, #15
 8001b8a:	18fb      	adds	r3, r7, r3
 8001b8c:	7819      	ldrb	r1, [r3, #0]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	0018      	movs	r0, r3
 8001b92:	f7ff fe56 	bl	8001842 <HAL_I2C_AddrCallback>
}
 8001b96:	e01d      	b.n	8001bd4 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001b98:	2380      	movs	r3, #128	; 0x80
 8001b9a:	021a      	lsls	r2, r3, #8
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	0011      	movs	r1, r2
 8001ba0:	0018      	movs	r0, r3
 8001ba2:	f000 fb63 	bl	800226c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2240      	movs	r2, #64	; 0x40
 8001baa:	2100      	movs	r1, #0
 8001bac:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001bae:	230c      	movs	r3, #12
 8001bb0:	18fb      	adds	r3, r7, r3
 8001bb2:	881a      	ldrh	r2, [r3, #0]
 8001bb4:	230f      	movs	r3, #15
 8001bb6:	18fb      	adds	r3, r7, r3
 8001bb8:	7819      	ldrb	r1, [r3, #0]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	0018      	movs	r0, r3
 8001bbe:	f7ff fe40 	bl	8001842 <HAL_I2C_AddrCallback>
}
 8001bc2:	e007      	b.n	8001bd4 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2208      	movs	r2, #8
 8001bca:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2240      	movs	r2, #64	; 0x40
 8001bd0:	2100      	movs	r1, #0
 8001bd2:	5499      	strb	r1, [r3, r2]
}
 8001bd4:	46c0      	nop			; (mov r8, r8)
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	b004      	add	sp, #16
 8001bda:	bdb0      	pop	{r4, r5, r7, pc}

08001bdc <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2242      	movs	r2, #66	; 0x42
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001bf4:	68fa      	ldr	r2, [r7, #12]
 8001bf6:	2380      	movs	r3, #128	; 0x80
 8001bf8:	01db      	lsls	r3, r3, #7
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	d008      	beq.n	8001c10 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4924      	ldr	r1, [pc, #144]	; (8001c9c <I2C_ITSlaveSeqCplt+0xc0>)
 8001c0a:	400a      	ands	r2, r1
 8001c0c:	601a      	str	r2, [r3, #0]
 8001c0e:	e00c      	b.n	8001c2a <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001c10:	68fa      	ldr	r2, [r7, #12]
 8001c12:	2380      	movs	r3, #128	; 0x80
 8001c14:	021b      	lsls	r3, r3, #8
 8001c16:	4013      	ands	r3, r2
 8001c18:	d007      	beq.n	8001c2a <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	491e      	ldr	r1, [pc, #120]	; (8001ca0 <I2C_ITSlaveSeqCplt+0xc4>)
 8001c26:	400a      	ands	r2, r1
 8001c28:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2241      	movs	r2, #65	; 0x41
 8001c2e:	5c9b      	ldrb	r3, [r3, r2]
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	2b29      	cmp	r3, #41	; 0x29
 8001c34:	d114      	bne.n	8001c60 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2241      	movs	r2, #65	; 0x41
 8001c3a:	2128      	movs	r1, #40	; 0x28
 8001c3c:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2221      	movs	r2, #33	; 0x21
 8001c42:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2101      	movs	r1, #1
 8001c48:	0018      	movs	r0, r3
 8001c4a:	f000 fb0f 	bl	800226c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2240      	movs	r2, #64	; 0x40
 8001c52:	2100      	movs	r1, #0
 8001c54:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	0018      	movs	r0, r3
 8001c5a:	f7ff fde2 	bl	8001822 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8001c5e:	e019      	b.n	8001c94 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2241      	movs	r2, #65	; 0x41
 8001c64:	5c9b      	ldrb	r3, [r3, r2]
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	2b2a      	cmp	r3, #42	; 0x2a
 8001c6a:	d113      	bne.n	8001c94 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2241      	movs	r2, #65	; 0x41
 8001c70:	2128      	movs	r1, #40	; 0x28
 8001c72:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2222      	movs	r2, #34	; 0x22
 8001c78:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2102      	movs	r1, #2
 8001c7e:	0018      	movs	r0, r3
 8001c80:	f000 faf4 	bl	800226c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2240      	movs	r2, #64	; 0x40
 8001c88:	2100      	movs	r1, #0
 8001c8a:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	0018      	movs	r0, r3
 8001c90:	f7ff fdcf 	bl	8001832 <HAL_I2C_SlaveRxCpltCallback>
}
 8001c94:	46c0      	nop			; (mov r8, r8)
 8001c96:	46bd      	mov	sp, r7
 8001c98:	b004      	add	sp, #16
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	ffffbfff 	.word	0xffffbfff
 8001ca0:	ffff7fff 	.word	0xffff7fff

08001ca4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b086      	sub	sp, #24
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8001cba:	200f      	movs	r0, #15
 8001cbc:	183b      	adds	r3, r7, r0
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	2141      	movs	r1, #65	; 0x41
 8001cc2:	5c52      	ldrb	r2, [r2, r1]
 8001cc4:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	2220      	movs	r2, #32
 8001ccc:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001cce:	183b      	adds	r3, r7, r0
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	2b21      	cmp	r3, #33	; 0x21
 8001cd4:	d003      	beq.n	8001cde <I2C_ITSlaveCplt+0x3a>
 8001cd6:	183b      	adds	r3, r7, r0
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	2b29      	cmp	r3, #41	; 0x29
 8001cdc:	d109      	bne.n	8001cf2 <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8001cde:	4a7b      	ldr	r2, [pc, #492]	; (8001ecc <I2C_ITSlaveCplt+0x228>)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	0011      	movs	r1, r2
 8001ce4:	0018      	movs	r0, r3
 8001ce6:	f000 fac1 	bl	800226c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2221      	movs	r2, #33	; 0x21
 8001cee:	631a      	str	r2, [r3, #48]	; 0x30
 8001cf0:	e011      	b.n	8001d16 <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001cf2:	220f      	movs	r2, #15
 8001cf4:	18bb      	adds	r3, r7, r2
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	2b22      	cmp	r3, #34	; 0x22
 8001cfa:	d003      	beq.n	8001d04 <I2C_ITSlaveCplt+0x60>
 8001cfc:	18bb      	adds	r3, r7, r2
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	2b2a      	cmp	r3, #42	; 0x2a
 8001d02:	d108      	bne.n	8001d16 <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8001d04:	4a72      	ldr	r2, [pc, #456]	; (8001ed0 <I2C_ITSlaveCplt+0x22c>)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	0011      	movs	r1, r2
 8001d0a:	0018      	movs	r0, r3
 8001d0c:	f000 faae 	bl	800226c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2222      	movs	r2, #34	; 0x22
 8001d14:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	685a      	ldr	r2, [r3, #4]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2180      	movs	r1, #128	; 0x80
 8001d22:	0209      	lsls	r1, r1, #8
 8001d24:	430a      	orrs	r2, r1
 8001d26:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	685a      	ldr	r2, [r3, #4]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4968      	ldr	r1, [pc, #416]	; (8001ed4 <I2C_ITSlaveCplt+0x230>)
 8001d34:	400a      	ands	r2, r1
 8001d36:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	0018      	movs	r0, r3
 8001d3c:	f000 fa55 	bl	80021ea <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001d40:	693a      	ldr	r2, [r7, #16]
 8001d42:	2380      	movs	r3, #128	; 0x80
 8001d44:	01db      	lsls	r3, r3, #7
 8001d46:	4013      	ands	r3, r2
 8001d48:	d013      	beq.n	8001d72 <I2C_ITSlaveCplt+0xce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4960      	ldr	r1, [pc, #384]	; (8001ed8 <I2C_ITSlaveCplt+0x234>)
 8001d56:	400a      	ands	r2, r1
 8001d58:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d01f      	beq.n	8001da2 <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	b29a      	uxth	r2, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001d70:	e017      	b.n	8001da2 <I2C_ITSlaveCplt+0xfe>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001d72:	693a      	ldr	r2, [r7, #16]
 8001d74:	2380      	movs	r3, #128	; 0x80
 8001d76:	021b      	lsls	r3, r3, #8
 8001d78:	4013      	ands	r3, r2
 8001d7a:	d012      	beq.n	8001da2 <I2C_ITSlaveCplt+0xfe>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4955      	ldr	r1, [pc, #340]	; (8001edc <I2C_ITSlaveCplt+0x238>)
 8001d88:	400a      	ands	r2, r1
 8001d8a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d006      	beq.n	8001da2 <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	b29a      	uxth	r2, r3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	2204      	movs	r2, #4
 8001da6:	4013      	ands	r3, r2
 8001da8:	d020      	beq.n	8001dec <I2C_ITSlaveCplt+0x148>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	2204      	movs	r2, #4
 8001dae:	4393      	bics	r3, r2
 8001db0:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dbc:	b2d2      	uxtb	r2, r2
 8001dbe:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc4:	1c5a      	adds	r2, r3, #1
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d00c      	beq.n	8001dec <I2C_ITSlaveCplt+0x148>
    {
      hi2c->XferSize--;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	b29a      	uxth	r2, r3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001de2:	b29b      	uxth	r3, r3
 8001de4:	3b01      	subs	r3, #1
 8001de6:	b29a      	uxth	r2, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001df0:	b29b      	uxth	r3, r3
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d005      	beq.n	8001e02 <I2C_ITSlaveCplt+0x15e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dfa:	2204      	movs	r2, #4
 8001dfc:	431a      	orrs	r2, r3
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2242      	movs	r2, #66	; 0x42
 8001e06:	2100      	movs	r1, #0
 8001e08:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d013      	beq.n	8001e40 <I2C_ITSlaveCplt+0x19c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	0011      	movs	r1, r2
 8001e20:	0018      	movs	r0, r3
 8001e22:	f000 f8b7 	bl	8001f94 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2241      	movs	r2, #65	; 0x41
 8001e2a:	5c9b      	ldrb	r3, [r3, r2]
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	2b28      	cmp	r3, #40	; 0x28
 8001e30:	d147      	bne.n	8001ec2 <I2C_ITSlaveCplt+0x21e>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8001e32:	697a      	ldr	r2, [r7, #20]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	0011      	movs	r1, r2
 8001e38:	0018      	movs	r0, r3
 8001e3a:	f000 f853 	bl	8001ee4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8001e3e:	e040      	b.n	8001ec2 <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e44:	4a26      	ldr	r2, [pc, #152]	; (8001ee0 <I2C_ITSlaveCplt+0x23c>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d016      	beq.n	8001e78 <I2C_ITSlaveCplt+0x1d4>
    I2C_ITSlaveSeqCplt(hi2c);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	0018      	movs	r0, r3
 8001e4e:	f7ff fec5 	bl	8001bdc <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a22      	ldr	r2, [pc, #136]	; (8001ee0 <I2C_ITSlaveCplt+0x23c>)
 8001e56:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2241      	movs	r2, #65	; 0x41
 8001e5c:	2120      	movs	r1, #32
 8001e5e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2240      	movs	r2, #64	; 0x40
 8001e6a:	2100      	movs	r1, #0
 8001e6c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	0018      	movs	r0, r3
 8001e72:	f7ff fcf6 	bl	8001862 <HAL_I2C_ListenCpltCallback>
}
 8001e76:	e024      	b.n	8001ec2 <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2241      	movs	r2, #65	; 0x41
 8001e7c:	5c9b      	ldrb	r3, [r3, r2]
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	2b22      	cmp	r3, #34	; 0x22
 8001e82:	d10f      	bne.n	8001ea4 <I2C_ITSlaveCplt+0x200>
    hi2c->State = HAL_I2C_STATE_READY;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2241      	movs	r2, #65	; 0x41
 8001e88:	2120      	movs	r1, #32
 8001e8a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2240      	movs	r2, #64	; 0x40
 8001e96:	2100      	movs	r1, #0
 8001e98:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	0018      	movs	r0, r3
 8001e9e:	f7ff fcc8 	bl	8001832 <HAL_I2C_SlaveRxCpltCallback>
}
 8001ea2:	e00e      	b.n	8001ec2 <I2C_ITSlaveCplt+0x21e>
    hi2c->State = HAL_I2C_STATE_READY;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2241      	movs	r2, #65	; 0x41
 8001ea8:	2120      	movs	r1, #32
 8001eaa:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2240      	movs	r2, #64	; 0x40
 8001eb6:	2100      	movs	r1, #0
 8001eb8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	0018      	movs	r0, r3
 8001ebe:	f7ff fcb0 	bl	8001822 <HAL_I2C_SlaveTxCpltCallback>
}
 8001ec2:	46c0      	nop			; (mov r8, r8)
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	b006      	add	sp, #24
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	46c0      	nop			; (mov r8, r8)
 8001ecc:	00008001 	.word	0x00008001
 8001ed0:	00008002 	.word	0x00008002
 8001ed4:	fe00e800 	.word	0xfe00e800
 8001ed8:	ffffbfff 	.word	0xffffbfff
 8001edc:	ffff7fff 	.word	0xffff7fff
 8001ee0:	ffff0000 	.word	0xffff0000

08001ee4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a26      	ldr	r2, [pc, #152]	; (8001f8c <I2C_ITListenCplt+0xa8>)
 8001ef2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2241      	movs	r2, #65	; 0x41
 8001efe:	2120      	movs	r1, #32
 8001f00:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2242      	movs	r2, #66	; 0x42
 8001f06:	2100      	movs	r1, #0
 8001f08:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	2204      	movs	r2, #4
 8001f14:	4013      	ands	r3, r2
 8001f16:	d022      	beq.n	8001f5e <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f22:	b2d2      	uxtb	r2, r2
 8001f24:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f2a:	1c5a      	adds	r2, r3, #1
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d012      	beq.n	8001f5e <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f3c:	3b01      	subs	r3, #1
 8001f3e:	b29a      	uxth	r2, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f48:	b29b      	uxth	r3, r3
 8001f4a:	3b01      	subs	r3, #1
 8001f4c:	b29a      	uxth	r2, r3
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f56:	2204      	movs	r2, #4
 8001f58:	431a      	orrs	r2, r3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001f5e:	4a0c      	ldr	r2, [pc, #48]	; (8001f90 <I2C_ITListenCplt+0xac>)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	0011      	movs	r1, r2
 8001f64:	0018      	movs	r0, r3
 8001f66:	f000 f981 	bl	800226c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	2210      	movs	r2, #16
 8001f70:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2240      	movs	r2, #64	; 0x40
 8001f76:	2100      	movs	r1, #0
 8001f78:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	0018      	movs	r0, r3
 8001f7e:	f7ff fc70 	bl	8001862 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8001f82:	46c0      	nop			; (mov r8, r8)
 8001f84:	46bd      	mov	sp, r7
 8001f86:	b002      	add	sp, #8
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	46c0      	nop			; (mov r8, r8)
 8001f8c:	ffff0000 	.word	0xffff0000
 8001f90:	00008003 	.word	0x00008003

08001f94 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8001f9e:	200f      	movs	r0, #15
 8001fa0:	183b      	adds	r3, r7, r0
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	2141      	movs	r1, #65	; 0x41
 8001fa6:	5c52      	ldrb	r2, [r2, r1]
 8001fa8:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2242      	movs	r2, #66	; 0x42
 8001fae:	2100      	movs	r1, #0
 8001fb0:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a72      	ldr	r2, [pc, #456]	; (8002180 <I2C_ITError+0x1ec>)
 8001fb6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	431a      	orrs	r2, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8001fca:	183b      	adds	r3, r7, r0
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	2b28      	cmp	r3, #40	; 0x28
 8001fd0:	d007      	beq.n	8001fe2 <I2C_ITError+0x4e>
 8001fd2:	183b      	adds	r3, r7, r0
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	2b29      	cmp	r3, #41	; 0x29
 8001fd8:	d003      	beq.n	8001fe2 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8001fda:	183b      	adds	r3, r7, r0
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	2b2a      	cmp	r3, #42	; 0x2a
 8001fe0:	d10c      	bne.n	8001ffc <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2103      	movs	r1, #3
 8001fe6:	0018      	movs	r0, r3
 8001fe8:	f000 f940 	bl	800226c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2241      	movs	r2, #65	; 0x41
 8001ff0:	2128      	movs	r1, #40	; 0x28
 8001ff2:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	4a63      	ldr	r2, [pc, #396]	; (8002184 <I2C_ITError+0x1f0>)
 8001ff8:	635a      	str	r2, [r3, #52]	; 0x34
 8001ffa:	e032      	b.n	8002062 <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001ffc:	4a62      	ldr	r2, [pc, #392]	; (8002188 <I2C_ITError+0x1f4>)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	0011      	movs	r1, r2
 8002002:	0018      	movs	r0, r3
 8002004:	f000 f932 	bl	800226c <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	0018      	movs	r0, r3
 800200c:	f000 f8ed 	bl	80021ea <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2241      	movs	r2, #65	; 0x41
 8002014:	5c9b      	ldrb	r3, [r3, r2]
 8002016:	b2db      	uxtb	r3, r3
 8002018:	2b60      	cmp	r3, #96	; 0x60
 800201a:	d01f      	beq.n	800205c <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2241      	movs	r2, #65	; 0x41
 8002020:	2120      	movs	r1, #32
 8002022:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	699b      	ldr	r3, [r3, #24]
 800202a:	2220      	movs	r2, #32
 800202c:	4013      	ands	r3, r2
 800202e:	2b20      	cmp	r3, #32
 8002030:	d114      	bne.n	800205c <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	699b      	ldr	r3, [r3, #24]
 8002038:	2210      	movs	r2, #16
 800203a:	4013      	ands	r3, r2
 800203c:	2b10      	cmp	r3, #16
 800203e:	d109      	bne.n	8002054 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	2210      	movs	r2, #16
 8002046:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800204c:	2204      	movs	r2, #4
 800204e:	431a      	orrs	r2, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2220      	movs	r2, #32
 800205a:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2200      	movs	r2, #0
 8002060:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002066:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800206c:	2b00      	cmp	r3, #0
 800206e:	d03b      	beq.n	80020e8 <I2C_ITError+0x154>
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	2b11      	cmp	r3, #17
 8002074:	d002      	beq.n	800207c <I2C_ITError+0xe8>
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	2b21      	cmp	r3, #33	; 0x21
 800207a:	d135      	bne.n	80020e8 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	2380      	movs	r3, #128	; 0x80
 8002084:	01db      	lsls	r3, r3, #7
 8002086:	401a      	ands	r2, r3
 8002088:	2380      	movs	r3, #128	; 0x80
 800208a:	01db      	lsls	r3, r3, #7
 800208c:	429a      	cmp	r2, r3
 800208e:	d107      	bne.n	80020a0 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	493c      	ldr	r1, [pc, #240]	; (800218c <I2C_ITError+0x1f8>)
 800209c:	400a      	ands	r2, r1
 800209e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020a4:	0018      	movs	r0, r3
 80020a6:	f7ff f8fc 	bl	80012a2 <HAL_DMA_GetState>
 80020aa:	0003      	movs	r3, r0
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d016      	beq.n	80020de <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020b4:	4a36      	ldr	r2, [pc, #216]	; (8002190 <I2C_ITError+0x1fc>)
 80020b6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2240      	movs	r2, #64	; 0x40
 80020bc:	2100      	movs	r1, #0
 80020be:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020c4:	0018      	movs	r0, r3
 80020c6:	f7ff f805 	bl	80010d4 <HAL_DMA_Abort_IT>
 80020ca:	1e03      	subs	r3, r0, #0
 80020cc:	d051      	beq.n	8002172 <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020d8:	0018      	movs	r0, r3
 80020da:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80020dc:	e049      	b.n	8002172 <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	0018      	movs	r0, r3
 80020e2:	f000 f859 	bl	8002198 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80020e6:	e044      	b.n	8002172 <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d03b      	beq.n	8002168 <I2C_ITError+0x1d4>
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	2b12      	cmp	r3, #18
 80020f4:	d002      	beq.n	80020fc <I2C_ITError+0x168>
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	2b22      	cmp	r3, #34	; 0x22
 80020fa:	d135      	bne.n	8002168 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	2380      	movs	r3, #128	; 0x80
 8002104:	021b      	lsls	r3, r3, #8
 8002106:	401a      	ands	r2, r3
 8002108:	2380      	movs	r3, #128	; 0x80
 800210a:	021b      	lsls	r3, r3, #8
 800210c:	429a      	cmp	r2, r3
 800210e:	d107      	bne.n	8002120 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	491e      	ldr	r1, [pc, #120]	; (8002194 <I2C_ITError+0x200>)
 800211c:	400a      	ands	r2, r1
 800211e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002124:	0018      	movs	r0, r3
 8002126:	f7ff f8bc 	bl	80012a2 <HAL_DMA_GetState>
 800212a:	0003      	movs	r3, r0
 800212c:	2b01      	cmp	r3, #1
 800212e:	d016      	beq.n	800215e <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002134:	4a16      	ldr	r2, [pc, #88]	; (8002190 <I2C_ITError+0x1fc>)
 8002136:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2240      	movs	r2, #64	; 0x40
 800213c:	2100      	movs	r1, #0
 800213e:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002144:	0018      	movs	r0, r3
 8002146:	f7fe ffc5 	bl	80010d4 <HAL_DMA_Abort_IT>
 800214a:	1e03      	subs	r3, r0, #0
 800214c:	d013      	beq.n	8002176 <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002152:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002158:	0018      	movs	r0, r3
 800215a:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800215c:	e00b      	b.n	8002176 <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	0018      	movs	r0, r3
 8002162:	f000 f819 	bl	8002198 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002166:	e006      	b.n	8002176 <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	0018      	movs	r0, r3
 800216c:	f000 f814 	bl	8002198 <I2C_TreatErrorCallback>
  }
}
 8002170:	e002      	b.n	8002178 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002172:	46c0      	nop			; (mov r8, r8)
 8002174:	e000      	b.n	8002178 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002176:	46c0      	nop			; (mov r8, r8)
}
 8002178:	46c0      	nop			; (mov r8, r8)
 800217a:	46bd      	mov	sp, r7
 800217c:	b004      	add	sp, #16
 800217e:	bd80      	pop	{r7, pc}
 8002180:	ffff0000 	.word	0xffff0000
 8002184:	08001895 	.word	0x08001895
 8002188:	00008003 	.word	0x00008003
 800218c:	ffffbfff 	.word	0xffffbfff
 8002190:	0800222f 	.word	0x0800222f
 8002194:	ffff7fff 	.word	0xffff7fff

08002198 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2241      	movs	r2, #65	; 0x41
 80021a4:	5c9b      	ldrb	r3, [r3, r2]
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	2b60      	cmp	r3, #96	; 0x60
 80021aa:	d10f      	bne.n	80021cc <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2241      	movs	r2, #65	; 0x41
 80021b0:	2120      	movs	r1, #32
 80021b2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2200      	movs	r2, #0
 80021b8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2240      	movs	r2, #64	; 0x40
 80021be:	2100      	movs	r1, #0
 80021c0:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	0018      	movs	r0, r3
 80021c6:	f7ff fb5c 	bl	8001882 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80021ca:	e00a      	b.n	80021e2 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2200      	movs	r2, #0
 80021d0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2240      	movs	r2, #64	; 0x40
 80021d6:	2100      	movs	r1, #0
 80021d8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	0018      	movs	r0, r3
 80021de:	f7ff fb48 	bl	8001872 <HAL_I2C_ErrorCallback>
}
 80021e2:	46c0      	nop			; (mov r8, r8)
 80021e4:	46bd      	mov	sp, r7
 80021e6:	b002      	add	sp, #8
 80021e8:	bd80      	pop	{r7, pc}

080021ea <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80021ea:	b580      	push	{r7, lr}
 80021ec:	b082      	sub	sp, #8
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	699b      	ldr	r3, [r3, #24]
 80021f8:	2202      	movs	r2, #2
 80021fa:	4013      	ands	r3, r2
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	d103      	bne.n	8002208 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2200      	movs	r2, #0
 8002206:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	699b      	ldr	r3, [r3, #24]
 800220e:	2201      	movs	r2, #1
 8002210:	4013      	ands	r3, r2
 8002212:	2b01      	cmp	r3, #1
 8002214:	d007      	beq.n	8002226 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	699a      	ldr	r2, [r3, #24]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2101      	movs	r1, #1
 8002222:	430a      	orrs	r2, r1
 8002224:	619a      	str	r2, [r3, #24]
  }
}
 8002226:	46c0      	nop			; (mov r8, r8)
 8002228:	46bd      	mov	sp, r7
 800222a:	b002      	add	sp, #8
 800222c:	bd80      	pop	{r7, pc}

0800222e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800222e:	b580      	push	{r7, lr}
 8002230:	b084      	sub	sp, #16
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002240:	2b00      	cmp	r3, #0
 8002242:	d003      	beq.n	800224c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002248:	2200      	movs	r2, #0
 800224a:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002250:	2b00      	cmp	r3, #0
 8002252:	d003      	beq.n	800225c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002258:	2200      	movs	r2, #0
 800225a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	0018      	movs	r0, r3
 8002260:	f7ff ff9a 	bl	8002198 <I2C_TreatErrorCallback>
}
 8002264:	46c0      	nop			; (mov r8, r8)
 8002266:	46bd      	mov	sp, r7
 8002268:	b004      	add	sp, #16
 800226a:	bd80      	pop	{r7, pc}

0800226c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b084      	sub	sp, #16
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	000a      	movs	r2, r1
 8002276:	1cbb      	adds	r3, r7, #2
 8002278:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800227a:	2300      	movs	r3, #0
 800227c:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800227e:	1cbb      	adds	r3, r7, #2
 8002280:	881b      	ldrh	r3, [r3, #0]
 8002282:	2201      	movs	r2, #1
 8002284:	4013      	ands	r3, r2
 8002286:	d010      	beq.n	80022aa <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2242      	movs	r2, #66	; 0x42
 800228c:	4313      	orrs	r3, r2
 800228e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2241      	movs	r2, #65	; 0x41
 8002294:	5c9b      	ldrb	r3, [r3, r2]
 8002296:	b2db      	uxtb	r3, r3
 8002298:	001a      	movs	r2, r3
 800229a:	2328      	movs	r3, #40	; 0x28
 800229c:	4013      	ands	r3, r2
 800229e:	2b28      	cmp	r3, #40	; 0x28
 80022a0:	d003      	beq.n	80022aa <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	22b0      	movs	r2, #176	; 0xb0
 80022a6:	4313      	orrs	r3, r2
 80022a8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80022aa:	1cbb      	adds	r3, r7, #2
 80022ac:	881b      	ldrh	r3, [r3, #0]
 80022ae:	2202      	movs	r2, #2
 80022b0:	4013      	ands	r3, r2
 80022b2:	d010      	beq.n	80022d6 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2244      	movs	r2, #68	; 0x44
 80022b8:	4313      	orrs	r3, r2
 80022ba:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2241      	movs	r2, #65	; 0x41
 80022c0:	5c9b      	ldrb	r3, [r3, r2]
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	001a      	movs	r2, r3
 80022c6:	2328      	movs	r3, #40	; 0x28
 80022c8:	4013      	ands	r3, r2
 80022ca:	2b28      	cmp	r3, #40	; 0x28
 80022cc:	d003      	beq.n	80022d6 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	22b0      	movs	r2, #176	; 0xb0
 80022d2:	4313      	orrs	r3, r2
 80022d4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80022d6:	1cbb      	adds	r3, r7, #2
 80022d8:	2200      	movs	r2, #0
 80022da:	5e9b      	ldrsh	r3, [r3, r2]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	da03      	bge.n	80022e8 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	22b8      	movs	r2, #184	; 0xb8
 80022e4:	4313      	orrs	r3, r2
 80022e6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80022e8:	1cbb      	adds	r3, r7, #2
 80022ea:	881b      	ldrh	r3, [r3, #0]
 80022ec:	2b10      	cmp	r3, #16
 80022ee:	d103      	bne.n	80022f8 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2290      	movs	r2, #144	; 0x90
 80022f4:	4313      	orrs	r3, r2
 80022f6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80022f8:	1cbb      	adds	r3, r7, #2
 80022fa:	881b      	ldrh	r3, [r3, #0]
 80022fc:	2b20      	cmp	r3, #32
 80022fe:	d103      	bne.n	8002308 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2220      	movs	r2, #32
 8002304:	4313      	orrs	r3, r2
 8002306:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002308:	1cbb      	adds	r3, r7, #2
 800230a:	881b      	ldrh	r3, [r3, #0]
 800230c:	2b40      	cmp	r3, #64	; 0x40
 800230e:	d103      	bne.n	8002318 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2240      	movs	r2, #64	; 0x40
 8002314:	4313      	orrs	r3, r2
 8002316:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	43d9      	mvns	r1, r3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	400a      	ands	r2, r1
 8002328:	601a      	str	r2, [r3, #0]
}
 800232a:	46c0      	nop			; (mov r8, r8)
 800232c:	46bd      	mov	sp, r7
 800232e:	b004      	add	sp, #16
 8002330:	bd80      	pop	{r7, pc}
	...

08002334 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2241      	movs	r2, #65	; 0x41
 8002342:	5c9b      	ldrb	r3, [r3, r2]
 8002344:	b2db      	uxtb	r3, r3
 8002346:	2b20      	cmp	r3, #32
 8002348:	d138      	bne.n	80023bc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2240      	movs	r2, #64	; 0x40
 800234e:	5c9b      	ldrb	r3, [r3, r2]
 8002350:	2b01      	cmp	r3, #1
 8002352:	d101      	bne.n	8002358 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002354:	2302      	movs	r3, #2
 8002356:	e032      	b.n	80023be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2240      	movs	r2, #64	; 0x40
 800235c:	2101      	movs	r1, #1
 800235e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2241      	movs	r2, #65	; 0x41
 8002364:	2124      	movs	r1, #36	; 0x24
 8002366:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	2101      	movs	r1, #1
 8002374:	438a      	bics	r2, r1
 8002376:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4911      	ldr	r1, [pc, #68]	; (80023c8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002384:	400a      	ands	r2, r1
 8002386:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	6819      	ldr	r1, [r3, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	683a      	ldr	r2, [r7, #0]
 8002394:	430a      	orrs	r2, r1
 8002396:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	2101      	movs	r1, #1
 80023a4:	430a      	orrs	r2, r1
 80023a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2241      	movs	r2, #65	; 0x41
 80023ac:	2120      	movs	r1, #32
 80023ae:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2240      	movs	r2, #64	; 0x40
 80023b4:	2100      	movs	r1, #0
 80023b6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80023b8:	2300      	movs	r3, #0
 80023ba:	e000      	b.n	80023be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80023bc:	2302      	movs	r3, #2
  }
}
 80023be:	0018      	movs	r0, r3
 80023c0:	46bd      	mov	sp, r7
 80023c2:	b002      	add	sp, #8
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	46c0      	nop			; (mov r8, r8)
 80023c8:	ffffefff 	.word	0xffffefff

080023cc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b084      	sub	sp, #16
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2241      	movs	r2, #65	; 0x41
 80023da:	5c9b      	ldrb	r3, [r3, r2]
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	2b20      	cmp	r3, #32
 80023e0:	d139      	bne.n	8002456 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2240      	movs	r2, #64	; 0x40
 80023e6:	5c9b      	ldrb	r3, [r3, r2]
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d101      	bne.n	80023f0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80023ec:	2302      	movs	r3, #2
 80023ee:	e033      	b.n	8002458 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2240      	movs	r2, #64	; 0x40
 80023f4:	2101      	movs	r1, #1
 80023f6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2241      	movs	r2, #65	; 0x41
 80023fc:	2124      	movs	r1, #36	; 0x24
 80023fe:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2101      	movs	r1, #1
 800240c:	438a      	bics	r2, r1
 800240e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	4a11      	ldr	r2, [pc, #68]	; (8002460 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800241c:	4013      	ands	r3, r2
 800241e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	021b      	lsls	r3, r3, #8
 8002424:	68fa      	ldr	r2, [r7, #12]
 8002426:	4313      	orrs	r3, r2
 8002428:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	68fa      	ldr	r2, [r7, #12]
 8002430:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2101      	movs	r1, #1
 800243e:	430a      	orrs	r2, r1
 8002440:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2241      	movs	r2, #65	; 0x41
 8002446:	2120      	movs	r1, #32
 8002448:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2240      	movs	r2, #64	; 0x40
 800244e:	2100      	movs	r1, #0
 8002450:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002452:	2300      	movs	r3, #0
 8002454:	e000      	b.n	8002458 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002456:	2302      	movs	r3, #2
  }
}
 8002458:	0018      	movs	r0, r3
 800245a:	46bd      	mov	sp, r7
 800245c:	b004      	add	sp, #16
 800245e:	bd80      	pop	{r7, pc}
 8002460:	fffff0ff 	.word	0xfffff0ff

08002464 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b088      	sub	sp, #32
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d101      	bne.n	8002476 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e301      	b.n	8002a7a <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2201      	movs	r2, #1
 800247c:	4013      	ands	r3, r2
 800247e:	d100      	bne.n	8002482 <HAL_RCC_OscConfig+0x1e>
 8002480:	e08d      	b.n	800259e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002482:	4bc3      	ldr	r3, [pc, #780]	; (8002790 <HAL_RCC_OscConfig+0x32c>)
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	220c      	movs	r2, #12
 8002488:	4013      	ands	r3, r2
 800248a:	2b04      	cmp	r3, #4
 800248c:	d00e      	beq.n	80024ac <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800248e:	4bc0      	ldr	r3, [pc, #768]	; (8002790 <HAL_RCC_OscConfig+0x32c>)
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	220c      	movs	r2, #12
 8002494:	4013      	ands	r3, r2
 8002496:	2b08      	cmp	r3, #8
 8002498:	d116      	bne.n	80024c8 <HAL_RCC_OscConfig+0x64>
 800249a:	4bbd      	ldr	r3, [pc, #756]	; (8002790 <HAL_RCC_OscConfig+0x32c>)
 800249c:	685a      	ldr	r2, [r3, #4]
 800249e:	2380      	movs	r3, #128	; 0x80
 80024a0:	025b      	lsls	r3, r3, #9
 80024a2:	401a      	ands	r2, r3
 80024a4:	2380      	movs	r3, #128	; 0x80
 80024a6:	025b      	lsls	r3, r3, #9
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d10d      	bne.n	80024c8 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024ac:	4bb8      	ldr	r3, [pc, #736]	; (8002790 <HAL_RCC_OscConfig+0x32c>)
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	2380      	movs	r3, #128	; 0x80
 80024b2:	029b      	lsls	r3, r3, #10
 80024b4:	4013      	ands	r3, r2
 80024b6:	d100      	bne.n	80024ba <HAL_RCC_OscConfig+0x56>
 80024b8:	e070      	b.n	800259c <HAL_RCC_OscConfig+0x138>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d000      	beq.n	80024c4 <HAL_RCC_OscConfig+0x60>
 80024c2:	e06b      	b.n	800259c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e2d8      	b.n	8002a7a <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d107      	bne.n	80024e0 <HAL_RCC_OscConfig+0x7c>
 80024d0:	4baf      	ldr	r3, [pc, #700]	; (8002790 <HAL_RCC_OscConfig+0x32c>)
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	4bae      	ldr	r3, [pc, #696]	; (8002790 <HAL_RCC_OscConfig+0x32c>)
 80024d6:	2180      	movs	r1, #128	; 0x80
 80024d8:	0249      	lsls	r1, r1, #9
 80024da:	430a      	orrs	r2, r1
 80024dc:	601a      	str	r2, [r3, #0]
 80024de:	e02f      	b.n	8002540 <HAL_RCC_OscConfig+0xdc>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d10c      	bne.n	8002502 <HAL_RCC_OscConfig+0x9e>
 80024e8:	4ba9      	ldr	r3, [pc, #676]	; (8002790 <HAL_RCC_OscConfig+0x32c>)
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	4ba8      	ldr	r3, [pc, #672]	; (8002790 <HAL_RCC_OscConfig+0x32c>)
 80024ee:	49a9      	ldr	r1, [pc, #676]	; (8002794 <HAL_RCC_OscConfig+0x330>)
 80024f0:	400a      	ands	r2, r1
 80024f2:	601a      	str	r2, [r3, #0]
 80024f4:	4ba6      	ldr	r3, [pc, #664]	; (8002790 <HAL_RCC_OscConfig+0x32c>)
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	4ba5      	ldr	r3, [pc, #660]	; (8002790 <HAL_RCC_OscConfig+0x32c>)
 80024fa:	49a7      	ldr	r1, [pc, #668]	; (8002798 <HAL_RCC_OscConfig+0x334>)
 80024fc:	400a      	ands	r2, r1
 80024fe:	601a      	str	r2, [r3, #0]
 8002500:	e01e      	b.n	8002540 <HAL_RCC_OscConfig+0xdc>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	2b05      	cmp	r3, #5
 8002508:	d10e      	bne.n	8002528 <HAL_RCC_OscConfig+0xc4>
 800250a:	4ba1      	ldr	r3, [pc, #644]	; (8002790 <HAL_RCC_OscConfig+0x32c>)
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	4ba0      	ldr	r3, [pc, #640]	; (8002790 <HAL_RCC_OscConfig+0x32c>)
 8002510:	2180      	movs	r1, #128	; 0x80
 8002512:	02c9      	lsls	r1, r1, #11
 8002514:	430a      	orrs	r2, r1
 8002516:	601a      	str	r2, [r3, #0]
 8002518:	4b9d      	ldr	r3, [pc, #628]	; (8002790 <HAL_RCC_OscConfig+0x32c>)
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	4b9c      	ldr	r3, [pc, #624]	; (8002790 <HAL_RCC_OscConfig+0x32c>)
 800251e:	2180      	movs	r1, #128	; 0x80
 8002520:	0249      	lsls	r1, r1, #9
 8002522:	430a      	orrs	r2, r1
 8002524:	601a      	str	r2, [r3, #0]
 8002526:	e00b      	b.n	8002540 <HAL_RCC_OscConfig+0xdc>
 8002528:	4b99      	ldr	r3, [pc, #612]	; (8002790 <HAL_RCC_OscConfig+0x32c>)
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	4b98      	ldr	r3, [pc, #608]	; (8002790 <HAL_RCC_OscConfig+0x32c>)
 800252e:	4999      	ldr	r1, [pc, #612]	; (8002794 <HAL_RCC_OscConfig+0x330>)
 8002530:	400a      	ands	r2, r1
 8002532:	601a      	str	r2, [r3, #0]
 8002534:	4b96      	ldr	r3, [pc, #600]	; (8002790 <HAL_RCC_OscConfig+0x32c>)
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	4b95      	ldr	r3, [pc, #596]	; (8002790 <HAL_RCC_OscConfig+0x32c>)
 800253a:	4997      	ldr	r1, [pc, #604]	; (8002798 <HAL_RCC_OscConfig+0x334>)
 800253c:	400a      	ands	r2, r1
 800253e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d014      	beq.n	8002572 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002548:	f7fe fc5c 	bl	8000e04 <HAL_GetTick>
 800254c:	0003      	movs	r3, r0
 800254e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002550:	e008      	b.n	8002564 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002552:	f7fe fc57 	bl	8000e04 <HAL_GetTick>
 8002556:	0002      	movs	r2, r0
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	2b64      	cmp	r3, #100	; 0x64
 800255e:	d901      	bls.n	8002564 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8002560:	2303      	movs	r3, #3
 8002562:	e28a      	b.n	8002a7a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002564:	4b8a      	ldr	r3, [pc, #552]	; (8002790 <HAL_RCC_OscConfig+0x32c>)
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	2380      	movs	r3, #128	; 0x80
 800256a:	029b      	lsls	r3, r3, #10
 800256c:	4013      	ands	r3, r2
 800256e:	d0f0      	beq.n	8002552 <HAL_RCC_OscConfig+0xee>
 8002570:	e015      	b.n	800259e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002572:	f7fe fc47 	bl	8000e04 <HAL_GetTick>
 8002576:	0003      	movs	r3, r0
 8002578:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800257a:	e008      	b.n	800258e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800257c:	f7fe fc42 	bl	8000e04 <HAL_GetTick>
 8002580:	0002      	movs	r2, r0
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	2b64      	cmp	r3, #100	; 0x64
 8002588:	d901      	bls.n	800258e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e275      	b.n	8002a7a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800258e:	4b80      	ldr	r3, [pc, #512]	; (8002790 <HAL_RCC_OscConfig+0x32c>)
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	2380      	movs	r3, #128	; 0x80
 8002594:	029b      	lsls	r3, r3, #10
 8002596:	4013      	ands	r3, r2
 8002598:	d1f0      	bne.n	800257c <HAL_RCC_OscConfig+0x118>
 800259a:	e000      	b.n	800259e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800259c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	2202      	movs	r2, #2
 80025a4:	4013      	ands	r3, r2
 80025a6:	d100      	bne.n	80025aa <HAL_RCC_OscConfig+0x146>
 80025a8:	e069      	b.n	800267e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80025aa:	4b79      	ldr	r3, [pc, #484]	; (8002790 <HAL_RCC_OscConfig+0x32c>)
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	220c      	movs	r2, #12
 80025b0:	4013      	ands	r3, r2
 80025b2:	d00b      	beq.n	80025cc <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80025b4:	4b76      	ldr	r3, [pc, #472]	; (8002790 <HAL_RCC_OscConfig+0x32c>)
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	220c      	movs	r2, #12
 80025ba:	4013      	ands	r3, r2
 80025bc:	2b08      	cmp	r3, #8
 80025be:	d11c      	bne.n	80025fa <HAL_RCC_OscConfig+0x196>
 80025c0:	4b73      	ldr	r3, [pc, #460]	; (8002790 <HAL_RCC_OscConfig+0x32c>)
 80025c2:	685a      	ldr	r2, [r3, #4]
 80025c4:	2380      	movs	r3, #128	; 0x80
 80025c6:	025b      	lsls	r3, r3, #9
 80025c8:	4013      	ands	r3, r2
 80025ca:	d116      	bne.n	80025fa <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025cc:	4b70      	ldr	r3, [pc, #448]	; (8002790 <HAL_RCC_OscConfig+0x32c>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2202      	movs	r2, #2
 80025d2:	4013      	ands	r3, r2
 80025d4:	d005      	beq.n	80025e2 <HAL_RCC_OscConfig+0x17e>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d001      	beq.n	80025e2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e24b      	b.n	8002a7a <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025e2:	4b6b      	ldr	r3, [pc, #428]	; (8002790 <HAL_RCC_OscConfig+0x32c>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	22f8      	movs	r2, #248	; 0xf8
 80025e8:	4393      	bics	r3, r2
 80025ea:	0019      	movs	r1, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	691b      	ldr	r3, [r3, #16]
 80025f0:	00da      	lsls	r2, r3, #3
 80025f2:	4b67      	ldr	r3, [pc, #412]	; (8002790 <HAL_RCC_OscConfig+0x32c>)
 80025f4:	430a      	orrs	r2, r1
 80025f6:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025f8:	e041      	b.n	800267e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d024      	beq.n	800264c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002602:	4b63      	ldr	r3, [pc, #396]	; (8002790 <HAL_RCC_OscConfig+0x32c>)
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	4b62      	ldr	r3, [pc, #392]	; (8002790 <HAL_RCC_OscConfig+0x32c>)
 8002608:	2101      	movs	r1, #1
 800260a:	430a      	orrs	r2, r1
 800260c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800260e:	f7fe fbf9 	bl	8000e04 <HAL_GetTick>
 8002612:	0003      	movs	r3, r0
 8002614:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002616:	e008      	b.n	800262a <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002618:	f7fe fbf4 	bl	8000e04 <HAL_GetTick>
 800261c:	0002      	movs	r2, r0
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	2b02      	cmp	r3, #2
 8002624:	d901      	bls.n	800262a <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e227      	b.n	8002a7a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800262a:	4b59      	ldr	r3, [pc, #356]	; (8002790 <HAL_RCC_OscConfig+0x32c>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	2202      	movs	r2, #2
 8002630:	4013      	ands	r3, r2
 8002632:	d0f1      	beq.n	8002618 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002634:	4b56      	ldr	r3, [pc, #344]	; (8002790 <HAL_RCC_OscConfig+0x32c>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	22f8      	movs	r2, #248	; 0xf8
 800263a:	4393      	bics	r3, r2
 800263c:	0019      	movs	r1, r3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	691b      	ldr	r3, [r3, #16]
 8002642:	00da      	lsls	r2, r3, #3
 8002644:	4b52      	ldr	r3, [pc, #328]	; (8002790 <HAL_RCC_OscConfig+0x32c>)
 8002646:	430a      	orrs	r2, r1
 8002648:	601a      	str	r2, [r3, #0]
 800264a:	e018      	b.n	800267e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800264c:	4b50      	ldr	r3, [pc, #320]	; (8002790 <HAL_RCC_OscConfig+0x32c>)
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	4b4f      	ldr	r3, [pc, #316]	; (8002790 <HAL_RCC_OscConfig+0x32c>)
 8002652:	2101      	movs	r1, #1
 8002654:	438a      	bics	r2, r1
 8002656:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002658:	f7fe fbd4 	bl	8000e04 <HAL_GetTick>
 800265c:	0003      	movs	r3, r0
 800265e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002660:	e008      	b.n	8002674 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002662:	f7fe fbcf 	bl	8000e04 <HAL_GetTick>
 8002666:	0002      	movs	r2, r0
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	2b02      	cmp	r3, #2
 800266e:	d901      	bls.n	8002674 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8002670:	2303      	movs	r3, #3
 8002672:	e202      	b.n	8002a7a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002674:	4b46      	ldr	r3, [pc, #280]	; (8002790 <HAL_RCC_OscConfig+0x32c>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2202      	movs	r2, #2
 800267a:	4013      	ands	r3, r2
 800267c:	d1f1      	bne.n	8002662 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	2208      	movs	r2, #8
 8002684:	4013      	ands	r3, r2
 8002686:	d036      	beq.n	80026f6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	69db      	ldr	r3, [r3, #28]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d019      	beq.n	80026c4 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002690:	4b3f      	ldr	r3, [pc, #252]	; (8002790 <HAL_RCC_OscConfig+0x32c>)
 8002692:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002694:	4b3e      	ldr	r3, [pc, #248]	; (8002790 <HAL_RCC_OscConfig+0x32c>)
 8002696:	2101      	movs	r1, #1
 8002698:	430a      	orrs	r2, r1
 800269a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800269c:	f7fe fbb2 	bl	8000e04 <HAL_GetTick>
 80026a0:	0003      	movs	r3, r0
 80026a2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026a4:	e008      	b.n	80026b8 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026a6:	f7fe fbad 	bl	8000e04 <HAL_GetTick>
 80026aa:	0002      	movs	r2, r0
 80026ac:	69bb      	ldr	r3, [r7, #24]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d901      	bls.n	80026b8 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80026b4:	2303      	movs	r3, #3
 80026b6:	e1e0      	b.n	8002a7a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026b8:	4b35      	ldr	r3, [pc, #212]	; (8002790 <HAL_RCC_OscConfig+0x32c>)
 80026ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026bc:	2202      	movs	r2, #2
 80026be:	4013      	ands	r3, r2
 80026c0:	d0f1      	beq.n	80026a6 <HAL_RCC_OscConfig+0x242>
 80026c2:	e018      	b.n	80026f6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026c4:	4b32      	ldr	r3, [pc, #200]	; (8002790 <HAL_RCC_OscConfig+0x32c>)
 80026c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026c8:	4b31      	ldr	r3, [pc, #196]	; (8002790 <HAL_RCC_OscConfig+0x32c>)
 80026ca:	2101      	movs	r1, #1
 80026cc:	438a      	bics	r2, r1
 80026ce:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026d0:	f7fe fb98 	bl	8000e04 <HAL_GetTick>
 80026d4:	0003      	movs	r3, r0
 80026d6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026d8:	e008      	b.n	80026ec <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026da:	f7fe fb93 	bl	8000e04 <HAL_GetTick>
 80026de:	0002      	movs	r2, r0
 80026e0:	69bb      	ldr	r3, [r7, #24]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	d901      	bls.n	80026ec <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80026e8:	2303      	movs	r3, #3
 80026ea:	e1c6      	b.n	8002a7a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026ec:	4b28      	ldr	r3, [pc, #160]	; (8002790 <HAL_RCC_OscConfig+0x32c>)
 80026ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f0:	2202      	movs	r2, #2
 80026f2:	4013      	ands	r3, r2
 80026f4:	d1f1      	bne.n	80026da <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	2204      	movs	r2, #4
 80026fc:	4013      	ands	r3, r2
 80026fe:	d100      	bne.n	8002702 <HAL_RCC_OscConfig+0x29e>
 8002700:	e0b4      	b.n	800286c <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002702:	201f      	movs	r0, #31
 8002704:	183b      	adds	r3, r7, r0
 8002706:	2200      	movs	r2, #0
 8002708:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800270a:	4b21      	ldr	r3, [pc, #132]	; (8002790 <HAL_RCC_OscConfig+0x32c>)
 800270c:	69da      	ldr	r2, [r3, #28]
 800270e:	2380      	movs	r3, #128	; 0x80
 8002710:	055b      	lsls	r3, r3, #21
 8002712:	4013      	ands	r3, r2
 8002714:	d110      	bne.n	8002738 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002716:	4b1e      	ldr	r3, [pc, #120]	; (8002790 <HAL_RCC_OscConfig+0x32c>)
 8002718:	69da      	ldr	r2, [r3, #28]
 800271a:	4b1d      	ldr	r3, [pc, #116]	; (8002790 <HAL_RCC_OscConfig+0x32c>)
 800271c:	2180      	movs	r1, #128	; 0x80
 800271e:	0549      	lsls	r1, r1, #21
 8002720:	430a      	orrs	r2, r1
 8002722:	61da      	str	r2, [r3, #28]
 8002724:	4b1a      	ldr	r3, [pc, #104]	; (8002790 <HAL_RCC_OscConfig+0x32c>)
 8002726:	69da      	ldr	r2, [r3, #28]
 8002728:	2380      	movs	r3, #128	; 0x80
 800272a:	055b      	lsls	r3, r3, #21
 800272c:	4013      	ands	r3, r2
 800272e:	60fb      	str	r3, [r7, #12]
 8002730:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002732:	183b      	adds	r3, r7, r0
 8002734:	2201      	movs	r2, #1
 8002736:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002738:	4b18      	ldr	r3, [pc, #96]	; (800279c <HAL_RCC_OscConfig+0x338>)
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	2380      	movs	r3, #128	; 0x80
 800273e:	005b      	lsls	r3, r3, #1
 8002740:	4013      	ands	r3, r2
 8002742:	d11a      	bne.n	800277a <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002744:	4b15      	ldr	r3, [pc, #84]	; (800279c <HAL_RCC_OscConfig+0x338>)
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	4b14      	ldr	r3, [pc, #80]	; (800279c <HAL_RCC_OscConfig+0x338>)
 800274a:	2180      	movs	r1, #128	; 0x80
 800274c:	0049      	lsls	r1, r1, #1
 800274e:	430a      	orrs	r2, r1
 8002750:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002752:	f7fe fb57 	bl	8000e04 <HAL_GetTick>
 8002756:	0003      	movs	r3, r0
 8002758:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800275a:	e008      	b.n	800276e <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800275c:	f7fe fb52 	bl	8000e04 <HAL_GetTick>
 8002760:	0002      	movs	r2, r0
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	2b64      	cmp	r3, #100	; 0x64
 8002768:	d901      	bls.n	800276e <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e185      	b.n	8002a7a <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800276e:	4b0b      	ldr	r3, [pc, #44]	; (800279c <HAL_RCC_OscConfig+0x338>)
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	2380      	movs	r3, #128	; 0x80
 8002774:	005b      	lsls	r3, r3, #1
 8002776:	4013      	ands	r3, r2
 8002778:	d0f0      	beq.n	800275c <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	2b01      	cmp	r3, #1
 8002780:	d10e      	bne.n	80027a0 <HAL_RCC_OscConfig+0x33c>
 8002782:	4b03      	ldr	r3, [pc, #12]	; (8002790 <HAL_RCC_OscConfig+0x32c>)
 8002784:	6a1a      	ldr	r2, [r3, #32]
 8002786:	4b02      	ldr	r3, [pc, #8]	; (8002790 <HAL_RCC_OscConfig+0x32c>)
 8002788:	2101      	movs	r1, #1
 800278a:	430a      	orrs	r2, r1
 800278c:	621a      	str	r2, [r3, #32]
 800278e:	e035      	b.n	80027fc <HAL_RCC_OscConfig+0x398>
 8002790:	40021000 	.word	0x40021000
 8002794:	fffeffff 	.word	0xfffeffff
 8002798:	fffbffff 	.word	0xfffbffff
 800279c:	40007000 	.word	0x40007000
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d10c      	bne.n	80027c2 <HAL_RCC_OscConfig+0x35e>
 80027a8:	4bb6      	ldr	r3, [pc, #728]	; (8002a84 <HAL_RCC_OscConfig+0x620>)
 80027aa:	6a1a      	ldr	r2, [r3, #32]
 80027ac:	4bb5      	ldr	r3, [pc, #724]	; (8002a84 <HAL_RCC_OscConfig+0x620>)
 80027ae:	2101      	movs	r1, #1
 80027b0:	438a      	bics	r2, r1
 80027b2:	621a      	str	r2, [r3, #32]
 80027b4:	4bb3      	ldr	r3, [pc, #716]	; (8002a84 <HAL_RCC_OscConfig+0x620>)
 80027b6:	6a1a      	ldr	r2, [r3, #32]
 80027b8:	4bb2      	ldr	r3, [pc, #712]	; (8002a84 <HAL_RCC_OscConfig+0x620>)
 80027ba:	2104      	movs	r1, #4
 80027bc:	438a      	bics	r2, r1
 80027be:	621a      	str	r2, [r3, #32]
 80027c0:	e01c      	b.n	80027fc <HAL_RCC_OscConfig+0x398>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	2b05      	cmp	r3, #5
 80027c8:	d10c      	bne.n	80027e4 <HAL_RCC_OscConfig+0x380>
 80027ca:	4bae      	ldr	r3, [pc, #696]	; (8002a84 <HAL_RCC_OscConfig+0x620>)
 80027cc:	6a1a      	ldr	r2, [r3, #32]
 80027ce:	4bad      	ldr	r3, [pc, #692]	; (8002a84 <HAL_RCC_OscConfig+0x620>)
 80027d0:	2104      	movs	r1, #4
 80027d2:	430a      	orrs	r2, r1
 80027d4:	621a      	str	r2, [r3, #32]
 80027d6:	4bab      	ldr	r3, [pc, #684]	; (8002a84 <HAL_RCC_OscConfig+0x620>)
 80027d8:	6a1a      	ldr	r2, [r3, #32]
 80027da:	4baa      	ldr	r3, [pc, #680]	; (8002a84 <HAL_RCC_OscConfig+0x620>)
 80027dc:	2101      	movs	r1, #1
 80027de:	430a      	orrs	r2, r1
 80027e0:	621a      	str	r2, [r3, #32]
 80027e2:	e00b      	b.n	80027fc <HAL_RCC_OscConfig+0x398>
 80027e4:	4ba7      	ldr	r3, [pc, #668]	; (8002a84 <HAL_RCC_OscConfig+0x620>)
 80027e6:	6a1a      	ldr	r2, [r3, #32]
 80027e8:	4ba6      	ldr	r3, [pc, #664]	; (8002a84 <HAL_RCC_OscConfig+0x620>)
 80027ea:	2101      	movs	r1, #1
 80027ec:	438a      	bics	r2, r1
 80027ee:	621a      	str	r2, [r3, #32]
 80027f0:	4ba4      	ldr	r3, [pc, #656]	; (8002a84 <HAL_RCC_OscConfig+0x620>)
 80027f2:	6a1a      	ldr	r2, [r3, #32]
 80027f4:	4ba3      	ldr	r3, [pc, #652]	; (8002a84 <HAL_RCC_OscConfig+0x620>)
 80027f6:	2104      	movs	r1, #4
 80027f8:	438a      	bics	r2, r1
 80027fa:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d014      	beq.n	800282e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002804:	f7fe fafe 	bl	8000e04 <HAL_GetTick>
 8002808:	0003      	movs	r3, r0
 800280a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800280c:	e009      	b.n	8002822 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800280e:	f7fe faf9 	bl	8000e04 <HAL_GetTick>
 8002812:	0002      	movs	r2, r0
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	4a9b      	ldr	r2, [pc, #620]	; (8002a88 <HAL_RCC_OscConfig+0x624>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d901      	bls.n	8002822 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e12b      	b.n	8002a7a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002822:	4b98      	ldr	r3, [pc, #608]	; (8002a84 <HAL_RCC_OscConfig+0x620>)
 8002824:	6a1b      	ldr	r3, [r3, #32]
 8002826:	2202      	movs	r2, #2
 8002828:	4013      	ands	r3, r2
 800282a:	d0f0      	beq.n	800280e <HAL_RCC_OscConfig+0x3aa>
 800282c:	e013      	b.n	8002856 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800282e:	f7fe fae9 	bl	8000e04 <HAL_GetTick>
 8002832:	0003      	movs	r3, r0
 8002834:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002836:	e009      	b.n	800284c <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002838:	f7fe fae4 	bl	8000e04 <HAL_GetTick>
 800283c:	0002      	movs	r2, r0
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	4a91      	ldr	r2, [pc, #580]	; (8002a88 <HAL_RCC_OscConfig+0x624>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d901      	bls.n	800284c <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	e116      	b.n	8002a7a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800284c:	4b8d      	ldr	r3, [pc, #564]	; (8002a84 <HAL_RCC_OscConfig+0x620>)
 800284e:	6a1b      	ldr	r3, [r3, #32]
 8002850:	2202      	movs	r2, #2
 8002852:	4013      	ands	r3, r2
 8002854:	d1f0      	bne.n	8002838 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002856:	231f      	movs	r3, #31
 8002858:	18fb      	adds	r3, r7, r3
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	2b01      	cmp	r3, #1
 800285e:	d105      	bne.n	800286c <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002860:	4b88      	ldr	r3, [pc, #544]	; (8002a84 <HAL_RCC_OscConfig+0x620>)
 8002862:	69da      	ldr	r2, [r3, #28]
 8002864:	4b87      	ldr	r3, [pc, #540]	; (8002a84 <HAL_RCC_OscConfig+0x620>)
 8002866:	4989      	ldr	r1, [pc, #548]	; (8002a8c <HAL_RCC_OscConfig+0x628>)
 8002868:	400a      	ands	r2, r1
 800286a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2210      	movs	r2, #16
 8002872:	4013      	ands	r3, r2
 8002874:	d063      	beq.n	800293e <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	695b      	ldr	r3, [r3, #20]
 800287a:	2b01      	cmp	r3, #1
 800287c:	d12a      	bne.n	80028d4 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800287e:	4b81      	ldr	r3, [pc, #516]	; (8002a84 <HAL_RCC_OscConfig+0x620>)
 8002880:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002882:	4b80      	ldr	r3, [pc, #512]	; (8002a84 <HAL_RCC_OscConfig+0x620>)
 8002884:	2104      	movs	r1, #4
 8002886:	430a      	orrs	r2, r1
 8002888:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800288a:	4b7e      	ldr	r3, [pc, #504]	; (8002a84 <HAL_RCC_OscConfig+0x620>)
 800288c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800288e:	4b7d      	ldr	r3, [pc, #500]	; (8002a84 <HAL_RCC_OscConfig+0x620>)
 8002890:	2101      	movs	r1, #1
 8002892:	430a      	orrs	r2, r1
 8002894:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002896:	f7fe fab5 	bl	8000e04 <HAL_GetTick>
 800289a:	0003      	movs	r3, r0
 800289c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800289e:	e008      	b.n	80028b2 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80028a0:	f7fe fab0 	bl	8000e04 <HAL_GetTick>
 80028a4:	0002      	movs	r2, r0
 80028a6:	69bb      	ldr	r3, [r7, #24]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d901      	bls.n	80028b2 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e0e3      	b.n	8002a7a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80028b2:	4b74      	ldr	r3, [pc, #464]	; (8002a84 <HAL_RCC_OscConfig+0x620>)
 80028b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028b6:	2202      	movs	r2, #2
 80028b8:	4013      	ands	r3, r2
 80028ba:	d0f1      	beq.n	80028a0 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80028bc:	4b71      	ldr	r3, [pc, #452]	; (8002a84 <HAL_RCC_OscConfig+0x620>)
 80028be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028c0:	22f8      	movs	r2, #248	; 0xf8
 80028c2:	4393      	bics	r3, r2
 80028c4:	0019      	movs	r1, r3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	699b      	ldr	r3, [r3, #24]
 80028ca:	00da      	lsls	r2, r3, #3
 80028cc:	4b6d      	ldr	r3, [pc, #436]	; (8002a84 <HAL_RCC_OscConfig+0x620>)
 80028ce:	430a      	orrs	r2, r1
 80028d0:	635a      	str	r2, [r3, #52]	; 0x34
 80028d2:	e034      	b.n	800293e <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	695b      	ldr	r3, [r3, #20]
 80028d8:	3305      	adds	r3, #5
 80028da:	d111      	bne.n	8002900 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80028dc:	4b69      	ldr	r3, [pc, #420]	; (8002a84 <HAL_RCC_OscConfig+0x620>)
 80028de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028e0:	4b68      	ldr	r3, [pc, #416]	; (8002a84 <HAL_RCC_OscConfig+0x620>)
 80028e2:	2104      	movs	r1, #4
 80028e4:	438a      	bics	r2, r1
 80028e6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80028e8:	4b66      	ldr	r3, [pc, #408]	; (8002a84 <HAL_RCC_OscConfig+0x620>)
 80028ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028ec:	22f8      	movs	r2, #248	; 0xf8
 80028ee:	4393      	bics	r3, r2
 80028f0:	0019      	movs	r1, r3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	699b      	ldr	r3, [r3, #24]
 80028f6:	00da      	lsls	r2, r3, #3
 80028f8:	4b62      	ldr	r3, [pc, #392]	; (8002a84 <HAL_RCC_OscConfig+0x620>)
 80028fa:	430a      	orrs	r2, r1
 80028fc:	635a      	str	r2, [r3, #52]	; 0x34
 80028fe:	e01e      	b.n	800293e <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002900:	4b60      	ldr	r3, [pc, #384]	; (8002a84 <HAL_RCC_OscConfig+0x620>)
 8002902:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002904:	4b5f      	ldr	r3, [pc, #380]	; (8002a84 <HAL_RCC_OscConfig+0x620>)
 8002906:	2104      	movs	r1, #4
 8002908:	430a      	orrs	r2, r1
 800290a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800290c:	4b5d      	ldr	r3, [pc, #372]	; (8002a84 <HAL_RCC_OscConfig+0x620>)
 800290e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002910:	4b5c      	ldr	r3, [pc, #368]	; (8002a84 <HAL_RCC_OscConfig+0x620>)
 8002912:	2101      	movs	r1, #1
 8002914:	438a      	bics	r2, r1
 8002916:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002918:	f7fe fa74 	bl	8000e04 <HAL_GetTick>
 800291c:	0003      	movs	r3, r0
 800291e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002920:	e008      	b.n	8002934 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002922:	f7fe fa6f 	bl	8000e04 <HAL_GetTick>
 8002926:	0002      	movs	r2, r0
 8002928:	69bb      	ldr	r3, [r7, #24]
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	2b02      	cmp	r3, #2
 800292e:	d901      	bls.n	8002934 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8002930:	2303      	movs	r3, #3
 8002932:	e0a2      	b.n	8002a7a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002934:	4b53      	ldr	r3, [pc, #332]	; (8002a84 <HAL_RCC_OscConfig+0x620>)
 8002936:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002938:	2202      	movs	r2, #2
 800293a:	4013      	ands	r3, r2
 800293c:	d1f1      	bne.n	8002922 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a1b      	ldr	r3, [r3, #32]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d100      	bne.n	8002948 <HAL_RCC_OscConfig+0x4e4>
 8002946:	e097      	b.n	8002a78 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002948:	4b4e      	ldr	r3, [pc, #312]	; (8002a84 <HAL_RCC_OscConfig+0x620>)
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	220c      	movs	r2, #12
 800294e:	4013      	ands	r3, r2
 8002950:	2b08      	cmp	r3, #8
 8002952:	d100      	bne.n	8002956 <HAL_RCC_OscConfig+0x4f2>
 8002954:	e06b      	b.n	8002a2e <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a1b      	ldr	r3, [r3, #32]
 800295a:	2b02      	cmp	r3, #2
 800295c:	d14c      	bne.n	80029f8 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800295e:	4b49      	ldr	r3, [pc, #292]	; (8002a84 <HAL_RCC_OscConfig+0x620>)
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	4b48      	ldr	r3, [pc, #288]	; (8002a84 <HAL_RCC_OscConfig+0x620>)
 8002964:	494a      	ldr	r1, [pc, #296]	; (8002a90 <HAL_RCC_OscConfig+0x62c>)
 8002966:	400a      	ands	r2, r1
 8002968:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800296a:	f7fe fa4b 	bl	8000e04 <HAL_GetTick>
 800296e:	0003      	movs	r3, r0
 8002970:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002972:	e008      	b.n	8002986 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002974:	f7fe fa46 	bl	8000e04 <HAL_GetTick>
 8002978:	0002      	movs	r2, r0
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	2b02      	cmp	r3, #2
 8002980:	d901      	bls.n	8002986 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e079      	b.n	8002a7a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002986:	4b3f      	ldr	r3, [pc, #252]	; (8002a84 <HAL_RCC_OscConfig+0x620>)
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	2380      	movs	r3, #128	; 0x80
 800298c:	049b      	lsls	r3, r3, #18
 800298e:	4013      	ands	r3, r2
 8002990:	d1f0      	bne.n	8002974 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002992:	4b3c      	ldr	r3, [pc, #240]	; (8002a84 <HAL_RCC_OscConfig+0x620>)
 8002994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002996:	220f      	movs	r2, #15
 8002998:	4393      	bics	r3, r2
 800299a:	0019      	movs	r1, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029a0:	4b38      	ldr	r3, [pc, #224]	; (8002a84 <HAL_RCC_OscConfig+0x620>)
 80029a2:	430a      	orrs	r2, r1
 80029a4:	62da      	str	r2, [r3, #44]	; 0x2c
 80029a6:	4b37      	ldr	r3, [pc, #220]	; (8002a84 <HAL_RCC_OscConfig+0x620>)
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	4a3a      	ldr	r2, [pc, #232]	; (8002a94 <HAL_RCC_OscConfig+0x630>)
 80029ac:	4013      	ands	r3, r2
 80029ae:	0019      	movs	r1, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b8:	431a      	orrs	r2, r3
 80029ba:	4b32      	ldr	r3, [pc, #200]	; (8002a84 <HAL_RCC_OscConfig+0x620>)
 80029bc:	430a      	orrs	r2, r1
 80029be:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029c0:	4b30      	ldr	r3, [pc, #192]	; (8002a84 <HAL_RCC_OscConfig+0x620>)
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	4b2f      	ldr	r3, [pc, #188]	; (8002a84 <HAL_RCC_OscConfig+0x620>)
 80029c6:	2180      	movs	r1, #128	; 0x80
 80029c8:	0449      	lsls	r1, r1, #17
 80029ca:	430a      	orrs	r2, r1
 80029cc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ce:	f7fe fa19 	bl	8000e04 <HAL_GetTick>
 80029d2:	0003      	movs	r3, r0
 80029d4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029d6:	e008      	b.n	80029ea <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029d8:	f7fe fa14 	bl	8000e04 <HAL_GetTick>
 80029dc:	0002      	movs	r2, r0
 80029de:	69bb      	ldr	r3, [r7, #24]
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d901      	bls.n	80029ea <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e047      	b.n	8002a7a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029ea:	4b26      	ldr	r3, [pc, #152]	; (8002a84 <HAL_RCC_OscConfig+0x620>)
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	2380      	movs	r3, #128	; 0x80
 80029f0:	049b      	lsls	r3, r3, #18
 80029f2:	4013      	ands	r3, r2
 80029f4:	d0f0      	beq.n	80029d8 <HAL_RCC_OscConfig+0x574>
 80029f6:	e03f      	b.n	8002a78 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029f8:	4b22      	ldr	r3, [pc, #136]	; (8002a84 <HAL_RCC_OscConfig+0x620>)
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	4b21      	ldr	r3, [pc, #132]	; (8002a84 <HAL_RCC_OscConfig+0x620>)
 80029fe:	4924      	ldr	r1, [pc, #144]	; (8002a90 <HAL_RCC_OscConfig+0x62c>)
 8002a00:	400a      	ands	r2, r1
 8002a02:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a04:	f7fe f9fe 	bl	8000e04 <HAL_GetTick>
 8002a08:	0003      	movs	r3, r0
 8002a0a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a0c:	e008      	b.n	8002a20 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a0e:	f7fe f9f9 	bl	8000e04 <HAL_GetTick>
 8002a12:	0002      	movs	r2, r0
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d901      	bls.n	8002a20 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	e02c      	b.n	8002a7a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a20:	4b18      	ldr	r3, [pc, #96]	; (8002a84 <HAL_RCC_OscConfig+0x620>)
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	2380      	movs	r3, #128	; 0x80
 8002a26:	049b      	lsls	r3, r3, #18
 8002a28:	4013      	ands	r3, r2
 8002a2a:	d1f0      	bne.n	8002a0e <HAL_RCC_OscConfig+0x5aa>
 8002a2c:	e024      	b.n	8002a78 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a1b      	ldr	r3, [r3, #32]
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d101      	bne.n	8002a3a <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e01f      	b.n	8002a7a <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002a3a:	4b12      	ldr	r3, [pc, #72]	; (8002a84 <HAL_RCC_OscConfig+0x620>)
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002a40:	4b10      	ldr	r3, [pc, #64]	; (8002a84 <HAL_RCC_OscConfig+0x620>)
 8002a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a44:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a46:	697a      	ldr	r2, [r7, #20]
 8002a48:	2380      	movs	r3, #128	; 0x80
 8002a4a:	025b      	lsls	r3, r3, #9
 8002a4c:	401a      	ands	r2, r3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d10e      	bne.n	8002a74 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	220f      	movs	r2, #15
 8002a5a:	401a      	ands	r2, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d107      	bne.n	8002a74 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002a64:	697a      	ldr	r2, [r7, #20]
 8002a66:	23f0      	movs	r3, #240	; 0xf0
 8002a68:	039b      	lsls	r3, r3, #14
 8002a6a:	401a      	ands	r2, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d001      	beq.n	8002a78 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e000      	b.n	8002a7a <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8002a78:	2300      	movs	r3, #0
}
 8002a7a:	0018      	movs	r0, r3
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	b008      	add	sp, #32
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	46c0      	nop			; (mov r8, r8)
 8002a84:	40021000 	.word	0x40021000
 8002a88:	00001388 	.word	0x00001388
 8002a8c:	efffffff 	.word	0xefffffff
 8002a90:	feffffff 	.word	0xfeffffff
 8002a94:	ffc2ffff 	.word	0xffc2ffff

08002a98 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d101      	bne.n	8002aac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e0b3      	b.n	8002c14 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002aac:	4b5b      	ldr	r3, [pc, #364]	; (8002c1c <HAL_RCC_ClockConfig+0x184>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	683a      	ldr	r2, [r7, #0]
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d911      	bls.n	8002ade <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aba:	4b58      	ldr	r3, [pc, #352]	; (8002c1c <HAL_RCC_ClockConfig+0x184>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	4393      	bics	r3, r2
 8002ac2:	0019      	movs	r1, r3
 8002ac4:	4b55      	ldr	r3, [pc, #340]	; (8002c1c <HAL_RCC_ClockConfig+0x184>)
 8002ac6:	683a      	ldr	r2, [r7, #0]
 8002ac8:	430a      	orrs	r2, r1
 8002aca:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002acc:	4b53      	ldr	r3, [pc, #332]	; (8002c1c <HAL_RCC_ClockConfig+0x184>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	683a      	ldr	r2, [r7, #0]
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d001      	beq.n	8002ade <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e09a      	b.n	8002c14 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	2202      	movs	r2, #2
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	d015      	beq.n	8002b14 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2204      	movs	r2, #4
 8002aee:	4013      	ands	r3, r2
 8002af0:	d006      	beq.n	8002b00 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002af2:	4b4b      	ldr	r3, [pc, #300]	; (8002c20 <HAL_RCC_ClockConfig+0x188>)
 8002af4:	685a      	ldr	r2, [r3, #4]
 8002af6:	4b4a      	ldr	r3, [pc, #296]	; (8002c20 <HAL_RCC_ClockConfig+0x188>)
 8002af8:	21e0      	movs	r1, #224	; 0xe0
 8002afa:	00c9      	lsls	r1, r1, #3
 8002afc:	430a      	orrs	r2, r1
 8002afe:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b00:	4b47      	ldr	r3, [pc, #284]	; (8002c20 <HAL_RCC_ClockConfig+0x188>)
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	22f0      	movs	r2, #240	; 0xf0
 8002b06:	4393      	bics	r3, r2
 8002b08:	0019      	movs	r1, r3
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	689a      	ldr	r2, [r3, #8]
 8002b0e:	4b44      	ldr	r3, [pc, #272]	; (8002c20 <HAL_RCC_ClockConfig+0x188>)
 8002b10:	430a      	orrs	r2, r1
 8002b12:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	2201      	movs	r2, #1
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	d040      	beq.n	8002ba0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d107      	bne.n	8002b36 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b26:	4b3e      	ldr	r3, [pc, #248]	; (8002c20 <HAL_RCC_ClockConfig+0x188>)
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	2380      	movs	r3, #128	; 0x80
 8002b2c:	029b      	lsls	r3, r3, #10
 8002b2e:	4013      	ands	r3, r2
 8002b30:	d114      	bne.n	8002b5c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e06e      	b.n	8002c14 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d107      	bne.n	8002b4e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b3e:	4b38      	ldr	r3, [pc, #224]	; (8002c20 <HAL_RCC_ClockConfig+0x188>)
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	2380      	movs	r3, #128	; 0x80
 8002b44:	049b      	lsls	r3, r3, #18
 8002b46:	4013      	ands	r3, r2
 8002b48:	d108      	bne.n	8002b5c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e062      	b.n	8002c14 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b4e:	4b34      	ldr	r3, [pc, #208]	; (8002c20 <HAL_RCC_ClockConfig+0x188>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	2202      	movs	r2, #2
 8002b54:	4013      	ands	r3, r2
 8002b56:	d101      	bne.n	8002b5c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e05b      	b.n	8002c14 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b5c:	4b30      	ldr	r3, [pc, #192]	; (8002c20 <HAL_RCC_ClockConfig+0x188>)
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	2203      	movs	r2, #3
 8002b62:	4393      	bics	r3, r2
 8002b64:	0019      	movs	r1, r3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685a      	ldr	r2, [r3, #4]
 8002b6a:	4b2d      	ldr	r3, [pc, #180]	; (8002c20 <HAL_RCC_ClockConfig+0x188>)
 8002b6c:	430a      	orrs	r2, r1
 8002b6e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b70:	f7fe f948 	bl	8000e04 <HAL_GetTick>
 8002b74:	0003      	movs	r3, r0
 8002b76:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b78:	e009      	b.n	8002b8e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b7a:	f7fe f943 	bl	8000e04 <HAL_GetTick>
 8002b7e:	0002      	movs	r2, r0
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	4a27      	ldr	r2, [pc, #156]	; (8002c24 <HAL_RCC_ClockConfig+0x18c>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d901      	bls.n	8002b8e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e042      	b.n	8002c14 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b8e:	4b24      	ldr	r3, [pc, #144]	; (8002c20 <HAL_RCC_ClockConfig+0x188>)
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	220c      	movs	r2, #12
 8002b94:	401a      	ands	r2, r3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d1ec      	bne.n	8002b7a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ba0:	4b1e      	ldr	r3, [pc, #120]	; (8002c1c <HAL_RCC_ClockConfig+0x184>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	683a      	ldr	r2, [r7, #0]
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d211      	bcs.n	8002bd2 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bae:	4b1b      	ldr	r3, [pc, #108]	; (8002c1c <HAL_RCC_ClockConfig+0x184>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	4393      	bics	r3, r2
 8002bb6:	0019      	movs	r1, r3
 8002bb8:	4b18      	ldr	r3, [pc, #96]	; (8002c1c <HAL_RCC_ClockConfig+0x184>)
 8002bba:	683a      	ldr	r2, [r7, #0]
 8002bbc:	430a      	orrs	r2, r1
 8002bbe:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bc0:	4b16      	ldr	r3, [pc, #88]	; (8002c1c <HAL_RCC_ClockConfig+0x184>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	683a      	ldr	r2, [r7, #0]
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d001      	beq.n	8002bd2 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e020      	b.n	8002c14 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	2204      	movs	r2, #4
 8002bd8:	4013      	ands	r3, r2
 8002bda:	d009      	beq.n	8002bf0 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002bdc:	4b10      	ldr	r3, [pc, #64]	; (8002c20 <HAL_RCC_ClockConfig+0x188>)
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	4a11      	ldr	r2, [pc, #68]	; (8002c28 <HAL_RCC_ClockConfig+0x190>)
 8002be2:	4013      	ands	r3, r2
 8002be4:	0019      	movs	r1, r3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	68da      	ldr	r2, [r3, #12]
 8002bea:	4b0d      	ldr	r3, [pc, #52]	; (8002c20 <HAL_RCC_ClockConfig+0x188>)
 8002bec:	430a      	orrs	r2, r1
 8002bee:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002bf0:	f000 f820 	bl	8002c34 <HAL_RCC_GetSysClockFreq>
 8002bf4:	0001      	movs	r1, r0
 8002bf6:	4b0a      	ldr	r3, [pc, #40]	; (8002c20 <HAL_RCC_ClockConfig+0x188>)
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	091b      	lsrs	r3, r3, #4
 8002bfc:	220f      	movs	r2, #15
 8002bfe:	4013      	ands	r3, r2
 8002c00:	4a0a      	ldr	r2, [pc, #40]	; (8002c2c <HAL_RCC_ClockConfig+0x194>)
 8002c02:	5cd3      	ldrb	r3, [r2, r3]
 8002c04:	000a      	movs	r2, r1
 8002c06:	40da      	lsrs	r2, r3
 8002c08:	4b09      	ldr	r3, [pc, #36]	; (8002c30 <HAL_RCC_ClockConfig+0x198>)
 8002c0a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002c0c:	2000      	movs	r0, #0
 8002c0e:	f7fe f8c5 	bl	8000d9c <HAL_InitTick>
  
  return HAL_OK;
 8002c12:	2300      	movs	r3, #0
}
 8002c14:	0018      	movs	r0, r3
 8002c16:	46bd      	mov	sp, r7
 8002c18:	b004      	add	sp, #16
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	40022000 	.word	0x40022000
 8002c20:	40021000 	.word	0x40021000
 8002c24:	00001388 	.word	0x00001388
 8002c28:	fffff8ff 	.word	0xfffff8ff
 8002c2c:	080041f4 	.word	0x080041f4
 8002c30:	20000000 	.word	0x20000000

08002c34 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b086      	sub	sp, #24
 8002c38:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	60fb      	str	r3, [r7, #12]
 8002c3e:	2300      	movs	r3, #0
 8002c40:	60bb      	str	r3, [r7, #8]
 8002c42:	2300      	movs	r3, #0
 8002c44:	617b      	str	r3, [r7, #20]
 8002c46:	2300      	movs	r3, #0
 8002c48:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002c4e:	4b20      	ldr	r3, [pc, #128]	; (8002cd0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	220c      	movs	r2, #12
 8002c58:	4013      	ands	r3, r2
 8002c5a:	2b04      	cmp	r3, #4
 8002c5c:	d002      	beq.n	8002c64 <HAL_RCC_GetSysClockFreq+0x30>
 8002c5e:	2b08      	cmp	r3, #8
 8002c60:	d003      	beq.n	8002c6a <HAL_RCC_GetSysClockFreq+0x36>
 8002c62:	e02c      	b.n	8002cbe <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c64:	4b1b      	ldr	r3, [pc, #108]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002c66:	613b      	str	r3, [r7, #16]
      break;
 8002c68:	e02c      	b.n	8002cc4 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	0c9b      	lsrs	r3, r3, #18
 8002c6e:	220f      	movs	r2, #15
 8002c70:	4013      	ands	r3, r2
 8002c72:	4a19      	ldr	r2, [pc, #100]	; (8002cd8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002c74:	5cd3      	ldrb	r3, [r2, r3]
 8002c76:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002c78:	4b15      	ldr	r3, [pc, #84]	; (8002cd0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c7c:	220f      	movs	r2, #15
 8002c7e:	4013      	ands	r3, r2
 8002c80:	4a16      	ldr	r2, [pc, #88]	; (8002cdc <HAL_RCC_GetSysClockFreq+0xa8>)
 8002c82:	5cd3      	ldrb	r3, [r2, r3]
 8002c84:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	2380      	movs	r3, #128	; 0x80
 8002c8a:	025b      	lsls	r3, r3, #9
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	d009      	beq.n	8002ca4 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002c90:	68b9      	ldr	r1, [r7, #8]
 8002c92:	4810      	ldr	r0, [pc, #64]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002c94:	f7fd fa38 	bl	8000108 <__udivsi3>
 8002c98:	0003      	movs	r3, r0
 8002c9a:	001a      	movs	r2, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	4353      	muls	r3, r2
 8002ca0:	617b      	str	r3, [r7, #20]
 8002ca2:	e009      	b.n	8002cb8 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002ca4:	6879      	ldr	r1, [r7, #4]
 8002ca6:	000a      	movs	r2, r1
 8002ca8:	0152      	lsls	r2, r2, #5
 8002caa:	1a52      	subs	r2, r2, r1
 8002cac:	0193      	lsls	r3, r2, #6
 8002cae:	1a9b      	subs	r3, r3, r2
 8002cb0:	00db      	lsls	r3, r3, #3
 8002cb2:	185b      	adds	r3, r3, r1
 8002cb4:	021b      	lsls	r3, r3, #8
 8002cb6:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	613b      	str	r3, [r7, #16]
      break;
 8002cbc:	e002      	b.n	8002cc4 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002cbe:	4b05      	ldr	r3, [pc, #20]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002cc0:	613b      	str	r3, [r7, #16]
      break;
 8002cc2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002cc4:	693b      	ldr	r3, [r7, #16]
}
 8002cc6:	0018      	movs	r0, r3
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	b006      	add	sp, #24
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	46c0      	nop			; (mov r8, r8)
 8002cd0:	40021000 	.word	0x40021000
 8002cd4:	007a1200 	.word	0x007a1200
 8002cd8:	0800420c 	.word	0x0800420c
 8002cdc:	0800421c 	.word	0x0800421c

08002ce0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ce4:	4b02      	ldr	r3, [pc, #8]	; (8002cf0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
}
 8002ce8:	0018      	movs	r0, r3
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	46c0      	nop			; (mov r8, r8)
 8002cf0:	20000000 	.word	0x20000000

08002cf4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002cf8:	f7ff fff2 	bl	8002ce0 <HAL_RCC_GetHCLKFreq>
 8002cfc:	0001      	movs	r1, r0
 8002cfe:	4b06      	ldr	r3, [pc, #24]	; (8002d18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	0a1b      	lsrs	r3, r3, #8
 8002d04:	2207      	movs	r2, #7
 8002d06:	4013      	ands	r3, r2
 8002d08:	4a04      	ldr	r2, [pc, #16]	; (8002d1c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d0a:	5cd3      	ldrb	r3, [r2, r3]
 8002d0c:	40d9      	lsrs	r1, r3
 8002d0e:	000b      	movs	r3, r1
}    
 8002d10:	0018      	movs	r0, r3
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	46c0      	nop			; (mov r8, r8)
 8002d18:	40021000 	.word	0x40021000
 8002d1c:	08004204 	.word	0x08004204

08002d20 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b086      	sub	sp, #24
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	2380      	movs	r3, #128	; 0x80
 8002d36:	025b      	lsls	r3, r3, #9
 8002d38:	4013      	ands	r3, r2
 8002d3a:	d100      	bne.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002d3c:	e08e      	b.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002d3e:	2017      	movs	r0, #23
 8002d40:	183b      	adds	r3, r7, r0
 8002d42:	2200      	movs	r2, #0
 8002d44:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d46:	4b57      	ldr	r3, [pc, #348]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002d48:	69da      	ldr	r2, [r3, #28]
 8002d4a:	2380      	movs	r3, #128	; 0x80
 8002d4c:	055b      	lsls	r3, r3, #21
 8002d4e:	4013      	ands	r3, r2
 8002d50:	d110      	bne.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d52:	4b54      	ldr	r3, [pc, #336]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002d54:	69da      	ldr	r2, [r3, #28]
 8002d56:	4b53      	ldr	r3, [pc, #332]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002d58:	2180      	movs	r1, #128	; 0x80
 8002d5a:	0549      	lsls	r1, r1, #21
 8002d5c:	430a      	orrs	r2, r1
 8002d5e:	61da      	str	r2, [r3, #28]
 8002d60:	4b50      	ldr	r3, [pc, #320]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002d62:	69da      	ldr	r2, [r3, #28]
 8002d64:	2380      	movs	r3, #128	; 0x80
 8002d66:	055b      	lsls	r3, r3, #21
 8002d68:	4013      	ands	r3, r2
 8002d6a:	60bb      	str	r3, [r7, #8]
 8002d6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d6e:	183b      	adds	r3, r7, r0
 8002d70:	2201      	movs	r2, #1
 8002d72:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d74:	4b4c      	ldr	r3, [pc, #304]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	2380      	movs	r3, #128	; 0x80
 8002d7a:	005b      	lsls	r3, r3, #1
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	d11a      	bne.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d80:	4b49      	ldr	r3, [pc, #292]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	4b48      	ldr	r3, [pc, #288]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002d86:	2180      	movs	r1, #128	; 0x80
 8002d88:	0049      	lsls	r1, r1, #1
 8002d8a:	430a      	orrs	r2, r1
 8002d8c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d8e:	f7fe f839 	bl	8000e04 <HAL_GetTick>
 8002d92:	0003      	movs	r3, r0
 8002d94:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d96:	e008      	b.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d98:	f7fe f834 	bl	8000e04 <HAL_GetTick>
 8002d9c:	0002      	movs	r2, r0
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	2b64      	cmp	r3, #100	; 0x64
 8002da4:	d901      	bls.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	e077      	b.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002daa:	4b3f      	ldr	r3, [pc, #252]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	2380      	movs	r3, #128	; 0x80
 8002db0:	005b      	lsls	r3, r3, #1
 8002db2:	4013      	ands	r3, r2
 8002db4:	d0f0      	beq.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002db6:	4b3b      	ldr	r3, [pc, #236]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002db8:	6a1a      	ldr	r2, [r3, #32]
 8002dba:	23c0      	movs	r3, #192	; 0xc0
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d034      	beq.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	685a      	ldr	r2, [r3, #4]
 8002dcc:	23c0      	movs	r3, #192	; 0xc0
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	68fa      	ldr	r2, [r7, #12]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d02c      	beq.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002dd8:	4b32      	ldr	r3, [pc, #200]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002dda:	6a1b      	ldr	r3, [r3, #32]
 8002ddc:	4a33      	ldr	r2, [pc, #204]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002dde:	4013      	ands	r3, r2
 8002de0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002de2:	4b30      	ldr	r3, [pc, #192]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002de4:	6a1a      	ldr	r2, [r3, #32]
 8002de6:	4b2f      	ldr	r3, [pc, #188]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002de8:	2180      	movs	r1, #128	; 0x80
 8002dea:	0249      	lsls	r1, r1, #9
 8002dec:	430a      	orrs	r2, r1
 8002dee:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002df0:	4b2c      	ldr	r3, [pc, #176]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002df2:	6a1a      	ldr	r2, [r3, #32]
 8002df4:	4b2b      	ldr	r3, [pc, #172]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002df6:	492e      	ldr	r1, [pc, #184]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002df8:	400a      	ands	r2, r1
 8002dfa:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002dfc:	4b29      	ldr	r3, [pc, #164]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002dfe:	68fa      	ldr	r2, [r7, #12]
 8002e00:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2201      	movs	r2, #1
 8002e06:	4013      	ands	r3, r2
 8002e08:	d013      	beq.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e0a:	f7fd fffb 	bl	8000e04 <HAL_GetTick>
 8002e0e:	0003      	movs	r3, r0
 8002e10:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e12:	e009      	b.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e14:	f7fd fff6 	bl	8000e04 <HAL_GetTick>
 8002e18:	0002      	movs	r2, r0
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	4a25      	ldr	r2, [pc, #148]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d901      	bls.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002e24:	2303      	movs	r3, #3
 8002e26:	e038      	b.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e28:	4b1e      	ldr	r3, [pc, #120]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002e2a:	6a1b      	ldr	r3, [r3, #32]
 8002e2c:	2202      	movs	r2, #2
 8002e2e:	4013      	ands	r3, r2
 8002e30:	d0f0      	beq.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e32:	4b1c      	ldr	r3, [pc, #112]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002e34:	6a1b      	ldr	r3, [r3, #32]
 8002e36:	4a1d      	ldr	r2, [pc, #116]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002e38:	4013      	ands	r3, r2
 8002e3a:	0019      	movs	r1, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	685a      	ldr	r2, [r3, #4]
 8002e40:	4b18      	ldr	r3, [pc, #96]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002e42:	430a      	orrs	r2, r1
 8002e44:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002e46:	2317      	movs	r3, #23
 8002e48:	18fb      	adds	r3, r7, r3
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d105      	bne.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e50:	4b14      	ldr	r3, [pc, #80]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002e52:	69da      	ldr	r2, [r3, #28]
 8002e54:	4b13      	ldr	r3, [pc, #76]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002e56:	4918      	ldr	r1, [pc, #96]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8002e58:	400a      	ands	r2, r1
 8002e5a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2201      	movs	r2, #1
 8002e62:	4013      	ands	r3, r2
 8002e64:	d009      	beq.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e66:	4b0f      	ldr	r3, [pc, #60]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6a:	2203      	movs	r2, #3
 8002e6c:	4393      	bics	r3, r2
 8002e6e:	0019      	movs	r1, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	689a      	ldr	r2, [r3, #8]
 8002e74:	4b0b      	ldr	r3, [pc, #44]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002e76:	430a      	orrs	r2, r1
 8002e78:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	2220      	movs	r2, #32
 8002e80:	4013      	ands	r3, r2
 8002e82:	d009      	beq.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e84:	4b07      	ldr	r3, [pc, #28]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e88:	2210      	movs	r2, #16
 8002e8a:	4393      	bics	r3, r2
 8002e8c:	0019      	movs	r1, r3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	68da      	ldr	r2, [r3, #12]
 8002e92:	4b04      	ldr	r3, [pc, #16]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002e94:	430a      	orrs	r2, r1
 8002e96:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	0018      	movs	r0, r3
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	b006      	add	sp, #24
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	46c0      	nop			; (mov r8, r8)
 8002ea4:	40021000 	.word	0x40021000
 8002ea8:	40007000 	.word	0x40007000
 8002eac:	fffffcff 	.word	0xfffffcff
 8002eb0:	fffeffff 	.word	0xfffeffff
 8002eb4:	00001388 	.word	0x00001388
 8002eb8:	efffffff 	.word	0xefffffff

08002ebc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002ebc:	b5b0      	push	{r4, r5, r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002ec4:	230f      	movs	r3, #15
 8002ec6:	18fb      	adds	r3, r7, r3
 8002ec8:	2201      	movs	r2, #1
 8002eca:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d101      	bne.n	8002ed6 <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e081      	b.n	8002fda <HAL_RTC_Init+0x11e>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	7f5b      	ldrb	r3, [r3, #29]
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d106      	bne.n	8002eee <HAL_RTC_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	0018      	movs	r0, r3
 8002eea:	f7fd fd67 	bl	80009bc <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2202      	movs	r2, #2
 8002ef2:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	68db      	ldr	r3, [r3, #12]
 8002efa:	2210      	movs	r2, #16
 8002efc:	4013      	ands	r3, r2
 8002efe:	2b10      	cmp	r3, #16
 8002f00:	d05c      	beq.n	8002fbc <HAL_RTC_Init+0x100>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	22ca      	movs	r2, #202	; 0xca
 8002f08:	625a      	str	r2, [r3, #36]	; 0x24
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	2253      	movs	r2, #83	; 0x53
 8002f10:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002f12:	250f      	movs	r5, #15
 8002f14:	197c      	adds	r4, r7, r5
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	0018      	movs	r0, r3
 8002f1a:	f000 f9c5 	bl	80032a8 <RTC_EnterInitMode>
 8002f1e:	0003      	movs	r3, r0
 8002f20:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8002f22:	0028      	movs	r0, r5
 8002f24:	183b      	adds	r3, r7, r0
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d12c      	bne.n	8002f86 <HAL_RTC_Init+0xca>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	689a      	ldr	r2, [r3, #8]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	492b      	ldr	r1, [pc, #172]	; (8002fe4 <HAL_RTC_Init+0x128>)
 8002f38:	400a      	ands	r2, r1
 8002f3a:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	6899      	ldr	r1, [r3, #8]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685a      	ldr	r2, [r3, #4]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	691b      	ldr	r3, [r3, #16]
 8002f4a:	431a      	orrs	r2, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	695b      	ldr	r3, [r3, #20]
 8002f50:	431a      	orrs	r2, r3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	430a      	orrs	r2, r1
 8002f58:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	68d2      	ldr	r2, [r2, #12]
 8002f62:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	6919      	ldr	r1, [r3, #16]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	041a      	lsls	r2, r3, #16
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	430a      	orrs	r2, r1
 8002f76:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002f78:	183c      	adds	r4, r7, r0
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	0018      	movs	r0, r3
 8002f7e:	f000 f9d6 	bl	800332e <RTC_ExitInitMode>
 8002f82:	0003      	movs	r3, r0
 8002f84:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8002f86:	230f      	movs	r3, #15
 8002f88:	18fb      	adds	r3, r7, r3
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d110      	bne.n	8002fb2 <HAL_RTC_Init+0xf6>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4913      	ldr	r1, [pc, #76]	; (8002fe8 <HAL_RTC_Init+0x12c>)
 8002f9c:	400a      	ands	r2, r1
 8002f9e:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	699a      	ldr	r2, [r3, #24]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	430a      	orrs	r2, r1
 8002fb0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	22ff      	movs	r2, #255	; 0xff
 8002fb8:	625a      	str	r2, [r3, #36]	; 0x24
 8002fba:	e003      	b.n	8002fc4 <HAL_RTC_Init+0x108>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8002fbc:	230f      	movs	r3, #15
 8002fbe:	18fb      	adds	r3, r7, r3
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8002fc4:	230f      	movs	r3, #15
 8002fc6:	18fb      	adds	r3, r7, r3
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d102      	bne.n	8002fd4 <HAL_RTC_Init+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8002fd4:	230f      	movs	r3, #15
 8002fd6:	18fb      	adds	r3, r7, r3
 8002fd8:	781b      	ldrb	r3, [r3, #0]
}
 8002fda:	0018      	movs	r0, r3
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	b004      	add	sp, #16
 8002fe0:	bdb0      	pop	{r4, r5, r7, pc}
 8002fe2:	46c0      	nop			; (mov r8, r8)
 8002fe4:	ff8fffbf 	.word	0xff8fffbf
 8002fe8:	fffbffff 	.word	0xfffbffff

08002fec <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002fec:	b5b0      	push	{r4, r5, r7, lr}
 8002fee:	b086      	sub	sp, #24
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	60f8      	str	r0, [r7, #12]
 8002ff4:	60b9      	str	r1, [r7, #8]
 8002ff6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	7f1b      	ldrb	r3, [r3, #28]
 8003000:	2b01      	cmp	r3, #1
 8003002:	d101      	bne.n	8003008 <HAL_RTC_SetTime+0x1c>
 8003004:	2302      	movs	r3, #2
 8003006:	e08e      	b.n	8003126 <HAL_RTC_SetTime+0x13a>
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2201      	movs	r2, #1
 800300c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2202      	movs	r2, #2
 8003012:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d125      	bne.n	8003066 <HAL_RTC_SetTime+0x7a>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	2240      	movs	r2, #64	; 0x40
 8003022:	4013      	ands	r3, r2
 8003024:	d102      	bne.n	800302c <HAL_RTC_SetTime+0x40>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	2200      	movs	r2, #0
 800302a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	0018      	movs	r0, r3
 8003032:	f000 f9a5 	bl	8003380 <RTC_ByteToBcd2>
 8003036:	0003      	movs	r3, r0
 8003038:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	785b      	ldrb	r3, [r3, #1]
 800303e:	0018      	movs	r0, r3
 8003040:	f000 f99e 	bl	8003380 <RTC_ByteToBcd2>
 8003044:	0003      	movs	r3, r0
 8003046:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003048:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	789b      	ldrb	r3, [r3, #2]
 800304e:	0018      	movs	r0, r3
 8003050:	f000 f996 	bl	8003380 <RTC_ByteToBcd2>
 8003054:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003056:	0022      	movs	r2, r4
 8003058:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	78db      	ldrb	r3, [r3, #3]
 800305e:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003060:	4313      	orrs	r3, r2
 8003062:	617b      	str	r3, [r7, #20]
 8003064:	e017      	b.n	8003096 <HAL_RTC_SetTime+0xaa>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	2240      	movs	r2, #64	; 0x40
 800306e:	4013      	ands	r3, r2
 8003070:	d102      	bne.n	8003078 <HAL_RTC_SetTime+0x8c>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	2200      	movs	r2, #0
 8003076:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	785b      	ldrb	r3, [r3, #1]
 8003082:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003084:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8003086:	68ba      	ldr	r2, [r7, #8]
 8003088:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800308a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	78db      	ldrb	r3, [r3, #3]
 8003090:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003092:	4313      	orrs	r3, r2
 8003094:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	22ca      	movs	r2, #202	; 0xca
 800309c:	625a      	str	r2, [r3, #36]	; 0x24
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	2253      	movs	r2, #83	; 0x53
 80030a4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80030a6:	2513      	movs	r5, #19
 80030a8:	197c      	adds	r4, r7, r5
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	0018      	movs	r0, r3
 80030ae:	f000 f8fb 	bl	80032a8 <RTC_EnterInitMode>
 80030b2:	0003      	movs	r3, r0
 80030b4:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 80030b6:	0028      	movs	r0, r5
 80030b8:	183b      	adds	r3, r7, r0
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d120      	bne.n	8003102 <HAL_RTC_SetTime+0x116>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	697a      	ldr	r2, [r7, #20]
 80030c6:	491a      	ldr	r1, [pc, #104]	; (8003130 <HAL_RTC_SetTime+0x144>)
 80030c8:	400a      	ands	r2, r1
 80030ca:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	689a      	ldr	r2, [r3, #8]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4917      	ldr	r1, [pc, #92]	; (8003134 <HAL_RTC_SetTime+0x148>)
 80030d8:	400a      	ands	r2, r1
 80030da:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	6899      	ldr	r1, [r3, #8]
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	68da      	ldr	r2, [r3, #12]
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	431a      	orrs	r2, r3
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	430a      	orrs	r2, r1
 80030f2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80030f4:	183c      	adds	r4, r7, r0
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	0018      	movs	r0, r3
 80030fa:	f000 f918 	bl	800332e <RTC_ExitInitMode>
 80030fe:	0003      	movs	r3, r0
 8003100:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8003102:	2313      	movs	r3, #19
 8003104:	18fb      	adds	r3, r7, r3
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d102      	bne.n	8003112 <HAL_RTC_SetTime+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2201      	movs	r2, #1
 8003110:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	22ff      	movs	r2, #255	; 0xff
 8003118:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2200      	movs	r2, #0
 800311e:	771a      	strb	r2, [r3, #28]

  return status;
 8003120:	2313      	movs	r3, #19
 8003122:	18fb      	adds	r3, r7, r3
 8003124:	781b      	ldrb	r3, [r3, #0]
}
 8003126:	0018      	movs	r0, r3
 8003128:	46bd      	mov	sp, r7
 800312a:	b006      	add	sp, #24
 800312c:	bdb0      	pop	{r4, r5, r7, pc}
 800312e:	46c0      	nop			; (mov r8, r8)
 8003130:	007f7f7f 	.word	0x007f7f7f
 8003134:	fffbffff 	.word	0xfffbffff

08003138 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003138:	b5b0      	push	{r4, r5, r7, lr}
 800313a:	b086      	sub	sp, #24
 800313c:	af00      	add	r7, sp, #0
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	60b9      	str	r1, [r7, #8]
 8003142:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003144:	2300      	movs	r3, #0
 8003146:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	7f1b      	ldrb	r3, [r3, #28]
 800314c:	2b01      	cmp	r3, #1
 800314e:	d101      	bne.n	8003154 <HAL_RTC_SetDate+0x1c>
 8003150:	2302      	movs	r3, #2
 8003152:	e07a      	b.n	800324a <HAL_RTC_SetDate+0x112>
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2201      	movs	r2, #1
 8003158:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2202      	movs	r2, #2
 800315e:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d10e      	bne.n	8003184 <HAL_RTC_SetDate+0x4c>
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	785b      	ldrb	r3, [r3, #1]
 800316a:	001a      	movs	r2, r3
 800316c:	2310      	movs	r3, #16
 800316e:	4013      	ands	r3, r2
 8003170:	d008      	beq.n	8003184 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	785b      	ldrb	r3, [r3, #1]
 8003176:	2210      	movs	r2, #16
 8003178:	4393      	bics	r3, r2
 800317a:	b2db      	uxtb	r3, r3
 800317c:	330a      	adds	r3, #10
 800317e:	b2da      	uxtb	r2, r3
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d11c      	bne.n	80031c4 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	78db      	ldrb	r3, [r3, #3]
 800318e:	0018      	movs	r0, r3
 8003190:	f000 f8f6 	bl	8003380 <RTC_ByteToBcd2>
 8003194:	0003      	movs	r3, r0
 8003196:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	785b      	ldrb	r3, [r3, #1]
 800319c:	0018      	movs	r0, r3
 800319e:	f000 f8ef 	bl	8003380 <RTC_ByteToBcd2>
 80031a2:	0003      	movs	r3, r0
 80031a4:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80031a6:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	789b      	ldrb	r3, [r3, #2]
 80031ac:	0018      	movs	r0, r3
 80031ae:	f000 f8e7 	bl	8003380 <RTC_ByteToBcd2>
 80031b2:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80031b4:	0022      	movs	r2, r4
 80031b6:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80031be:	4313      	orrs	r3, r2
 80031c0:	617b      	str	r3, [r7, #20]
 80031c2:	e00e      	b.n	80031e2 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	78db      	ldrb	r3, [r3, #3]
 80031c8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	785b      	ldrb	r3, [r3, #1]
 80031ce:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80031d0:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80031d2:	68ba      	ldr	r2, [r7, #8]
 80031d4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80031d6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80031de:	4313      	orrs	r3, r2
 80031e0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	22ca      	movs	r2, #202	; 0xca
 80031e8:	625a      	str	r2, [r3, #36]	; 0x24
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	2253      	movs	r2, #83	; 0x53
 80031f0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80031f2:	2513      	movs	r5, #19
 80031f4:	197c      	adds	r4, r7, r5
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	0018      	movs	r0, r3
 80031fa:	f000 f855 	bl	80032a8 <RTC_EnterInitMode>
 80031fe:	0003      	movs	r3, r0
 8003200:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8003202:	0028      	movs	r0, r5
 8003204:	183b      	adds	r3, r7, r0
 8003206:	781b      	ldrb	r3, [r3, #0]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d10c      	bne.n	8003226 <HAL_RTC_SetDate+0xee>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	697a      	ldr	r2, [r7, #20]
 8003212:	4910      	ldr	r1, [pc, #64]	; (8003254 <HAL_RTC_SetDate+0x11c>)
 8003214:	400a      	ands	r2, r1
 8003216:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003218:	183c      	adds	r4, r7, r0
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	0018      	movs	r0, r3
 800321e:	f000 f886 	bl	800332e <RTC_ExitInitMode>
 8003222:	0003      	movs	r3, r0
 8003224:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8003226:	2313      	movs	r3, #19
 8003228:	18fb      	adds	r3, r7, r3
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d102      	bne.n	8003236 <HAL_RTC_SetDate+0xfe>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2201      	movs	r2, #1
 8003234:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	22ff      	movs	r2, #255	; 0xff
 800323c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2200      	movs	r2, #0
 8003242:	771a      	strb	r2, [r3, #28]

  return status;
 8003244:	2313      	movs	r3, #19
 8003246:	18fb      	adds	r3, r7, r3
 8003248:	781b      	ldrb	r3, [r3, #0]
}
 800324a:	0018      	movs	r0, r3
 800324c:	46bd      	mov	sp, r7
 800324e:	b006      	add	sp, #24
 8003250:	bdb0      	pop	{r4, r5, r7, pc}
 8003252:	46c0      	nop			; (mov r8, r8)
 8003254:	00ffff3f 	.word	0x00ffff3f

08003258 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003260:	2300      	movs	r3, #0
 8003262:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a0e      	ldr	r2, [pc, #56]	; (80032a4 <HAL_RTC_WaitForSynchro+0x4c>)
 800326a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800326c:	f7fd fdca 	bl	8000e04 <HAL_GetTick>
 8003270:	0003      	movs	r3, r0
 8003272:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003274:	e00a      	b.n	800328c <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003276:	f7fd fdc5 	bl	8000e04 <HAL_GetTick>
 800327a:	0002      	movs	r2, r0
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	1ad2      	subs	r2, r2, r3
 8003280:	23fa      	movs	r3, #250	; 0xfa
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	429a      	cmp	r2, r3
 8003286:	d901      	bls.n	800328c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8003288:	2303      	movs	r3, #3
 800328a:	e006      	b.n	800329a <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	2220      	movs	r2, #32
 8003294:	4013      	ands	r3, r2
 8003296:	d0ee      	beq.n	8003276 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8003298:	2300      	movs	r3, #0
}
 800329a:	0018      	movs	r0, r3
 800329c:	46bd      	mov	sp, r7
 800329e:	b004      	add	sp, #16
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	46c0      	nop			; (mov r8, r8)
 80032a4:	00017959 	.word	0x00017959

080032a8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b084      	sub	sp, #16
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80032b0:	2300      	movs	r3, #0
 80032b2:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80032b4:	230f      	movs	r3, #15
 80032b6:	18fb      	adds	r3, r7, r3
 80032b8:	2200      	movs	r2, #0
 80032ba:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	68db      	ldr	r3, [r3, #12]
 80032c2:	2240      	movs	r2, #64	; 0x40
 80032c4:	4013      	ands	r3, r2
 80032c6:	d12b      	bne.n	8003320 <RTC_EnterInitMode+0x78>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	68da      	ldr	r2, [r3, #12]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	2180      	movs	r1, #128	; 0x80
 80032d4:	430a      	orrs	r2, r1
 80032d6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80032d8:	f7fd fd94 	bl	8000e04 <HAL_GetTick>
 80032dc:	0003      	movs	r3, r0
 80032de:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80032e0:	e013      	b.n	800330a <RTC_EnterInitMode+0x62>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80032e2:	f7fd fd8f 	bl	8000e04 <HAL_GetTick>
 80032e6:	0002      	movs	r2, r0
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	1ad2      	subs	r2, r2, r3
 80032ec:	200f      	movs	r0, #15
 80032ee:	183b      	adds	r3, r7, r0
 80032f0:	1839      	adds	r1, r7, r0
 80032f2:	7809      	ldrb	r1, [r1, #0]
 80032f4:	7019      	strb	r1, [r3, #0]
 80032f6:	23fa      	movs	r3, #250	; 0xfa
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d905      	bls.n	800330a <RTC_EnterInitMode+0x62>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2204      	movs	r2, #4
 8003302:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8003304:	183b      	adds	r3, r7, r0
 8003306:	2201      	movs	r2, #1
 8003308:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	2240      	movs	r2, #64	; 0x40
 8003312:	4013      	ands	r3, r2
 8003314:	d104      	bne.n	8003320 <RTC_EnterInitMode+0x78>
 8003316:	230f      	movs	r3, #15
 8003318:	18fb      	adds	r3, r7, r3
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	2b01      	cmp	r3, #1
 800331e:	d1e0      	bne.n	80032e2 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 8003320:	230f      	movs	r3, #15
 8003322:	18fb      	adds	r3, r7, r3
 8003324:	781b      	ldrb	r3, [r3, #0]
}
 8003326:	0018      	movs	r0, r3
 8003328:	46bd      	mov	sp, r7
 800332a:	b004      	add	sp, #16
 800332c:	bd80      	pop	{r7, pc}

0800332e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800332e:	b590      	push	{r4, r7, lr}
 8003330:	b085      	sub	sp, #20
 8003332:	af00      	add	r7, sp, #0
 8003334:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003336:	240f      	movs	r4, #15
 8003338:	193b      	adds	r3, r7, r4
 800333a:	2200      	movs	r2, #0
 800333c:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	68da      	ldr	r2, [r3, #12]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	2180      	movs	r1, #128	; 0x80
 800334a:	438a      	bics	r2, r1
 800334c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	2220      	movs	r2, #32
 8003356:	4013      	ands	r3, r2
 8003358:	d10b      	bne.n	8003372 <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	0018      	movs	r0, r3
 800335e:	f7ff ff7b 	bl	8003258 <HAL_RTC_WaitForSynchro>
 8003362:	1e03      	subs	r3, r0, #0
 8003364:	d005      	beq.n	8003372 <RTC_ExitInitMode+0x44>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2204      	movs	r2, #4
 800336a:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800336c:	193b      	adds	r3, r7, r4
 800336e:	2201      	movs	r2, #1
 8003370:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8003372:	230f      	movs	r3, #15
 8003374:	18fb      	adds	r3, r7, r3
 8003376:	781b      	ldrb	r3, [r3, #0]
}
 8003378:	0018      	movs	r0, r3
 800337a:	46bd      	mov	sp, r7
 800337c:	b005      	add	sp, #20
 800337e:	bd90      	pop	{r4, r7, pc}

08003380 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b084      	sub	sp, #16
 8003384:	af00      	add	r7, sp, #0
 8003386:	0002      	movs	r2, r0
 8003388:	1dfb      	adds	r3, r7, #7
 800338a:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 800338c:	2300      	movs	r3, #0
 800338e:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8003390:	e007      	b.n	80033a2 <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	3301      	adds	r3, #1
 8003396:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8003398:	1dfb      	adds	r3, r7, #7
 800339a:	1dfa      	adds	r2, r7, #7
 800339c:	7812      	ldrb	r2, [r2, #0]
 800339e:	3a0a      	subs	r2, #10
 80033a0:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 80033a2:	1dfb      	adds	r3, r7, #7
 80033a4:	781b      	ldrb	r3, [r3, #0]
 80033a6:	2b09      	cmp	r3, #9
 80033a8:	d8f3      	bhi.n	8003392 <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	011b      	lsls	r3, r3, #4
 80033b0:	b2da      	uxtb	r2, r3
 80033b2:	1dfb      	adds	r3, r7, #7
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	b2db      	uxtb	r3, r3
}
 80033ba:	0018      	movs	r0, r3
 80033bc:	46bd      	mov	sp, r7
 80033be:	b004      	add	sp, #16
 80033c0:	bd80      	pop	{r7, pc}
	...

080033c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b082      	sub	sp, #8
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d101      	bne.n	80033d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e044      	b.n	8003460 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d107      	bne.n	80033ee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2278      	movs	r2, #120	; 0x78
 80033e2:	2100      	movs	r1, #0
 80033e4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	0018      	movs	r0, r3
 80033ea:	f7fd faff 	bl	80009ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2224      	movs	r2, #36	; 0x24
 80033f2:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	2101      	movs	r1, #1
 8003400:	438a      	bics	r2, r1
 8003402:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	0018      	movs	r0, r3
 8003408:	f000 fb0c 	bl	8003a24 <UART_SetConfig>
 800340c:	0003      	movs	r3, r0
 800340e:	2b01      	cmp	r3, #1
 8003410:	d101      	bne.n	8003416 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e024      	b.n	8003460 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341a:	2b00      	cmp	r3, #0
 800341c:	d003      	beq.n	8003426 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	0018      	movs	r0, r3
 8003422:	f000 fc3f 	bl	8003ca4 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	685a      	ldr	r2, [r3, #4]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	490d      	ldr	r1, [pc, #52]	; (8003468 <HAL_UART_Init+0xa4>)
 8003432:	400a      	ands	r2, r1
 8003434:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	689a      	ldr	r2, [r3, #8]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	2108      	movs	r1, #8
 8003442:	438a      	bics	r2, r1
 8003444:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	2101      	movs	r1, #1
 8003452:	430a      	orrs	r2, r1
 8003454:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	0018      	movs	r0, r3
 800345a:	f000 fcd7 	bl	8003e0c <UART_CheckIdleState>
 800345e:	0003      	movs	r3, r0
}
 8003460:	0018      	movs	r0, r3
 8003462:	46bd      	mov	sp, r7
 8003464:	b002      	add	sp, #8
 8003466:	bd80      	pop	{r7, pc}
 8003468:	fffff7ff 	.word	0xfffff7ff

0800346c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800346c:	b590      	push	{r4, r7, lr}
 800346e:	b0ab      	sub	sp, #172	; 0xac
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	69db      	ldr	r3, [r3, #28]
 800347a:	22a4      	movs	r2, #164	; 0xa4
 800347c:	18b9      	adds	r1, r7, r2
 800347e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	20a0      	movs	r0, #160	; 0xa0
 8003488:	1839      	adds	r1, r7, r0
 800348a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	219c      	movs	r1, #156	; 0x9c
 8003494:	1879      	adds	r1, r7, r1
 8003496:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003498:	0011      	movs	r1, r2
 800349a:	18bb      	adds	r3, r7, r2
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a99      	ldr	r2, [pc, #612]	; (8003704 <HAL_UART_IRQHandler+0x298>)
 80034a0:	4013      	ands	r3, r2
 80034a2:	2298      	movs	r2, #152	; 0x98
 80034a4:	18bc      	adds	r4, r7, r2
 80034a6:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80034a8:	18bb      	adds	r3, r7, r2
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d114      	bne.n	80034da <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80034b0:	187b      	adds	r3, r7, r1
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	2220      	movs	r2, #32
 80034b6:	4013      	ands	r3, r2
 80034b8:	d00f      	beq.n	80034da <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80034ba:	183b      	adds	r3, r7, r0
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2220      	movs	r2, #32
 80034c0:	4013      	ands	r3, r2
 80034c2:	d00a      	beq.n	80034da <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d100      	bne.n	80034ce <HAL_UART_IRQHandler+0x62>
 80034cc:	e286      	b.n	80039dc <HAL_UART_IRQHandler+0x570>
      {
        huart->RxISR(huart);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	0010      	movs	r0, r2
 80034d6:	4798      	blx	r3
      }
      return;
 80034d8:	e280      	b.n	80039dc <HAL_UART_IRQHandler+0x570>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80034da:	2398      	movs	r3, #152	; 0x98
 80034dc:	18fb      	adds	r3, r7, r3
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d100      	bne.n	80034e6 <HAL_UART_IRQHandler+0x7a>
 80034e4:	e114      	b.n	8003710 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80034e6:	239c      	movs	r3, #156	; 0x9c
 80034e8:	18fb      	adds	r3, r7, r3
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	2201      	movs	r2, #1
 80034ee:	4013      	ands	r3, r2
 80034f0:	d106      	bne.n	8003500 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80034f2:	23a0      	movs	r3, #160	; 0xa0
 80034f4:	18fb      	adds	r3, r7, r3
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a83      	ldr	r2, [pc, #524]	; (8003708 <HAL_UART_IRQHandler+0x29c>)
 80034fa:	4013      	ands	r3, r2
 80034fc:	d100      	bne.n	8003500 <HAL_UART_IRQHandler+0x94>
 80034fe:	e107      	b.n	8003710 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003500:	23a4      	movs	r3, #164	; 0xa4
 8003502:	18fb      	adds	r3, r7, r3
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	2201      	movs	r2, #1
 8003508:	4013      	ands	r3, r2
 800350a:	d012      	beq.n	8003532 <HAL_UART_IRQHandler+0xc6>
 800350c:	23a0      	movs	r3, #160	; 0xa0
 800350e:	18fb      	adds	r3, r7, r3
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	2380      	movs	r3, #128	; 0x80
 8003514:	005b      	lsls	r3, r3, #1
 8003516:	4013      	ands	r3, r2
 8003518:	d00b      	beq.n	8003532 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	2201      	movs	r2, #1
 8003520:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2284      	movs	r2, #132	; 0x84
 8003526:	589b      	ldr	r3, [r3, r2]
 8003528:	2201      	movs	r2, #1
 800352a:	431a      	orrs	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2184      	movs	r1, #132	; 0x84
 8003530:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003532:	23a4      	movs	r3, #164	; 0xa4
 8003534:	18fb      	adds	r3, r7, r3
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	2202      	movs	r2, #2
 800353a:	4013      	ands	r3, r2
 800353c:	d011      	beq.n	8003562 <HAL_UART_IRQHandler+0xf6>
 800353e:	239c      	movs	r3, #156	; 0x9c
 8003540:	18fb      	adds	r3, r7, r3
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2201      	movs	r2, #1
 8003546:	4013      	ands	r3, r2
 8003548:	d00b      	beq.n	8003562 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2202      	movs	r2, #2
 8003550:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2284      	movs	r2, #132	; 0x84
 8003556:	589b      	ldr	r3, [r3, r2]
 8003558:	2204      	movs	r2, #4
 800355a:	431a      	orrs	r2, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2184      	movs	r1, #132	; 0x84
 8003560:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003562:	23a4      	movs	r3, #164	; 0xa4
 8003564:	18fb      	adds	r3, r7, r3
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	2204      	movs	r2, #4
 800356a:	4013      	ands	r3, r2
 800356c:	d011      	beq.n	8003592 <HAL_UART_IRQHandler+0x126>
 800356e:	239c      	movs	r3, #156	; 0x9c
 8003570:	18fb      	adds	r3, r7, r3
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2201      	movs	r2, #1
 8003576:	4013      	ands	r3, r2
 8003578:	d00b      	beq.n	8003592 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	2204      	movs	r2, #4
 8003580:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2284      	movs	r2, #132	; 0x84
 8003586:	589b      	ldr	r3, [r3, r2]
 8003588:	2202      	movs	r2, #2
 800358a:	431a      	orrs	r2, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2184      	movs	r1, #132	; 0x84
 8003590:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003592:	23a4      	movs	r3, #164	; 0xa4
 8003594:	18fb      	adds	r3, r7, r3
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2208      	movs	r2, #8
 800359a:	4013      	ands	r3, r2
 800359c:	d017      	beq.n	80035ce <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800359e:	23a0      	movs	r3, #160	; 0xa0
 80035a0:	18fb      	adds	r3, r7, r3
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	2220      	movs	r2, #32
 80035a6:	4013      	ands	r3, r2
 80035a8:	d105      	bne.n	80035b6 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80035aa:	239c      	movs	r3, #156	; 0x9c
 80035ac:	18fb      	adds	r3, r7, r3
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	2201      	movs	r2, #1
 80035b2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80035b4:	d00b      	beq.n	80035ce <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	2208      	movs	r2, #8
 80035bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2284      	movs	r2, #132	; 0x84
 80035c2:	589b      	ldr	r3, [r3, r2]
 80035c4:	2208      	movs	r2, #8
 80035c6:	431a      	orrs	r2, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2184      	movs	r1, #132	; 0x84
 80035cc:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80035ce:	23a4      	movs	r3, #164	; 0xa4
 80035d0:	18fb      	adds	r3, r7, r3
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	2380      	movs	r3, #128	; 0x80
 80035d6:	011b      	lsls	r3, r3, #4
 80035d8:	4013      	ands	r3, r2
 80035da:	d013      	beq.n	8003604 <HAL_UART_IRQHandler+0x198>
 80035dc:	23a0      	movs	r3, #160	; 0xa0
 80035de:	18fb      	adds	r3, r7, r3
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	2380      	movs	r3, #128	; 0x80
 80035e4:	04db      	lsls	r3, r3, #19
 80035e6:	4013      	ands	r3, r2
 80035e8:	d00c      	beq.n	8003604 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2280      	movs	r2, #128	; 0x80
 80035f0:	0112      	lsls	r2, r2, #4
 80035f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2284      	movs	r2, #132	; 0x84
 80035f8:	589b      	ldr	r3, [r3, r2]
 80035fa:	2220      	movs	r2, #32
 80035fc:	431a      	orrs	r2, r3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2184      	movs	r1, #132	; 0x84
 8003602:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2284      	movs	r2, #132	; 0x84
 8003608:	589b      	ldr	r3, [r3, r2]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d100      	bne.n	8003610 <HAL_UART_IRQHandler+0x1a4>
 800360e:	e1e7      	b.n	80039e0 <HAL_UART_IRQHandler+0x574>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003610:	23a4      	movs	r3, #164	; 0xa4
 8003612:	18fb      	adds	r3, r7, r3
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	2220      	movs	r2, #32
 8003618:	4013      	ands	r3, r2
 800361a:	d00e      	beq.n	800363a <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800361c:	23a0      	movs	r3, #160	; 0xa0
 800361e:	18fb      	adds	r3, r7, r3
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	2220      	movs	r2, #32
 8003624:	4013      	ands	r3, r2
 8003626:	d008      	beq.n	800363a <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800362c:	2b00      	cmp	r3, #0
 800362e:	d004      	beq.n	800363a <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003634:	687a      	ldr	r2, [r7, #4]
 8003636:	0010      	movs	r0, r2
 8003638:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2284      	movs	r2, #132	; 0x84
 800363e:	589b      	ldr	r3, [r3, r2]
 8003640:	2194      	movs	r1, #148	; 0x94
 8003642:	187a      	adds	r2, r7, r1
 8003644:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	2240      	movs	r2, #64	; 0x40
 800364e:	4013      	ands	r3, r2
 8003650:	2b40      	cmp	r3, #64	; 0x40
 8003652:	d004      	beq.n	800365e <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003654:	187b      	adds	r3, r7, r1
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	2228      	movs	r2, #40	; 0x28
 800365a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800365c:	d047      	beq.n	80036ee <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	0018      	movs	r0, r3
 8003662:	f000 fce5 	bl	8004030 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	2240      	movs	r2, #64	; 0x40
 800366e:	4013      	ands	r3, r2
 8003670:	2b40      	cmp	r3, #64	; 0x40
 8003672:	d137      	bne.n	80036e4 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003674:	f3ef 8310 	mrs	r3, PRIMASK
 8003678:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800367a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800367c:	2090      	movs	r0, #144	; 0x90
 800367e:	183a      	adds	r2, r7, r0
 8003680:	6013      	str	r3, [r2, #0]
 8003682:	2301      	movs	r3, #1
 8003684:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003686:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003688:	f383 8810 	msr	PRIMASK, r3
}
 800368c:	46c0      	nop			; (mov r8, r8)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	689a      	ldr	r2, [r3, #8]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2140      	movs	r1, #64	; 0x40
 800369a:	438a      	bics	r2, r1
 800369c:	609a      	str	r2, [r3, #8]
 800369e:	183b      	adds	r3, r7, r0
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80036a6:	f383 8810 	msr	PRIMASK, r3
}
 80036aa:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d012      	beq.n	80036da <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036b8:	4a14      	ldr	r2, [pc, #80]	; (800370c <HAL_UART_IRQHandler+0x2a0>)
 80036ba:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036c0:	0018      	movs	r0, r3
 80036c2:	f7fd fd07 	bl	80010d4 <HAL_DMA_Abort_IT>
 80036c6:	1e03      	subs	r3, r0, #0
 80036c8:	d01a      	beq.n	8003700 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036d4:	0018      	movs	r0, r3
 80036d6:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036d8:	e012      	b.n	8003700 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	0018      	movs	r0, r3
 80036de:	f000 f98d 	bl	80039fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036e2:	e00d      	b.n	8003700 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	0018      	movs	r0, r3
 80036e8:	f000 f988 	bl	80039fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036ec:	e008      	b.n	8003700 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	0018      	movs	r0, r3
 80036f2:	f000 f983 	bl	80039fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2284      	movs	r2, #132	; 0x84
 80036fa:	2100      	movs	r1, #0
 80036fc:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80036fe:	e16f      	b.n	80039e0 <HAL_UART_IRQHandler+0x574>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003700:	46c0      	nop			; (mov r8, r8)
    return;
 8003702:	e16d      	b.n	80039e0 <HAL_UART_IRQHandler+0x574>
 8003704:	0000080f 	.word	0x0000080f
 8003708:	04000120 	.word	0x04000120
 800370c:	080040f9 	.word	0x080040f9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003714:	2b01      	cmp	r3, #1
 8003716:	d000      	beq.n	800371a <HAL_UART_IRQHandler+0x2ae>
 8003718:	e139      	b.n	800398e <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800371a:	23a4      	movs	r3, #164	; 0xa4
 800371c:	18fb      	adds	r3, r7, r3
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	2210      	movs	r2, #16
 8003722:	4013      	ands	r3, r2
 8003724:	d100      	bne.n	8003728 <HAL_UART_IRQHandler+0x2bc>
 8003726:	e132      	b.n	800398e <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003728:	23a0      	movs	r3, #160	; 0xa0
 800372a:	18fb      	adds	r3, r7, r3
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	2210      	movs	r2, #16
 8003730:	4013      	ands	r3, r2
 8003732:	d100      	bne.n	8003736 <HAL_UART_IRQHandler+0x2ca>
 8003734:	e12b      	b.n	800398e <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	2210      	movs	r2, #16
 800373c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	2240      	movs	r2, #64	; 0x40
 8003746:	4013      	ands	r3, r2
 8003748:	2b40      	cmp	r3, #64	; 0x40
 800374a:	d000      	beq.n	800374e <HAL_UART_IRQHandler+0x2e2>
 800374c:	e09f      	b.n	800388e <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	685a      	ldr	r2, [r3, #4]
 8003756:	217e      	movs	r1, #126	; 0x7e
 8003758:	187b      	adds	r3, r7, r1
 800375a:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800375c:	187b      	adds	r3, r7, r1
 800375e:	881b      	ldrh	r3, [r3, #0]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d100      	bne.n	8003766 <HAL_UART_IRQHandler+0x2fa>
 8003764:	e13e      	b.n	80039e4 <HAL_UART_IRQHandler+0x578>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2258      	movs	r2, #88	; 0x58
 800376a:	5a9b      	ldrh	r3, [r3, r2]
 800376c:	187a      	adds	r2, r7, r1
 800376e:	8812      	ldrh	r2, [r2, #0]
 8003770:	429a      	cmp	r2, r3
 8003772:	d300      	bcc.n	8003776 <HAL_UART_IRQHandler+0x30a>
 8003774:	e136      	b.n	80039e4 <HAL_UART_IRQHandler+0x578>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	187a      	adds	r2, r7, r1
 800377a:	215a      	movs	r1, #90	; 0x5a
 800377c:	8812      	ldrh	r2, [r2, #0]
 800377e:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003784:	699b      	ldr	r3, [r3, #24]
 8003786:	2b20      	cmp	r3, #32
 8003788:	d06f      	beq.n	800386a <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800378a:	f3ef 8310 	mrs	r3, PRIMASK
 800378e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003792:	67bb      	str	r3, [r7, #120]	; 0x78
 8003794:	2301      	movs	r3, #1
 8003796:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800379a:	f383 8810 	msr	PRIMASK, r3
}
 800379e:	46c0      	nop			; (mov r8, r8)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4992      	ldr	r1, [pc, #584]	; (80039f4 <HAL_UART_IRQHandler+0x588>)
 80037ac:	400a      	ands	r2, r1
 80037ae:	601a      	str	r2, [r3, #0]
 80037b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037b2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037b6:	f383 8810 	msr	PRIMASK, r3
}
 80037ba:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037bc:	f3ef 8310 	mrs	r3, PRIMASK
 80037c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80037c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037c4:	677b      	str	r3, [r7, #116]	; 0x74
 80037c6:	2301      	movs	r3, #1
 80037c8:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037cc:	f383 8810 	msr	PRIMASK, r3
}
 80037d0:	46c0      	nop			; (mov r8, r8)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	689a      	ldr	r2, [r3, #8]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	2101      	movs	r1, #1
 80037de:	438a      	bics	r2, r1
 80037e0:	609a      	str	r2, [r3, #8]
 80037e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037e4:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037e8:	f383 8810 	msr	PRIMASK, r3
}
 80037ec:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037ee:	f3ef 8310 	mrs	r3, PRIMASK
 80037f2:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80037f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037f6:	673b      	str	r3, [r7, #112]	; 0x70
 80037f8:	2301      	movs	r3, #1
 80037fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037fe:	f383 8810 	msr	PRIMASK, r3
}
 8003802:	46c0      	nop			; (mov r8, r8)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	689a      	ldr	r2, [r3, #8]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	2140      	movs	r1, #64	; 0x40
 8003810:	438a      	bics	r2, r1
 8003812:	609a      	str	r2, [r3, #8]
 8003814:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003816:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003818:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800381a:	f383 8810 	msr	PRIMASK, r3
}
 800381e:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2280      	movs	r2, #128	; 0x80
 8003824:	2120      	movs	r1, #32
 8003826:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2200      	movs	r2, #0
 800382c:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800382e:	f3ef 8310 	mrs	r3, PRIMASK
 8003832:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8003834:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003836:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003838:	2301      	movs	r3, #1
 800383a:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800383c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800383e:	f383 8810 	msr	PRIMASK, r3
}
 8003842:	46c0      	nop			; (mov r8, r8)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	2110      	movs	r1, #16
 8003850:	438a      	bics	r2, r1
 8003852:	601a      	str	r2, [r3, #0]
 8003854:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003856:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003858:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800385a:	f383 8810 	msr	PRIMASK, r3
}
 800385e:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003864:	0018      	movs	r0, r3
 8003866:	f7fd fbfd 	bl	8001064 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2202      	movs	r2, #2
 800386e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2258      	movs	r2, #88	; 0x58
 8003874:	5a9a      	ldrh	r2, [r3, r2]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	215a      	movs	r1, #90	; 0x5a
 800387a:	5a5b      	ldrh	r3, [r3, r1]
 800387c:	b29b      	uxth	r3, r3
 800387e:	1ad3      	subs	r3, r2, r3
 8003880:	b29a      	uxth	r2, r3
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	0011      	movs	r1, r2
 8003886:	0018      	movs	r0, r3
 8003888:	f000 f8c0 	bl	8003a0c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800388c:	e0aa      	b.n	80039e4 <HAL_UART_IRQHandler+0x578>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2258      	movs	r2, #88	; 0x58
 8003892:	5a99      	ldrh	r1, [r3, r2]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	225a      	movs	r2, #90	; 0x5a
 8003898:	5a9b      	ldrh	r3, [r3, r2]
 800389a:	b29a      	uxth	r2, r3
 800389c:	208e      	movs	r0, #142	; 0x8e
 800389e:	183b      	adds	r3, r7, r0
 80038a0:	1a8a      	subs	r2, r1, r2
 80038a2:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	225a      	movs	r2, #90	; 0x5a
 80038a8:	5a9b      	ldrh	r3, [r3, r2]
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d100      	bne.n	80038b2 <HAL_UART_IRQHandler+0x446>
 80038b0:	e09a      	b.n	80039e8 <HAL_UART_IRQHandler+0x57c>
          && (nb_rx_data > 0U))
 80038b2:	183b      	adds	r3, r7, r0
 80038b4:	881b      	ldrh	r3, [r3, #0]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d100      	bne.n	80038bc <HAL_UART_IRQHandler+0x450>
 80038ba:	e095      	b.n	80039e8 <HAL_UART_IRQHandler+0x57c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038bc:	f3ef 8310 	mrs	r3, PRIMASK
 80038c0:	60fb      	str	r3, [r7, #12]
  return(result);
 80038c2:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038c4:	2488      	movs	r4, #136	; 0x88
 80038c6:	193a      	adds	r2, r7, r4
 80038c8:	6013      	str	r3, [r2, #0]
 80038ca:	2301      	movs	r3, #1
 80038cc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	f383 8810 	msr	PRIMASK, r3
}
 80038d4:	46c0      	nop			; (mov r8, r8)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4945      	ldr	r1, [pc, #276]	; (80039f8 <HAL_UART_IRQHandler+0x58c>)
 80038e2:	400a      	ands	r2, r1
 80038e4:	601a      	str	r2, [r3, #0]
 80038e6:	193b      	adds	r3, r7, r4
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	f383 8810 	msr	PRIMASK, r3
}
 80038f2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038f4:	f3ef 8310 	mrs	r3, PRIMASK
 80038f8:	61bb      	str	r3, [r7, #24]
  return(result);
 80038fa:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038fc:	2484      	movs	r4, #132	; 0x84
 80038fe:	193a      	adds	r2, r7, r4
 8003900:	6013      	str	r3, [r2, #0]
 8003902:	2301      	movs	r3, #1
 8003904:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	f383 8810 	msr	PRIMASK, r3
}
 800390c:	46c0      	nop			; (mov r8, r8)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	689a      	ldr	r2, [r3, #8]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	2101      	movs	r1, #1
 800391a:	438a      	bics	r2, r1
 800391c:	609a      	str	r2, [r3, #8]
 800391e:	193b      	adds	r3, r7, r4
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003924:	6a3b      	ldr	r3, [r7, #32]
 8003926:	f383 8810 	msr	PRIMASK, r3
}
 800392a:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2280      	movs	r2, #128	; 0x80
 8003930:	2120      	movs	r1, #32
 8003932:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2200      	movs	r2, #0
 8003938:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003940:	f3ef 8310 	mrs	r3, PRIMASK
 8003944:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003946:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003948:	2480      	movs	r4, #128	; 0x80
 800394a:	193a      	adds	r2, r7, r4
 800394c:	6013      	str	r3, [r2, #0]
 800394e:	2301      	movs	r3, #1
 8003950:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003954:	f383 8810 	msr	PRIMASK, r3
}
 8003958:	46c0      	nop			; (mov r8, r8)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2110      	movs	r1, #16
 8003966:	438a      	bics	r2, r1
 8003968:	601a      	str	r2, [r3, #0]
 800396a:	193b      	adds	r3, r7, r4
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003972:	f383 8810 	msr	PRIMASK, r3
}
 8003976:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2202      	movs	r2, #2
 800397c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800397e:	183b      	adds	r3, r7, r0
 8003980:	881a      	ldrh	r2, [r3, #0]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	0011      	movs	r1, r2
 8003986:	0018      	movs	r0, r3
 8003988:	f000 f840 	bl	8003a0c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800398c:	e02c      	b.n	80039e8 <HAL_UART_IRQHandler+0x57c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800398e:	23a4      	movs	r3, #164	; 0xa4
 8003990:	18fb      	adds	r3, r7, r3
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2280      	movs	r2, #128	; 0x80
 8003996:	4013      	ands	r3, r2
 8003998:	d00f      	beq.n	80039ba <HAL_UART_IRQHandler+0x54e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800399a:	23a0      	movs	r3, #160	; 0xa0
 800399c:	18fb      	adds	r3, r7, r3
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	2280      	movs	r2, #128	; 0x80
 80039a2:	4013      	ands	r3, r2
 80039a4:	d009      	beq.n	80039ba <HAL_UART_IRQHandler+0x54e>
  {
    if (huart->TxISR != NULL)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d01e      	beq.n	80039ec <HAL_UART_IRQHandler+0x580>
    {
      huart->TxISR(huart);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	0010      	movs	r0, r2
 80039b6:	4798      	blx	r3
    }
    return;
 80039b8:	e018      	b.n	80039ec <HAL_UART_IRQHandler+0x580>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80039ba:	23a4      	movs	r3, #164	; 0xa4
 80039bc:	18fb      	adds	r3, r7, r3
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	2240      	movs	r2, #64	; 0x40
 80039c2:	4013      	ands	r3, r2
 80039c4:	d013      	beq.n	80039ee <HAL_UART_IRQHandler+0x582>
 80039c6:	23a0      	movs	r3, #160	; 0xa0
 80039c8:	18fb      	adds	r3, r7, r3
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	2240      	movs	r2, #64	; 0x40
 80039ce:	4013      	ands	r3, r2
 80039d0:	d00d      	beq.n	80039ee <HAL_UART_IRQHandler+0x582>
  {
    UART_EndTransmit_IT(huart);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	0018      	movs	r0, r3
 80039d6:	f000 fba6 	bl	8004126 <UART_EndTransmit_IT>
    return;
 80039da:	e008      	b.n	80039ee <HAL_UART_IRQHandler+0x582>
      return;
 80039dc:	46c0      	nop			; (mov r8, r8)
 80039de:	e006      	b.n	80039ee <HAL_UART_IRQHandler+0x582>
    return;
 80039e0:	46c0      	nop			; (mov r8, r8)
 80039e2:	e004      	b.n	80039ee <HAL_UART_IRQHandler+0x582>
      return;
 80039e4:	46c0      	nop			; (mov r8, r8)
 80039e6:	e002      	b.n	80039ee <HAL_UART_IRQHandler+0x582>
      return;
 80039e8:	46c0      	nop			; (mov r8, r8)
 80039ea:	e000      	b.n	80039ee <HAL_UART_IRQHandler+0x582>
    return;
 80039ec:	46c0      	nop			; (mov r8, r8)
  }

}
 80039ee:	46bd      	mov	sp, r7
 80039f0:	b02b      	add	sp, #172	; 0xac
 80039f2:	bd90      	pop	{r4, r7, pc}
 80039f4:	fffffeff 	.word	0xfffffeff
 80039f8:	fffffedf 	.word	0xfffffedf

080039fc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b082      	sub	sp, #8
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003a04:	46c0      	nop			; (mov r8, r8)
 8003a06:	46bd      	mov	sp, r7
 8003a08:	b002      	add	sp, #8
 8003a0a:	bd80      	pop	{r7, pc}

08003a0c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b082      	sub	sp, #8
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	000a      	movs	r2, r1
 8003a16:	1cbb      	adds	r3, r7, #2
 8003a18:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003a1a:	46c0      	nop			; (mov r8, r8)
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	b002      	add	sp, #8
 8003a20:	bd80      	pop	{r7, pc}
	...

08003a24 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b088      	sub	sp, #32
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a2c:	231e      	movs	r3, #30
 8003a2e:	18fb      	adds	r3, r7, r3
 8003a30:	2200      	movs	r2, #0
 8003a32:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	689a      	ldr	r2, [r3, #8]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	691b      	ldr	r3, [r3, #16]
 8003a3c:	431a      	orrs	r2, r3
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	695b      	ldr	r3, [r3, #20]
 8003a42:	431a      	orrs	r2, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	69db      	ldr	r3, [r3, #28]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a8d      	ldr	r2, [pc, #564]	; (8003c88 <UART_SetConfig+0x264>)
 8003a54:	4013      	ands	r3, r2
 8003a56:	0019      	movs	r1, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	697a      	ldr	r2, [r7, #20]
 8003a5e:	430a      	orrs	r2, r1
 8003a60:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	4a88      	ldr	r2, [pc, #544]	; (8003c8c <UART_SetConfig+0x268>)
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	0019      	movs	r1, r3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	68da      	ldr	r2, [r3, #12]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	430a      	orrs	r2, r1
 8003a78:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	699b      	ldr	r3, [r3, #24]
 8003a7e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6a1b      	ldr	r3, [r3, #32]
 8003a84:	697a      	ldr	r2, [r7, #20]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	4a7f      	ldr	r2, [pc, #508]	; (8003c90 <UART_SetConfig+0x26c>)
 8003a92:	4013      	ands	r3, r2
 8003a94:	0019      	movs	r1, r3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	697a      	ldr	r2, [r7, #20]
 8003a9c:	430a      	orrs	r2, r1
 8003a9e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a7b      	ldr	r2, [pc, #492]	; (8003c94 <UART_SetConfig+0x270>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d127      	bne.n	8003afa <UART_SetConfig+0xd6>
 8003aaa:	4b7b      	ldr	r3, [pc, #492]	; (8003c98 <UART_SetConfig+0x274>)
 8003aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aae:	2203      	movs	r2, #3
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	2b03      	cmp	r3, #3
 8003ab4:	d00d      	beq.n	8003ad2 <UART_SetConfig+0xae>
 8003ab6:	d81b      	bhi.n	8003af0 <UART_SetConfig+0xcc>
 8003ab8:	2b02      	cmp	r3, #2
 8003aba:	d014      	beq.n	8003ae6 <UART_SetConfig+0xc2>
 8003abc:	d818      	bhi.n	8003af0 <UART_SetConfig+0xcc>
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d002      	beq.n	8003ac8 <UART_SetConfig+0xa4>
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d00a      	beq.n	8003adc <UART_SetConfig+0xb8>
 8003ac6:	e013      	b.n	8003af0 <UART_SetConfig+0xcc>
 8003ac8:	231f      	movs	r3, #31
 8003aca:	18fb      	adds	r3, r7, r3
 8003acc:	2200      	movs	r2, #0
 8003ace:	701a      	strb	r2, [r3, #0]
 8003ad0:	e021      	b.n	8003b16 <UART_SetConfig+0xf2>
 8003ad2:	231f      	movs	r3, #31
 8003ad4:	18fb      	adds	r3, r7, r3
 8003ad6:	2202      	movs	r2, #2
 8003ad8:	701a      	strb	r2, [r3, #0]
 8003ada:	e01c      	b.n	8003b16 <UART_SetConfig+0xf2>
 8003adc:	231f      	movs	r3, #31
 8003ade:	18fb      	adds	r3, r7, r3
 8003ae0:	2204      	movs	r2, #4
 8003ae2:	701a      	strb	r2, [r3, #0]
 8003ae4:	e017      	b.n	8003b16 <UART_SetConfig+0xf2>
 8003ae6:	231f      	movs	r3, #31
 8003ae8:	18fb      	adds	r3, r7, r3
 8003aea:	2208      	movs	r2, #8
 8003aec:	701a      	strb	r2, [r3, #0]
 8003aee:	e012      	b.n	8003b16 <UART_SetConfig+0xf2>
 8003af0:	231f      	movs	r3, #31
 8003af2:	18fb      	adds	r3, r7, r3
 8003af4:	2210      	movs	r2, #16
 8003af6:	701a      	strb	r2, [r3, #0]
 8003af8:	e00d      	b.n	8003b16 <UART_SetConfig+0xf2>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a67      	ldr	r2, [pc, #412]	; (8003c9c <UART_SetConfig+0x278>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d104      	bne.n	8003b0e <UART_SetConfig+0xea>
 8003b04:	231f      	movs	r3, #31
 8003b06:	18fb      	adds	r3, r7, r3
 8003b08:	2200      	movs	r2, #0
 8003b0a:	701a      	strb	r2, [r3, #0]
 8003b0c:	e003      	b.n	8003b16 <UART_SetConfig+0xf2>
 8003b0e:	231f      	movs	r3, #31
 8003b10:	18fb      	adds	r3, r7, r3
 8003b12:	2210      	movs	r2, #16
 8003b14:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	69da      	ldr	r2, [r3, #28]
 8003b1a:	2380      	movs	r3, #128	; 0x80
 8003b1c:	021b      	lsls	r3, r3, #8
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d15c      	bne.n	8003bdc <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8003b22:	231f      	movs	r3, #31
 8003b24:	18fb      	adds	r3, r7, r3
 8003b26:	781b      	ldrb	r3, [r3, #0]
 8003b28:	2b08      	cmp	r3, #8
 8003b2a:	d015      	beq.n	8003b58 <UART_SetConfig+0x134>
 8003b2c:	dc18      	bgt.n	8003b60 <UART_SetConfig+0x13c>
 8003b2e:	2b04      	cmp	r3, #4
 8003b30:	d00d      	beq.n	8003b4e <UART_SetConfig+0x12a>
 8003b32:	dc15      	bgt.n	8003b60 <UART_SetConfig+0x13c>
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d002      	beq.n	8003b3e <UART_SetConfig+0x11a>
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d005      	beq.n	8003b48 <UART_SetConfig+0x124>
 8003b3c:	e010      	b.n	8003b60 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b3e:	f7ff f8d9 	bl	8002cf4 <HAL_RCC_GetPCLK1Freq>
 8003b42:	0003      	movs	r3, r0
 8003b44:	61bb      	str	r3, [r7, #24]
        break;
 8003b46:	e012      	b.n	8003b6e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b48:	4b55      	ldr	r3, [pc, #340]	; (8003ca0 <UART_SetConfig+0x27c>)
 8003b4a:	61bb      	str	r3, [r7, #24]
        break;
 8003b4c:	e00f      	b.n	8003b6e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b4e:	f7ff f871 	bl	8002c34 <HAL_RCC_GetSysClockFreq>
 8003b52:	0003      	movs	r3, r0
 8003b54:	61bb      	str	r3, [r7, #24]
        break;
 8003b56:	e00a      	b.n	8003b6e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b58:	2380      	movs	r3, #128	; 0x80
 8003b5a:	021b      	lsls	r3, r3, #8
 8003b5c:	61bb      	str	r3, [r7, #24]
        break;
 8003b5e:	e006      	b.n	8003b6e <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8003b60:	2300      	movs	r3, #0
 8003b62:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003b64:	231e      	movs	r3, #30
 8003b66:	18fb      	adds	r3, r7, r3
 8003b68:	2201      	movs	r2, #1
 8003b6a:	701a      	strb	r2, [r3, #0]
        break;
 8003b6c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003b6e:	69bb      	ldr	r3, [r7, #24]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d100      	bne.n	8003b76 <UART_SetConfig+0x152>
 8003b74:	e07a      	b.n	8003c6c <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003b76:	69bb      	ldr	r3, [r7, #24]
 8003b78:	005a      	lsls	r2, r3, #1
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	085b      	lsrs	r3, r3, #1
 8003b80:	18d2      	adds	r2, r2, r3
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	0019      	movs	r1, r3
 8003b88:	0010      	movs	r0, r2
 8003b8a:	f7fc fabd 	bl	8000108 <__udivsi3>
 8003b8e:	0003      	movs	r3, r0
 8003b90:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	2b0f      	cmp	r3, #15
 8003b96:	d91c      	bls.n	8003bd2 <UART_SetConfig+0x1ae>
 8003b98:	693a      	ldr	r2, [r7, #16]
 8003b9a:	2380      	movs	r3, #128	; 0x80
 8003b9c:	025b      	lsls	r3, r3, #9
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d217      	bcs.n	8003bd2 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	b29a      	uxth	r2, r3
 8003ba6:	200e      	movs	r0, #14
 8003ba8:	183b      	adds	r3, r7, r0
 8003baa:	210f      	movs	r1, #15
 8003bac:	438a      	bics	r2, r1
 8003bae:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	085b      	lsrs	r3, r3, #1
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	2207      	movs	r2, #7
 8003bb8:	4013      	ands	r3, r2
 8003bba:	b299      	uxth	r1, r3
 8003bbc:	183b      	adds	r3, r7, r0
 8003bbe:	183a      	adds	r2, r7, r0
 8003bc0:	8812      	ldrh	r2, [r2, #0]
 8003bc2:	430a      	orrs	r2, r1
 8003bc4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	183a      	adds	r2, r7, r0
 8003bcc:	8812      	ldrh	r2, [r2, #0]
 8003bce:	60da      	str	r2, [r3, #12]
 8003bd0:	e04c      	b.n	8003c6c <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8003bd2:	231e      	movs	r3, #30
 8003bd4:	18fb      	adds	r3, r7, r3
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	701a      	strb	r2, [r3, #0]
 8003bda:	e047      	b.n	8003c6c <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003bdc:	231f      	movs	r3, #31
 8003bde:	18fb      	adds	r3, r7, r3
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	2b08      	cmp	r3, #8
 8003be4:	d015      	beq.n	8003c12 <UART_SetConfig+0x1ee>
 8003be6:	dc18      	bgt.n	8003c1a <UART_SetConfig+0x1f6>
 8003be8:	2b04      	cmp	r3, #4
 8003bea:	d00d      	beq.n	8003c08 <UART_SetConfig+0x1e4>
 8003bec:	dc15      	bgt.n	8003c1a <UART_SetConfig+0x1f6>
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d002      	beq.n	8003bf8 <UART_SetConfig+0x1d4>
 8003bf2:	2b02      	cmp	r3, #2
 8003bf4:	d005      	beq.n	8003c02 <UART_SetConfig+0x1de>
 8003bf6:	e010      	b.n	8003c1a <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bf8:	f7ff f87c 	bl	8002cf4 <HAL_RCC_GetPCLK1Freq>
 8003bfc:	0003      	movs	r3, r0
 8003bfe:	61bb      	str	r3, [r7, #24]
        break;
 8003c00:	e012      	b.n	8003c28 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c02:	4b27      	ldr	r3, [pc, #156]	; (8003ca0 <UART_SetConfig+0x27c>)
 8003c04:	61bb      	str	r3, [r7, #24]
        break;
 8003c06:	e00f      	b.n	8003c28 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c08:	f7ff f814 	bl	8002c34 <HAL_RCC_GetSysClockFreq>
 8003c0c:	0003      	movs	r3, r0
 8003c0e:	61bb      	str	r3, [r7, #24]
        break;
 8003c10:	e00a      	b.n	8003c28 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c12:	2380      	movs	r3, #128	; 0x80
 8003c14:	021b      	lsls	r3, r3, #8
 8003c16:	61bb      	str	r3, [r7, #24]
        break;
 8003c18:	e006      	b.n	8003c28 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003c1e:	231e      	movs	r3, #30
 8003c20:	18fb      	adds	r3, r7, r3
 8003c22:	2201      	movs	r2, #1
 8003c24:	701a      	strb	r2, [r3, #0]
        break;
 8003c26:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003c28:	69bb      	ldr	r3, [r7, #24]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d01e      	beq.n	8003c6c <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	085a      	lsrs	r2, r3, #1
 8003c34:	69bb      	ldr	r3, [r7, #24]
 8003c36:	18d2      	adds	r2, r2, r3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	0019      	movs	r1, r3
 8003c3e:	0010      	movs	r0, r2
 8003c40:	f7fc fa62 	bl	8000108 <__udivsi3>
 8003c44:	0003      	movs	r3, r0
 8003c46:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	2b0f      	cmp	r3, #15
 8003c4c:	d90a      	bls.n	8003c64 <UART_SetConfig+0x240>
 8003c4e:	693a      	ldr	r2, [r7, #16]
 8003c50:	2380      	movs	r3, #128	; 0x80
 8003c52:	025b      	lsls	r3, r3, #9
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d205      	bcs.n	8003c64 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	b29a      	uxth	r2, r3
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	60da      	str	r2, [r3, #12]
 8003c62:	e003      	b.n	8003c6c <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8003c64:	231e      	movs	r3, #30
 8003c66:	18fb      	adds	r3, r7, r3
 8003c68:	2201      	movs	r2, #1
 8003c6a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003c78:	231e      	movs	r3, #30
 8003c7a:	18fb      	adds	r3, r7, r3
 8003c7c:	781b      	ldrb	r3, [r3, #0]
}
 8003c7e:	0018      	movs	r0, r3
 8003c80:	46bd      	mov	sp, r7
 8003c82:	b008      	add	sp, #32
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	46c0      	nop			; (mov r8, r8)
 8003c88:	ffff69f3 	.word	0xffff69f3
 8003c8c:	ffffcfff 	.word	0xffffcfff
 8003c90:	fffff4ff 	.word	0xfffff4ff
 8003c94:	40013800 	.word	0x40013800
 8003c98:	40021000 	.word	0x40021000
 8003c9c:	40004400 	.word	0x40004400
 8003ca0:	007a1200 	.word	0x007a1200

08003ca4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b082      	sub	sp, #8
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	d00b      	beq.n	8003cce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	4a4a      	ldr	r2, [pc, #296]	; (8003de8 <UART_AdvFeatureConfig+0x144>)
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	0019      	movs	r1, r3
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	430a      	orrs	r2, r1
 8003ccc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd2:	2202      	movs	r2, #2
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	d00b      	beq.n	8003cf0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	4a43      	ldr	r2, [pc, #268]	; (8003dec <UART_AdvFeatureConfig+0x148>)
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	0019      	movs	r1, r3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	430a      	orrs	r2, r1
 8003cee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf4:	2204      	movs	r2, #4
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	d00b      	beq.n	8003d12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	4a3b      	ldr	r2, [pc, #236]	; (8003df0 <UART_AdvFeatureConfig+0x14c>)
 8003d02:	4013      	ands	r3, r2
 8003d04:	0019      	movs	r1, r3
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	430a      	orrs	r2, r1
 8003d10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d16:	2208      	movs	r2, #8
 8003d18:	4013      	ands	r3, r2
 8003d1a:	d00b      	beq.n	8003d34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	4a34      	ldr	r2, [pc, #208]	; (8003df4 <UART_AdvFeatureConfig+0x150>)
 8003d24:	4013      	ands	r3, r2
 8003d26:	0019      	movs	r1, r3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	430a      	orrs	r2, r1
 8003d32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d38:	2210      	movs	r2, #16
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	d00b      	beq.n	8003d56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	4a2c      	ldr	r2, [pc, #176]	; (8003df8 <UART_AdvFeatureConfig+0x154>)
 8003d46:	4013      	ands	r3, r2
 8003d48:	0019      	movs	r1, r3
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	430a      	orrs	r2, r1
 8003d54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5a:	2220      	movs	r2, #32
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	d00b      	beq.n	8003d78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	4a25      	ldr	r2, [pc, #148]	; (8003dfc <UART_AdvFeatureConfig+0x158>)
 8003d68:	4013      	ands	r3, r2
 8003d6a:	0019      	movs	r1, r3
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	430a      	orrs	r2, r1
 8003d76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7c:	2240      	movs	r2, #64	; 0x40
 8003d7e:	4013      	ands	r3, r2
 8003d80:	d01d      	beq.n	8003dbe <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	4a1d      	ldr	r2, [pc, #116]	; (8003e00 <UART_AdvFeatureConfig+0x15c>)
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	0019      	movs	r1, r3
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	430a      	orrs	r2, r1
 8003d98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d9e:	2380      	movs	r3, #128	; 0x80
 8003da0:	035b      	lsls	r3, r3, #13
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d10b      	bne.n	8003dbe <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	4a15      	ldr	r2, [pc, #84]	; (8003e04 <UART_AdvFeatureConfig+0x160>)
 8003dae:	4013      	ands	r3, r2
 8003db0:	0019      	movs	r1, r3
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	430a      	orrs	r2, r1
 8003dbc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc2:	2280      	movs	r2, #128	; 0x80
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	d00b      	beq.n	8003de0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	4a0e      	ldr	r2, [pc, #56]	; (8003e08 <UART_AdvFeatureConfig+0x164>)
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	0019      	movs	r1, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	430a      	orrs	r2, r1
 8003dde:	605a      	str	r2, [r3, #4]
  }
}
 8003de0:	46c0      	nop			; (mov r8, r8)
 8003de2:	46bd      	mov	sp, r7
 8003de4:	b002      	add	sp, #8
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	fffdffff 	.word	0xfffdffff
 8003dec:	fffeffff 	.word	0xfffeffff
 8003df0:	fffbffff 	.word	0xfffbffff
 8003df4:	ffff7fff 	.word	0xffff7fff
 8003df8:	ffffefff 	.word	0xffffefff
 8003dfc:	ffffdfff 	.word	0xffffdfff
 8003e00:	ffefffff 	.word	0xffefffff
 8003e04:	ff9fffff 	.word	0xff9fffff
 8003e08:	fff7ffff 	.word	0xfff7ffff

08003e0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b092      	sub	sp, #72	; 0x48
 8003e10:	af02      	add	r7, sp, #8
 8003e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2284      	movs	r2, #132	; 0x84
 8003e18:	2100      	movs	r1, #0
 8003e1a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003e1c:	f7fc fff2 	bl	8000e04 <HAL_GetTick>
 8003e20:	0003      	movs	r3, r0
 8003e22:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	2208      	movs	r2, #8
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	2b08      	cmp	r3, #8
 8003e30:	d12c      	bne.n	8003e8c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e34:	2280      	movs	r2, #128	; 0x80
 8003e36:	0391      	lsls	r1, r2, #14
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	4a46      	ldr	r2, [pc, #280]	; (8003f54 <UART_CheckIdleState+0x148>)
 8003e3c:	9200      	str	r2, [sp, #0]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f000 f88c 	bl	8003f5c <UART_WaitOnFlagUntilTimeout>
 8003e44:	1e03      	subs	r3, r0, #0
 8003e46:	d021      	beq.n	8003e8c <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e48:	f3ef 8310 	mrs	r3, PRIMASK
 8003e4c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003e50:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e52:	2301      	movs	r3, #1
 8003e54:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e58:	f383 8810 	msr	PRIMASK, r3
}
 8003e5c:	46c0      	nop			; (mov r8, r8)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	2180      	movs	r1, #128	; 0x80
 8003e6a:	438a      	bics	r2, r1
 8003e6c:	601a      	str	r2, [r3, #0]
 8003e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e70:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e74:	f383 8810 	msr	PRIMASK, r3
}
 8003e78:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2220      	movs	r2, #32
 8003e7e:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2278      	movs	r2, #120	; 0x78
 8003e84:	2100      	movs	r1, #0
 8003e86:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e88:	2303      	movs	r3, #3
 8003e8a:	e05f      	b.n	8003f4c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	2204      	movs	r2, #4
 8003e94:	4013      	ands	r3, r2
 8003e96:	2b04      	cmp	r3, #4
 8003e98:	d146      	bne.n	8003f28 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e9c:	2280      	movs	r2, #128	; 0x80
 8003e9e:	03d1      	lsls	r1, r2, #15
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	4a2c      	ldr	r2, [pc, #176]	; (8003f54 <UART_CheckIdleState+0x148>)
 8003ea4:	9200      	str	r2, [sp, #0]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f000 f858 	bl	8003f5c <UART_WaitOnFlagUntilTimeout>
 8003eac:	1e03      	subs	r3, r0, #0
 8003eae:	d03b      	beq.n	8003f28 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003eb0:	f3ef 8310 	mrs	r3, PRIMASK
 8003eb4:	60fb      	str	r3, [r7, #12]
  return(result);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003eb8:	637b      	str	r3, [r7, #52]	; 0x34
 8003eba:	2301      	movs	r3, #1
 8003ebc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	f383 8810 	msr	PRIMASK, r3
}
 8003ec4:	46c0      	nop			; (mov r8, r8)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4921      	ldr	r1, [pc, #132]	; (8003f58 <UART_CheckIdleState+0x14c>)
 8003ed2:	400a      	ands	r2, r1
 8003ed4:	601a      	str	r2, [r3, #0]
 8003ed6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ed8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	f383 8810 	msr	PRIMASK, r3
}
 8003ee0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ee2:	f3ef 8310 	mrs	r3, PRIMASK
 8003ee6:	61bb      	str	r3, [r7, #24]
  return(result);
 8003ee8:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eea:	633b      	str	r3, [r7, #48]	; 0x30
 8003eec:	2301      	movs	r3, #1
 8003eee:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	f383 8810 	msr	PRIMASK, r3
}
 8003ef6:	46c0      	nop			; (mov r8, r8)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	689a      	ldr	r2, [r3, #8]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	2101      	movs	r1, #1
 8003f04:	438a      	bics	r2, r1
 8003f06:	609a      	str	r2, [r3, #8]
 8003f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f0a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f0c:	6a3b      	ldr	r3, [r7, #32]
 8003f0e:	f383 8810 	msr	PRIMASK, r3
}
 8003f12:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2280      	movs	r2, #128	; 0x80
 8003f18:	2120      	movs	r1, #32
 8003f1a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2278      	movs	r2, #120	; 0x78
 8003f20:	2100      	movs	r1, #0
 8003f22:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f24:	2303      	movs	r3, #3
 8003f26:	e011      	b.n	8003f4c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2220      	movs	r2, #32
 8003f2c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2280      	movs	r2, #128	; 0x80
 8003f32:	2120      	movs	r1, #32
 8003f34:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2278      	movs	r2, #120	; 0x78
 8003f46:	2100      	movs	r1, #0
 8003f48:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003f4a:	2300      	movs	r3, #0
}
 8003f4c:	0018      	movs	r0, r3
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	b010      	add	sp, #64	; 0x40
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	01ffffff 	.word	0x01ffffff
 8003f58:	fffffedf 	.word	0xfffffedf

08003f5c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b084      	sub	sp, #16
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	60f8      	str	r0, [r7, #12]
 8003f64:	60b9      	str	r1, [r7, #8]
 8003f66:	603b      	str	r3, [r7, #0]
 8003f68:	1dfb      	adds	r3, r7, #7
 8003f6a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f6c:	e04b      	b.n	8004006 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	3301      	adds	r3, #1
 8003f72:	d048      	beq.n	8004006 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f74:	f7fc ff46 	bl	8000e04 <HAL_GetTick>
 8003f78:	0002      	movs	r2, r0
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	69ba      	ldr	r2, [r7, #24]
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d302      	bcc.n	8003f8a <UART_WaitOnFlagUntilTimeout+0x2e>
 8003f84:	69bb      	ldr	r3, [r7, #24]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d101      	bne.n	8003f8e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e04b      	b.n	8004026 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	2204      	movs	r2, #4
 8003f96:	4013      	ands	r3, r2
 8003f98:	d035      	beq.n	8004006 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	69db      	ldr	r3, [r3, #28]
 8003fa0:	2208      	movs	r2, #8
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	2b08      	cmp	r3, #8
 8003fa6:	d111      	bne.n	8003fcc <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	2208      	movs	r2, #8
 8003fae:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	0018      	movs	r0, r3
 8003fb4:	f000 f83c 	bl	8004030 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2284      	movs	r2, #132	; 0x84
 8003fbc:	2108      	movs	r1, #8
 8003fbe:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2278      	movs	r2, #120	; 0x78
 8003fc4:	2100      	movs	r1, #0
 8003fc6:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e02c      	b.n	8004026 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	69da      	ldr	r2, [r3, #28]
 8003fd2:	2380      	movs	r3, #128	; 0x80
 8003fd4:	011b      	lsls	r3, r3, #4
 8003fd6:	401a      	ands	r2, r3
 8003fd8:	2380      	movs	r3, #128	; 0x80
 8003fda:	011b      	lsls	r3, r3, #4
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d112      	bne.n	8004006 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2280      	movs	r2, #128	; 0x80
 8003fe6:	0112      	lsls	r2, r2, #4
 8003fe8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	0018      	movs	r0, r3
 8003fee:	f000 f81f 	bl	8004030 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2284      	movs	r2, #132	; 0x84
 8003ff6:	2120      	movs	r1, #32
 8003ff8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2278      	movs	r2, #120	; 0x78
 8003ffe:	2100      	movs	r1, #0
 8004000:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	e00f      	b.n	8004026 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	69db      	ldr	r3, [r3, #28]
 800400c:	68ba      	ldr	r2, [r7, #8]
 800400e:	4013      	ands	r3, r2
 8004010:	68ba      	ldr	r2, [r7, #8]
 8004012:	1ad3      	subs	r3, r2, r3
 8004014:	425a      	negs	r2, r3
 8004016:	4153      	adcs	r3, r2
 8004018:	b2db      	uxtb	r3, r3
 800401a:	001a      	movs	r2, r3
 800401c:	1dfb      	adds	r3, r7, #7
 800401e:	781b      	ldrb	r3, [r3, #0]
 8004020:	429a      	cmp	r2, r3
 8004022:	d0a4      	beq.n	8003f6e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004024:	2300      	movs	r3, #0
}
 8004026:	0018      	movs	r0, r3
 8004028:	46bd      	mov	sp, r7
 800402a:	b004      	add	sp, #16
 800402c:	bd80      	pop	{r7, pc}
	...

08004030 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b08e      	sub	sp, #56	; 0x38
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004038:	f3ef 8310 	mrs	r3, PRIMASK
 800403c:	617b      	str	r3, [r7, #20]
  return(result);
 800403e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004040:	637b      	str	r3, [r7, #52]	; 0x34
 8004042:	2301      	movs	r3, #1
 8004044:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004046:	69bb      	ldr	r3, [r7, #24]
 8004048:	f383 8810 	msr	PRIMASK, r3
}
 800404c:	46c0      	nop			; (mov r8, r8)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4926      	ldr	r1, [pc, #152]	; (80040f4 <UART_EndRxTransfer+0xc4>)
 800405a:	400a      	ands	r2, r1
 800405c:	601a      	str	r2, [r3, #0]
 800405e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004060:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004062:	69fb      	ldr	r3, [r7, #28]
 8004064:	f383 8810 	msr	PRIMASK, r3
}
 8004068:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800406a:	f3ef 8310 	mrs	r3, PRIMASK
 800406e:	623b      	str	r3, [r7, #32]
  return(result);
 8004070:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004072:	633b      	str	r3, [r7, #48]	; 0x30
 8004074:	2301      	movs	r3, #1
 8004076:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407a:	f383 8810 	msr	PRIMASK, r3
}
 800407e:	46c0      	nop			; (mov r8, r8)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	689a      	ldr	r2, [r3, #8]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	2101      	movs	r1, #1
 800408c:	438a      	bics	r2, r1
 800408e:	609a      	str	r2, [r3, #8]
 8004090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004092:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004096:	f383 8810 	msr	PRIMASK, r3
}
 800409a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d118      	bne.n	80040d6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040a4:	f3ef 8310 	mrs	r3, PRIMASK
 80040a8:	60bb      	str	r3, [r7, #8]
  return(result);
 80040aa:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040ae:	2301      	movs	r3, #1
 80040b0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	f383 8810 	msr	PRIMASK, r3
}
 80040b8:	46c0      	nop			; (mov r8, r8)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	2110      	movs	r1, #16
 80040c6:	438a      	bics	r2, r1
 80040c8:	601a      	str	r2, [r3, #0]
 80040ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040cc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	f383 8810 	msr	PRIMASK, r3
}
 80040d4:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2280      	movs	r2, #128	; 0x80
 80040da:	2120      	movs	r1, #32
 80040dc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2200      	movs	r2, #0
 80040e8:	669a      	str	r2, [r3, #104]	; 0x68
}
 80040ea:	46c0      	nop			; (mov r8, r8)
 80040ec:	46bd      	mov	sp, r7
 80040ee:	b00e      	add	sp, #56	; 0x38
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	46c0      	nop			; (mov r8, r8)
 80040f4:	fffffedf 	.word	0xfffffedf

080040f8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b084      	sub	sp, #16
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004104:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	225a      	movs	r2, #90	; 0x5a
 800410a:	2100      	movs	r1, #0
 800410c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2252      	movs	r2, #82	; 0x52
 8004112:	2100      	movs	r1, #0
 8004114:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	0018      	movs	r0, r3
 800411a:	f7ff fc6f 	bl	80039fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800411e:	46c0      	nop			; (mov r8, r8)
 8004120:	46bd      	mov	sp, r7
 8004122:	b004      	add	sp, #16
 8004124:	bd80      	pop	{r7, pc}

08004126 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004126:	b580      	push	{r7, lr}
 8004128:	b086      	sub	sp, #24
 800412a:	af00      	add	r7, sp, #0
 800412c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800412e:	f3ef 8310 	mrs	r3, PRIMASK
 8004132:	60bb      	str	r3, [r7, #8]
  return(result);
 8004134:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004136:	617b      	str	r3, [r7, #20]
 8004138:	2301      	movs	r3, #1
 800413a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f383 8810 	msr	PRIMASK, r3
}
 8004142:	46c0      	nop			; (mov r8, r8)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	2140      	movs	r1, #64	; 0x40
 8004150:	438a      	bics	r2, r1
 8004152:	601a      	str	r2, [r3, #0]
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	f383 8810 	msr	PRIMASK, r3
}
 800415e:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2220      	movs	r2, #32
 8004164:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	0018      	movs	r0, r3
 8004170:	f7fc f88c 	bl	800028c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004174:	46c0      	nop			; (mov r8, r8)
 8004176:	46bd      	mov	sp, r7
 8004178:	b006      	add	sp, #24
 800417a:	bd80      	pop	{r7, pc}

0800417c <memset>:
 800417c:	0003      	movs	r3, r0
 800417e:	1882      	adds	r2, r0, r2
 8004180:	4293      	cmp	r3, r2
 8004182:	d100      	bne.n	8004186 <memset+0xa>
 8004184:	4770      	bx	lr
 8004186:	7019      	strb	r1, [r3, #0]
 8004188:	3301      	adds	r3, #1
 800418a:	e7f9      	b.n	8004180 <memset+0x4>

0800418c <__libc_init_array>:
 800418c:	b570      	push	{r4, r5, r6, lr}
 800418e:	2600      	movs	r6, #0
 8004190:	4c0c      	ldr	r4, [pc, #48]	; (80041c4 <__libc_init_array+0x38>)
 8004192:	4d0d      	ldr	r5, [pc, #52]	; (80041c8 <__libc_init_array+0x3c>)
 8004194:	1b64      	subs	r4, r4, r5
 8004196:	10a4      	asrs	r4, r4, #2
 8004198:	42a6      	cmp	r6, r4
 800419a:	d109      	bne.n	80041b0 <__libc_init_array+0x24>
 800419c:	2600      	movs	r6, #0
 800419e:	f000 f819 	bl	80041d4 <_init>
 80041a2:	4c0a      	ldr	r4, [pc, #40]	; (80041cc <__libc_init_array+0x40>)
 80041a4:	4d0a      	ldr	r5, [pc, #40]	; (80041d0 <__libc_init_array+0x44>)
 80041a6:	1b64      	subs	r4, r4, r5
 80041a8:	10a4      	asrs	r4, r4, #2
 80041aa:	42a6      	cmp	r6, r4
 80041ac:	d105      	bne.n	80041ba <__libc_init_array+0x2e>
 80041ae:	bd70      	pop	{r4, r5, r6, pc}
 80041b0:	00b3      	lsls	r3, r6, #2
 80041b2:	58eb      	ldr	r3, [r5, r3]
 80041b4:	4798      	blx	r3
 80041b6:	3601      	adds	r6, #1
 80041b8:	e7ee      	b.n	8004198 <__libc_init_array+0xc>
 80041ba:	00b3      	lsls	r3, r6, #2
 80041bc:	58eb      	ldr	r3, [r5, r3]
 80041be:	4798      	blx	r3
 80041c0:	3601      	adds	r6, #1
 80041c2:	e7f2      	b.n	80041aa <__libc_init_array+0x1e>
 80041c4:	0800422c 	.word	0x0800422c
 80041c8:	0800422c 	.word	0x0800422c
 80041cc:	08004234 	.word	0x08004234
 80041d0:	0800422c 	.word	0x0800422c

080041d4 <_init>:
 80041d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041d6:	46c0      	nop			; (mov r8, r8)
 80041d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041da:	bc08      	pop	{r3}
 80041dc:	469e      	mov	lr, r3
 80041de:	4770      	bx	lr

080041e0 <_fini>:
 80041e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041e2:	46c0      	nop			; (mov r8, r8)
 80041e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041e6:	bc08      	pop	{r3}
 80041e8:	469e      	mov	lr, r3
 80041ea:	4770      	bx	lr
